%hyperhelp title="os.path --- Common pathname manipulations" date="2020-05-12"

Operations on pathnames.

Source code: |Lib.posixpath.py|✅ |Lib/posixpath.py|❌ (for POSIX) and
:source:`Lib/ntpath.py` (for Windows NT).

This module implements some useful functions on pathnames. To read or
write files see :func:`open`, and for accessing the filesystem see the
:mod:`os` module. The path parameters can be passed as either strings,
or bytes. Applications are encouraged to represent file names as
(Unicode) character strings. Unfortunately, some file names may not be
representable as strings on Unix, so applications that need to support
arbitrary file names on Unix should use bytes objects to represent
path names. Vice versa, using bytes objects cannot represent all file
names on Windows (in the standard ``mbcs`` encoding), hence Windows
applications should use string objects to access all files.

|os.path.abspath| `|os.path.abspath|` ✅
|os.path.expandvars| `|os.path.expandvars|` ✅
|::os.path.expandvars| `|::os.path.expandvars|` ✅
|:os.path.expandvars:expandvars| `|:os.path.expandvars:expandvars|` ✅
|os.path| `|os.path|` ✅
|SnAPI:index.txt:index.txt|  `|SnAPI:index.txt:index.txt| ` -> non-existant package ('SnAPI') ❌

Unlike a unix shell, Python does not do any <automatic> path expansions.
Functions such as |expanduser| and |expandvars| can be invoked
explicitly when an application desires shell-like path expansion.  (See also
the :mod:`glob` module.)


.. seealso::
   The :mod:`pathlib` module offers high-level path objects.


.. note::

   All of these functions accept either only bytes or only string objects as
   their parameters.  The result is an object of the same type, if a path or
   file name is returned.


.. note::

   Since different operating systems have different path name conventions, there
   are several versions of this module in the standard library.  The
   :mod:`os.path` module is always the path module suitable for the operating
   system Python is running on, and therefore usable for local paths.  However,
   you can also import and use the individual modules if you want to manipulate
   a path that is <always> in one of the different formats.  They all have the
   same interface:

   * :mod:`posixpath` for UNIX-style paths
   * :mod:`ntpath` for Windows paths


# os.path.abspath: abspath(path)

   Return a normalized absolutized version of the pathname `path`. On most
   platforms, this is equivalent to calling the function :func:`normpath` as
   follows: ``normpath(join(os.getcwd(), path))``.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.


# os.path.basename: basename(path)

   Return the base name of pathname `path`.  This is the second element of the
   pair returned by passing `path` to the function :func:`split`.  Note that
   the result of this function is different
   from the Unix :program:`basename` program; where :program:`basename` for
   ``'/foo/bar/'`` returns ``'bar'``, the :func:`basename` function returns an
   empty string (``''``).

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.


# os.path.commonpath: commonpath(paths)

   Return the longest common sub-path of each pathname in the sequence
   `paths`.  Raise :exc:`ValueError` if `paths` contain both absolute
   and relative pathnames, the `paths` are on the different drives or
   if `paths` is empty.  Unlike :func:`commonprefix`, this returns a
   valid path.

   .. availability:: Unix, Windows.

   .. versionadded:: 3.5

   .. versionchanged:: 3.6
      Accepts a sequence of :term:`path-like objects <path-like object>`.


# os.path.commonprefix: commonprefix(list)

   Return the longest path prefix (taken character-by-character) that is a
   prefix of all paths in  `list`.  If `list` is empty, return the empty string
   (``''``).

   .. note::

      This function may return invalid paths because it works a
      character at a time.  To obtain a valid path, see
      :func:`commonpath`.

      ::

        >>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])
        '/usr/l'

        >>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])
        '/usr'

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.


# os.path.dirname: dirname(path)

   Return the directory name of pathname `path`.  This is the first element of
   the pair returned by passing `path` to the function :func:`split`.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.


# os.path.exists: exists(path)

   Return ``True`` if `path` refers to an existing path or an open
   file descriptor.  Returns ``False`` for broken symbolic links.  On
   some platforms, this function may return ``False`` if permission is
   not granted to execute :func:`os.stat` on the requested file, even
   if the `path` physically exists.

   .. versionchanged:: 3.3
      `path` can now be an integer: ``True`` is returned if it is an
       open file descriptor, ``False`` otherwise.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.


# os.path.lexists: lexists(path)

   Return ``True`` if `path` refers to an existing path. Returns ``True`` for
   broken symbolic links.   Equivalent to :func:`exists` on platforms lacking
   :func:`os.lstat`.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.


.. index:: single: ~ (tilde); home directory expansion

# os.path.expanduser: expanduser(path)*

   On Unix and Windows, return the argument with an initial component of ``~`` or
   ``~user`` replaced by that `user`'s home directory.

   .. index:: module: pwd

   On Unix, an initial ``~`` is replaced by the environment variable :envvar:`HOME`
   if it is set; otherwise the current user's home directory is looked up in the
   password directory through the built-in module :mod:`pwd`. An initial ``~user``
   is looked up directly in the password directory.

   On Windows, :envvar:`USERPROFILE` will be used if set, otherwise a combination
   of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will be used.  An initial
   ``~user`` is handled by stripping the last directory component from the created
   user path derived above.

   If the expansion fails or if the path does not begin with a tilde, the path is
   returned unchanged.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.

   .. versionchanged:: 3.8
      No longer uses :envvar:`HOME` on Windows.

.. index::
   single: $ (dollar); environment variables expansion
   single: % (percent); environment variables expansion (Windows)

# os.path.expandvars: expandvars(path)

   Return the argument with environment variables expanded.  Substrings of the form
   ``$name`` or ``${name}`` are replaced by the value of environment variable
   `name`.  Malformed variable names and references to non-existing variables are
   left unchanged.

   On Windows, ``%name%`` expansions are supported in addition to ``$name`` and
   ``${name}``.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.

