%hyperhelp title="multiprocessing" date="2021-07-11"
*|module-multiprocessing:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/multiprocessing:Lib/multiprocessing/|

======================================================================

# introduction:Introduction

|:module-multiprocessing:multiprocessing| is a package that supports spawning processes using an API
similar to the |:library/threading.txt/module-threading:threading| module.  The |:module-multiprocessing:multiprocessing| package offers both
local and remote concurrency, effectively side-stepping the
|:glossary.txt/term-global-interpreter-lock:Global Interpreter Lock| by using subprocesses instead of threads.  Due to
this, the |:module-multiprocessing:multiprocessing| module allows the programmer to fully leverage
multiple processors on a given machine.  It runs on both Unix and Windows.

The |:module-multiprocessing:multiprocessing| module also introduces APIs which do not have analogs in
the |:library/threading.txt/module-threading:threading| module.  A prime example of this is the |:multiprocessing.pool.Pool:Pool| object which
offers a convenient means of parallelizing the execution of a function across
multiple input values, distributing the input data across processes (data
parallelism).  The following example demonstrates the common practice of
defining such functions in a module so that child processes can successfully
import that module.  This basic example of data parallelism using |:multiprocessing.pool.Pool:Pool|,

```rst
from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    with Pool(5) as p:
        print(p.map(f, [1, 2, 3]))
```

will print to standard output

```rst
[1, 4, 9]
```

## the-process-class:The |:multiprocessing.Process:Process| class

In |:module-multiprocessing:multiprocessing|, processes are spawned by creating a |:multiprocessing.Process:Process| object and
then calling its |:multiprocessing.Process.start:start()| method.  |:multiprocessing.Process:Process| follows the API of
|:library/threading.txt/threading.Thread:threading.Thread|.  A trivial example of a multiprocess program is

```rst
from multiprocessing import Process

def f(name):
    print('hello', name)

if __name__ == '__main__':
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()
```

To show the individual process IDs involved, here is an expanded example:

```rst
from multiprocessing import Process
import os

def info(title):
    print(title)
    print('module name:', __name__)
    print('parent process:', os.getppid())
    print('process id:', os.getpid())

def f(name):
    info('function f')
    print('hello', name)

if __name__ == '__main__':
    info('main line')
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()
```

For an explanation of why the "if __name__ == '__main__'" part is necessary, see
|:multiprocessing-programming:Programming guidelines|.

## contexts-and-start-methods:Contexts and start methods*|multiprocessing-start-
methods:⚓|*

Depending on the platform, |:module-multiprocessing:multiprocessing| supports three ways to start a
process.  These *start methods* are

   *spawn*
      The parent process starts a fresh python interpreter process.  The child process
      will only inherit those resources necessary to run the process object’s |:multiprocessing.Process.run:run()|
      method.  In particular, unnecessary file descriptors and handles from the parent
      process will not be inherited.  Starting a process using this method is rather
      slow compared to using *fork* or *forkserver*.

      Available on Unix and Windows.  The default on Windows and macOS.

   *fork*
      The parent process uses |:library/os.txt/os.fork:os.fork()| to fork the Python interpreter.  The child
      process, when it begins, is effectively identical to the parent process.  All
      resources of the parent are inherited by the child process.  Note that safely
      forking a multithreaded process is problematic.

      Available on Unix only.  The default on Unix.

   *forkserver*
      When the program starts and selects the *forkserver* start method, a server
      process is started.  From then on, whenever a new process is needed, the parent
      process connects to the server and requests that it fork a new process.  The
      fork server process is single threaded so it is safe for it to use |:library/os.txt/os.fork:os.fork()|.
      No unnecessary resources are inherited.

      Available on Unix platforms which support passing file descriptors over Unix
      pipes.

Changed in version 3.8: On macOS, the *spawn* start method is now the default.
The *fork* start method should be considered unsafe as it can lead to crashes of
the subprocess. See |:bugs.python.org/issue33725:bpo-33725|.

Changed in version 3.4: *spawn* added on all unix platforms, and *forkserver*
added for some unix platforms. Child processes no longer inherit all of the
parents inheritable handles on Windows.

On Unix using the *spawn* or *forkserver* start methods will also start a *
resource tracker* process which tracks the unlinked named system resources (such
as named semaphores or |:library/multiprocessing.shared_memory.txt/multiprocessing.shared_memory.SharedMemory:SharedMemory| objects) created by processes of the
program.  When all processes have exited the resource tracker unlinks any
remaining tracked object. Usually there should be none, but if a process was
killed by a signal there may be some “leaked” resources.  (Neither leaked
semaphores nor shared memory segments will be automatically unlinked until the
next reboot. This is problematic for both objects because the system allows only
a limited number of named semaphores, and shared memory segments occupy some
space in the main memory.)

To select a start method you use the |:multiprocessing.set_start_method:set_start_method()| in the "if __name__ ==
'__main__'" clause of the main module.  For example:

```rst
import multiprocessing as mp

def foo(q):
    q.put('hello')

if __name__ == '__main__':
    mp.set_start_method('spawn')
    q = mp.Queue()
    p = mp.Process(target=foo, args=(q,))
    p.start()
    print(q.get())
    p.join()
```

|:multiprocessing.set_start_method:set_start_method()| should not be used more than once in the program.

Alternatively, you can use |:multiprocessing.get_context:get_context()| to obtain a context object.  Context
objects have the same API as the multiprocessing module, and allow one to use
multiple start methods in the same program.

```rst
import multiprocessing as mp

def foo(q):
    q.put('hello')

if __name__ == '__main__':
    ctx = mp.get_context('spawn')
    q = ctx.Queue()
    p = ctx.Process(target=foo, args=(q,))
    p.start()
    print(q.get())
    p.join()
```

Note that objects related to one context may not be compatible with processes
for a different context.  In particular, locks created using the *fork* context
cannot be passed to processes started using the *spawn* or *forkserver* start
methods.

A library which wants to use a particular start method should probably use
|:multiprocessing.get_context:get_context()| to avoid interfering with the choice of the library user.

Warning:

  The "'spawn'" and "'forkserver'" start methods cannot currently be used with
  “frozen” executables (i.e., binaries produced by packages like *PyInstaller* and
  *cx_Freeze*) on Unix. The "'fork'" start method does work.

## exchanging-objects-between-processes:Exchanging objects between processes

|:module-multiprocessing:multiprocessing| supports two types of communication channel between processes:

*Queues*

   The |:multiprocessing.Queue:Queue| class is a near clone of |:library/queue.txt/queue.Queue:queue.Queue|.  For example:

```rst
from multiprocessing import Process, Queue

def f(q):
    q.put([42, None, 'hello'])

if __name__ == '__main__':
    q = Queue()
    p = Process(target=f, args=(q,))
    p.start()
    print(q.get())    # prints "[42, None, 'hello']"
    p.join()
```

   Queues are thread and process safe.

*Pipes*

   The |:multiprocessing.Pipe:Pipe()| function returns a pair of connection objects connected by a pipe
   which by default is duplex (two-way).  For example:

```rst
from multiprocessing import Process, Pipe

def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print(parent_conn.recv())   # prints "[42, None, 'hello']"
    p.join()
```

   The two connection objects returned by |:multiprocessing.Pipe:Pipe()| represent the two ends of the
   pipe.  Each connection object has "send()" and "recv()" methods (among others).
   Note that data in a pipe may become corrupted if two processes (or threads) try
   to read from or write to the *same* end of the pipe at the same time.  Of course
   there is no risk of corruption from processes using different ends of the pipe
   at the same time.

## synchronization-between-processes:Synchronization between processes

|:module-multiprocessing:multiprocessing| contains equivalents of all the synchronization primitives
from |:library/threading.txt/module-threading:threading|.  For instance one can use a lock to ensure that only one
process prints to standard output at a time:

```rst
from multiprocessing import Process, Lock

def f(l, i):
    l.acquire()
    try:
        print('hello world', i)
    finally:
        l.release()

if __name__ == '__main__':
    lock = Lock()

    for num in range(10):
        Process(target=f, args=(lock, num)).start()
```

Without using the lock output from the different processes is liable to get all
mixed up.

## sharing-state-between-processes:Sharing state between processes

As mentioned above, when doing concurrent programming it is usually best to
avoid using shared state as far as possible.  This is particularly true when
using multiple processes.

However, if you really do need to use some shared data then |:module-multiprocessing:multiprocessing|
provides a couple of ways of doing so.

*Shared memory*

   Data can be stored in a shared memory map using |:multiprocessing.Value:Value| or |:multiprocessing.Array:Array|.  For
   example, the following code

```rst
from multiprocessing import Process, Value, Array

def f(n, a):
    n.value = 3.1415927
    for i in range(len(a)):
        a[i] = -a[i]

if __name__ == '__main__':
    num = Value('d', 0.0)
    arr = Array('i', range(10))

    p = Process(target=f, args=(num, arr))
    p.start()
    p.join()

    print(num.value)
    print(arr[:])
```

   will print

```rst
3.1415927
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
```

   The "'d'" and "'i'" arguments used when creating "num" and "arr" are typecodes
   of the kind used by the |:library/array.txt/module-array:array| module: "'d'" indicates a double precision float
   and "'i'" indicates a signed integer.  These shared objects will be process and
   thread-safe.

   For more flexibility in using shared memory one can use the
   |:module-multiprocessing.sharedctypes:multiprocessing.sharedctypes| module which supports the creation of arbitrary
   ctypes objects allocated from shared memory.

*Server process*

   A manager object returned by "Manager()" controls a server process which holds
   Python objects and allows other processes to manipulate them using proxies.

   A manager returned by "Manager()" will support types |:library/stdtypes.txt/list:list|, |:library/stdtypes.txt/dict:dict|, |:multiprocessing.managers.Namespace:Namespace|
   , |:multiprocessing.Lock:Lock|, |:multiprocessing.RLock:RLock|, |:multiprocessing.Semaphore:Semaphore|, |:multiprocessing.BoundedSemaphore:BoundedSemaphore|, |:multiprocessing.Condition:Condition|, |:multiprocessing.Event:Event|,
   |:multiprocessing.Barrier:Barrier|, |:multiprocessing.Queue:Queue|, |:multiprocessing.Value:Value| and |:multiprocessing.Array:Array|.  For example,

```rst
from multiprocessing import Process, Manager

def f(d, l):
    d[1] = '1'
    d['2'] = 2
    d[0.25] = None
    l.reverse()

if __name__ == '__main__':
    with Manager() as manager:
        d = manager.dict()
        l = manager.list(range(10))

        p = Process(target=f, args=(d, l))
        p.start()
        p.join()

        print(d)
        print(l)
```

   will print

```rst
{0.25: None, 1: '1', '2': 2}
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
```

   Server process managers are more flexible than using shared memory objects
   because they can be made to support arbitrary object types.  Also, a single
   manager can be shared by processes on different computers over a network. They
   are, however, slower than using shared memory.

## using-a-pool-of-workers:Using a pool of workers

The |:multiprocessing.pool.Pool:Pool| class represents a pool of worker processes.  It has methods which
allows tasks to be offloaded to the worker processes in a few different ways.

For example:

```rst
from multiprocessing import Pool, TimeoutError
import time
import os

def f(x):
    return x*x

if __name__ == '__main__':
    # start 4 worker processes
    with Pool(processes=4) as pool:

        # print "[0, 1, 4,..., 81]"
        print(pool.map(f, range(10)))

        # print same numbers in arbitrary order
        for i in pool.imap_unordered(f, range(10)):
            print(i)

        # evaluate "f(20)" asynchronously
        res = pool.apply_async(f, (20,))      # runs in *only* one process
        print(res.get(timeout=1))             # prints "400"

        # evaluate "os.getpid()" asynchronously
        res = pool.apply_async(os.getpid, ()) # runs in *only* one process
        print(res.get(timeout=1))             # prints the PID of that process

        # launching multiple evaluations asynchronously *may* use more processes
        multiple_results = [pool.apply_async(os.getpid, ()) for i in range(4)]
        print([res.get(timeout=1) for res in multiple_results])

        # make a single worker sleep for 10 secs
        res = pool.apply_async(time.sleep, (10,))
        try:
            print(res.get(timeout=1))
        except TimeoutError:
            print("We lacked patience and got a multiprocessing.TimeoutError")

        print("For the moment, the pool remains available for more work")

    # exiting the 'with'-block has stopped the pool
    print("Now the pool is closed and no longer available")
```

Note that the methods of a pool should only ever be used by the process which
created it.

Note:

  Functionality within this package requires that the "__main__" module be
  importable by the children. This is covered in |:multiprocessing-programming:Programming guidelines| however
  it is worth pointing out here. This means that some examples, such as the
  |:multiprocessing.pool.Pool:multiprocessing.pool.Pool| examples will not work in the interactive
  interpreter. For example:

```rst
>>> from multiprocessing import Pool
>>> p = Pool(5)
>>> def f(x):
...     return x*x
...
>>> with p:
...   p.map(f, [1,2,3])
Process PoolWorker-1:
Process PoolWorker-2:
Process PoolWorker-3:
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
AttributeError: 'module' object has no attribute 'f'
AttributeError: 'module' object has no attribute 'f'
AttributeError: 'module' object has no attribute 'f'
```

  (If you try this it will actually output three full tracebacks interleaved in a
  semi-random fashion, and then you may have to stop the parent process somehow.)

# reference:Reference

The |:module-multiprocessing:multiprocessing| package mostly replicates the API of the |:library/threading.txt/module-threading:threading|
module.

## process-and-exceptions:|:multiprocessing.Process:Process| and exceptions

*multiprocessing.Process:class multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)*

   Process objects represent activity that is run in a separate process. The
   |:multiprocessing.Process:Process| class has equivalents of all the methods of |:library/threading.txt/threading.Thread:threading.Thread|.

   The constructor should always be called with keyword arguments. *group* should
   always be "None"; it exists solely for compatibility with |:library/threading.txt/threading.Thread:threading.Thread|.  *
   target* is the callable object to be invoked by the |:multiprocessing.Process.run:run()| method.  It defaults
   to "None", meaning nothing is called. *name* is the process name (see |:multiprocessing.Process.name:name| for
   more details). *args* is the argument tuple for the target invocation.  *kwargs*
   is a dictionary of keyword arguments for the target invocation.  If provided,
   the keyword-only *daemon* argument sets the process |:multiprocessing.Process.daemon:daemon| flag to "True" or "
   False".  If "None" (the default), this flag will be inherited from the creating
   process.

   By default, no arguments are passed to *target*.

   If a subclass overrides the constructor, it must make sure it invokes the base
   class constructor ("Process.__init__()") before doing anything else to the
   process.

   Changed in version 3.3: Added the *daemon* argument.

   *multiprocessing.Process.run:run()*

      Method representing the process’s activity.

      You may override this method in a subclass.  The standard |:multiprocessing.Process.run:run()| method invokes
      the callable object passed to the object’s constructor as the target argument,
      if any, with sequential and keyword arguments taken from the *args* and *kwargs*
      arguments, respectively.

   *multiprocessing.Process.start:start()*

      Start the process’s activity.

      This must be called at most once per process object.  It arranges for the
      object’s |:multiprocessing.Process.run:run()| method to be invoked in a separate process.

   *multiprocessing.Process.join:join([timeout])*

      If the optional argument *timeout* is "None" (the default), the method blocks
      until the process whose |:multiprocessing.Process.join:join()| method is called terminates. If *timeout* is a
      positive number, it blocks at most *timeout* seconds. Note that the method
      returns "None" if its process terminates or if the method times out.  Check the
      process’s |:multiprocessing.Process.exitcode:exitcode| to determine if it terminated.

      A process can be joined many times.

      A process cannot join itself because this would cause a deadlock.  It is an
      error to attempt to join a process before it has been started.

   *multiprocessing.Process.name:name*

      The process’s name.  The name is a string used for identification purposes only.
      It has no semantics.  Multiple processes may be given the same name.

      The initial name is set by the constructor.  If no explicit name is provided to
      the constructor, a name of the form ‘Process-N_1:N_2:…:N_k’ is constructed,
      where each N_k is the N-th child of its parent.

   *multiprocessing.Process.is_alive:is_alive()*

      Return whether the process is alive.

      Roughly, a process object is alive from the moment the |:multiprocessing.Process.start:start()| method returns
      until the child process terminates.

   *multiprocessing.Process.daemon:daemon*

      The process’s daemon flag, a Boolean value.  This must be set before |:multiprocessing.Process.start:start()|
      is called.

      The initial value is inherited from the creating process.

      When a process exits, it attempts to terminate all of its daemonic child
      processes.

      Note that a daemonic process is not allowed to create child processes. Otherwise
      a daemonic process would leave its children orphaned if it gets terminated when
      its parent process exits. Additionally, these are *not* Unix daemons or
      services, they are normal processes that will be terminated (and not joined) if
      non-daemonic processes have exited.

   In addition to the  |:library/threading.txt/threading.Thread:threading.Thread| API, |:multiprocessing.Process:Process| objects also support the
   following attributes and methods:

   *multiprocessing.Process.pid:pid*

      Return the process ID.  Before the process is spawned, this will be "None".

   *multiprocessing.Process.exitcode:exitcode*

      The child’s exit code.  This will be "None" if the process has not yet
      terminated.  A negative value *-N* indicates that the child was terminated by
      signal *N*.

   *multiprocessing.Process.authkey:authkey*

      The process’s authentication key (a byte string).

      When |:module-multiprocessing:multiprocessing| is initialized the main process is assigned a random
      string using |:library/os.txt/os.urandom:os.urandom()|.

      When a |:multiprocessing.Process:Process| object is created, it will inherit the authentication key of
      its parent process, although this may be changed by setting |:multiprocessing.Process.authkey:authkey| to another
      byte string.

      See |:multiprocessing-auth-keys:Authentication keys|.

   *multiprocessing.Process.sentinel:sentinel*

      A numeric handle of a system object which will become “ready” when the process
      ends.

      You can use this value if you want to wait on several events at once using
      |:multiprocessing.connection.wait:multiprocessing.connection.wait()|.  Otherwise calling |:multiprocessing.Process.join:join()| is simpler.

      On Windows, this is an OS handle usable with the "WaitForSingleObject" and "
      WaitForMultipleObjects" family of API calls.  On Unix, this is a file descriptor
      usable with primitives from the |:library/select.txt/module-select:select| module.

      New in version 3.3.

   *multiprocessing.Process.terminate:terminate()*

      Terminate the process.  On Unix this is done using the "SIGTERM" signal; on
      Windows "TerminateProcess()" is used.  Note that exit handlers and finally
      clauses, etc., will not be executed.

      Note that descendant processes of the process will *not* be terminated – they
      will simply become orphaned.

      Warning:

        If this method is used when the associated process is using a pipe or queue then
        the pipe or queue is liable to become corrupted and may become unusable by other
        process.  Similarly, if the process has acquired a lock or semaphore etc. then
        terminating it is liable to cause other processes to deadlock.

   *multiprocessing.Process.kill:kill()*

      Same as |:multiprocessing.Process.terminate:terminate()| but using the "SIGKILL" signal on Unix.

      New in version 3.7.

   *multiprocessing.Process.close:close()*

      Close the |:multiprocessing.Process:Process| object, releasing all resources associated with it.
      |:library/exceptions.txt/ValueError:ValueError| is raised if the underlying process is still running.  Once
      |:multiprocessing.Process.close:close()| returns successfully, most other methods and attributes of the
      |:multiprocessing.Process:Process| object will raise |:library/exceptions.txt/ValueError:ValueError|.

      New in version 3.7.

   Note that the |:multiprocessing.Process.start:start()|, |:multiprocessing.Process.join:join()|, |:multiprocessing.Process.is_alive:is_alive()|, |:multiprocessing.Process.terminate:terminate()| and |:multiprocessing.Process.exitcode:exitcode|
   methods should only be called by the process that created the process object.

   Example usage of some of the methods of |:multiprocessing.Process:Process|:

```rst
 >>> import multiprocessing, time, signal
 >>> p = multiprocessing.Process(target=time.sleep, args=(1000,))
 >>> print(p, p.is_alive())
 <Process ... initial> False
 >>> p.start()
 >>> print(p, p.is_alive())
 <Process ... started> True
 >>> p.terminate()
 >>> time.sleep(0.1)
 >>> print(p, p.is_alive())
 <Process ... stopped exitcode=-SIGTERM> False
 >>> p.exitcode == -signal.SIGTERM
 True
```

*multiprocessing.ProcessError:exception multiprocessing.ProcessError*

   The base class of all |:module-multiprocessing:multiprocessing| exceptions.

*multiprocessing.BufferTooShort:exception multiprocessing.BufferTooShort*

   Exception raised by "Connection.recv_bytes_into()" when the supplied buffer
   object is too small for the message read.

   If "e" is an instance of |:multiprocessing.BufferTooShort:BufferTooShort| then "e.args[0]" will give the message
   as a byte string.

*multiprocessing.AuthenticationError:exception multiprocessing.AuthenticationError*

   Raised when there is an authentication error.

*multiprocessing.TimeoutError:exception multiprocessing.TimeoutError*

   Raised by methods with a timeout when the timeout expires.

## pipes-and-queues:Pipes and Queues

When using multiple processes, one generally uses message passing for
communication between processes and avoids having to use any synchronization
primitives like locks.

For passing messages one can use |:multiprocessing.Pipe:Pipe()| (for a connection between two
processes) or a queue (which allows multiple producers and consumers).

The |:multiprocessing.Queue:Queue|, |:multiprocessing.SimpleQueue:SimpleQueue| and |:multiprocessing.JoinableQueue:JoinableQueue| types are multi-producer, multi-
consumer FIFO (first-in, first-out) queues modelled on the |:library/queue.txt/queue.Queue:queue.Queue| class
in the standard library.  They differ in that |:multiprocessing.Queue:Queue| lacks the |:library/queue.txt/queue.Queue.task_done:task_done()|
and |:library/queue.txt/queue.Queue.join:join()| methods introduced into Python 2.5’s |:library/queue.txt/queue.Queue:queue.Queue| class.

If you use |:multiprocessing.JoinableQueue:JoinableQueue| then you *must* call |:multiprocessing.JoinableQueue.task_done:JoinableQueue.task_done()| for
each task removed from the queue or else the semaphore used to count the number
of unfinished tasks may eventually overflow, raising an exception.

Note that one can also create a shared queue by using a manager object – see
|:multiprocessing-managers:Managers|.

Note:

  |:module-multiprocessing:multiprocessing| uses the usual |:library/queue.txt/queue.Empty:queue.Empty| and |:library/queue.txt/queue.Full:queue.Full| exceptions to
  signal a timeout.  They are not available in the |:module-multiprocessing:multiprocessing| namespace so
  you need to import them from |:library/queue.txt/module-queue:queue|.

Note:

  When an object is put on a queue, the object is pickled and a background thread
  later flushes the pickled data to an underlying pipe.  This has some
  consequences which are a little surprising, but should not cause any practical
  difficulties – if they really bother you then you can instead use a queue
  created with a |:multiprocessing-managers:manager|.

  1. After putting an object on an empty queue there may be an infinitesimal delay
     before the queue’s |:multiprocessing.Queue.empty:empty()| method returns |:library/constants.txt/False:False| and |:multiprocessing.Queue.get_nowait:get_nowait()| can
     return without raising |:library/queue.txt/queue.Empty:queue.Empty|.

  2. If multiple processes are enqueuing objects, it is possible for the objects to
     be received at the other end out-of-order. However, objects enqueued by the same
     process will always be in the expected order with respect to each other.

Warning:

  If a process is killed using |:multiprocessing.Process.terminate:Process.terminate()| or |:library/os.txt/os.kill:os.kill()| while it is
  trying to use a |:multiprocessing.Queue:Queue|, then the data in the queue is likely to become
  corrupted.  This may cause any other process to get an exception when it tries
  to use the queue later on.

Warning:

  As mentioned above, if a child process has put items on a queue (and it has not
  used |:multiprocessing.Queue.cancel_join_thread:JoinableQueue.cancel_join_thread|), then that process will not terminate
  until all buffered items have been flushed to the pipe.This means that if you
  try joining that process you may get a deadlock unless you are sure that all
  items which have been put on the queue have been consumed.  Similarly, if the
  child process is non-daemonic then the parent process may hang on exit when it
  tries to join all its non-daemonic children.Note that a queue created using a
  manager does not have this issue.  See |:multiprocessing-programming:Programming guidelines|.

For an example of the usage of queues for interprocess communication see
|:multiprocessing-examples:Examples|.

*multiprocessing.Pipe:multiprocessing.Pipe([duplex])*

   Returns a pair "(conn1, conn2)" of |:multiprocessing.connection.Connection:Connection| objects representing the ends of
   a pipe.

   If *duplex* is "True" (the default) then the pipe is bidirectional.  If *duplex*
   is "False" then the pipe is unidirectional: "conn1" can only be used for
   receiving messages and "conn2" can only be used for sending messages.

*multiprocessing.Queue:class multiprocessing.Queue([maxsize])*

   Returns a process shared queue implemented using a pipe and a few
   locks/semaphores.  When a process first puts an item on the queue a feeder
   thread is started which transfers objects from a buffer into the pipe.

   The usual |:library/queue.txt/queue.Empty:queue.Empty| and |:library/queue.txt/queue.Full:queue.Full| exceptions from the standard library’s
   |:library/queue.txt/module-queue:queue| module are raised to signal timeouts.

   |:multiprocessing.Queue:Queue| implements all the methods of |:library/queue.txt/queue.Queue:queue.Queue| except for |:library/queue.txt/queue.Queue.task_done:task_done()| and
   |:library/queue.txt/queue.Queue.join:join()|.

   *multiprocessing.Queue.qsize:qsize()*

      Return the approximate size of the queue.  Because of
      multithreading/multiprocessing semantics, this number is not reliable.

      Note that this may raise |:library/exceptions.txt/NotImplementedError:NotImplementedError| on Unix platforms like Mac OS X
      where "sem_getvalue()" is not implemented.

   *multiprocessing.Queue.empty:empty()*

      Return "True" if the queue is empty, "False" otherwise.  Because of
      multithreading/multiprocessing semantics, this is not reliable.

   *multiprocessing.Queue.full:full()*

      Return "True" if the queue is full, "False" otherwise.  Because of
      multithreading/multiprocessing semantics, this is not reliable.

   *multiprocessing.Queue.put:put(obj[, block[, timeout]])*

      Put obj into the queue.  If the optional argument *block* is "True" (the
      default) and *timeout* is "None" (the default), block if necessary until a free
      slot is available.  If *timeout* is a positive number, it blocks at most *
      timeout* seconds and raises the |:library/queue.txt/queue.Full:queue.Full| exception if no free slot was
      available within that time.  Otherwise (*block* is "False"), put an item on the
      queue if a free slot is immediately available, else raise the |:library/queue.txt/queue.Full:queue.Full|
      exception (*timeout* is ignored in that case).

      Changed in version 3.8: If the queue is closed, |:library/exceptions.txt/ValueError:ValueError| is raised instead
      of |:library/exceptions.txt/AssertionError:AssertionError|.

   *multiprocessing.Queue.put_nowait:put_nowait(obj)*

      Equivalent to "put(obj, False)".

   *multiprocessing.Queue.get:get([block[, timeout]])*

      Remove and return an item from the queue.  If optional args *block* is "True"
      (the default) and *timeout* is "None" (the default), block if necessary until an
      item is available.  If *timeout* is a positive number, it blocks at most *
      timeout* seconds and raises the |:library/queue.txt/queue.Empty:queue.Empty| exception if no item was available
      within that time.  Otherwise (block is "False"), return an item if one is
      immediately available, else raise the |:library/queue.txt/queue.Empty:queue.Empty| exception (*timeout* is
      ignored in that case).

      Changed in version 3.8: If the queue is closed, |:library/exceptions.txt/ValueError:ValueError| is raised instead
      of |:library/exceptions.txt/OSError:OSError|.

   *multiprocessing.Queue.get_nowait:get_nowait()*

      Equivalent to "get(False)".

   |:multiprocessing.Queue:multiprocessing.Queue| has a few additional methods not found in |:library/queue.txt/queue.Queue:queue.Queue|.
   These methods are usually unnecessary for most code:

   *multiprocessing.Queue.close:close()*

      Indicate that no more data will be put on this queue by the current process.
      The background thread will quit once it has flushed all buffered data to the
      pipe.  This is called automatically when the queue is garbage collected.

   *multiprocessing.Queue.join_thread:join_thread()*

      Join the background thread.  This can only be used after |:multiprocessing.Queue.close:close()| has been
      called.  It blocks until the background thread exits, ensuring that all data in
      the buffer has been flushed to the pipe.

      By default if a process is not the creator of the queue then on exit it will
      attempt to join the queue’s background thread.  The process can call
      |:multiprocessing.Queue.cancel_join_thread:cancel_join_thread()| to make |:multiprocessing.Queue.join_thread:join_thread()| do nothing.

   *multiprocessing.Queue.cancel_join_thread:cancel_join_thread()*

      Prevent |:multiprocessing.Queue.join_thread:join_thread()| from blocking.  In particular, this prevents the
      background thread from being joined automatically when the process exits – see
      |:multiprocessing.Queue.join_thread:join_thread()|.

      A better name for this method might be "allow_exit_without_flush()".  It is
      likely to cause enqueued data to lost, and you almost certainly will not need to
      use it. It is really only there if you need the current process to exit
      immediately without waiting to flush enqueued data to the underlying pipe, and
      you don’t care about lost data.

   Note:

     This class’s functionality requires a functioning shared semaphore
     implementation on the host operating system. Without one, the functionality in
     this class will be disabled, and attempts to instantiate a |:multiprocessing.Queue:Queue| will result
     in an |:library/exceptions.txt/ImportError:ImportError|. See |:bugs.python.org/issue3770:bpo-3770| for additional information.  The same holds
     true for any of the specialized queue types listed below.

*multiprocessing.SimpleQueue:class multiprocessing.SimpleQueue*

   It is a simplified |:multiprocessing.Queue:Queue| type, very close to a locked |:multiprocessing.Pipe:Pipe|.

   *multiprocessing.SimpleQueue.empty:empty()*

      Return "True" if the queue is empty, "False" otherwise.

   *multiprocessing.SimpleQueue.get:get()*

      Remove and return an item from the queue.

   *multiprocessing.SimpleQueue.put:put(item)*

      Put *item* into the queue.

*multiprocessing.JoinableQueue:class multiprocessing.JoinableQueue([maxsize])*

   |:multiprocessing.JoinableQueue:JoinableQueue|, a |:multiprocessing.Queue:Queue| subclass, is a queue which additionally has
   |:multiprocessing.JoinableQueue.task_done:task_done()| and |:multiprocessing.JoinableQueue.join:join()| methods.

   *multiprocessing.JoinableQueue.task_done:task_done()*

      Indicate that a formerly enqueued task is complete. Used by queue consumers.
      For each |:multiprocessing.Queue.get:get()| used to fetch a task, a subsequent call to |:multiprocessing.JoinableQueue.task_done:task_done()| tells
      the queue that the processing on the task is complete.

      If a |:library/queue.txt/queue.Queue.join:join()| is currently blocking, it will resume when all items have been
      processed (meaning that a |:multiprocessing.JoinableQueue.task_done:task_done()| call was received for every item that
      had been |:multiprocessing.Queue.put:put()| into the queue).

      Raises a |:library/exceptions.txt/ValueError:ValueError| if called more times than there were items placed in the
      queue.

   *multiprocessing.JoinableQueue.join:join()*

      Block until all items in the queue have been gotten and processed.

      The count of unfinished tasks goes up whenever an item is added to the queue.
      The count goes down whenever a consumer calls |:multiprocessing.JoinableQueue.task_done:task_done()| to indicate that the
      item was retrieved and all work on it is complete.  When the count of unfinished
      tasks drops to zero, |:library/queue.txt/queue.Queue.join:join()| unblocks.

## miscellaneous:Miscellaneous

*multiprocessing.active_children:multiprocessing.active_children()*

   Return list of all live children of the current process.

   Calling this has the side effect of “joining” any processes which have already
   finished.

*multiprocessing.cpu_count:multiprocessing.cpu_count()*

   Return the number of CPUs in the system.

   This number is not equivalent to the number of CPUs the current process can use.
   The number of usable CPUs can be obtained with "len(os.sched_getaffinity(0))"

   May raise |:library/exceptions.txt/NotImplementedError:NotImplementedError|.

   See also: |:library/os.txt/os.cpu_count:os.cpu_count()|

*multiprocessing.current_process:multiprocessing.current_process()*

   Return the |:multiprocessing.Process:Process| object corresponding to the current process.

   An analogue of |:library/threading.txt/threading.current_thread:threading.current_thread()|.

*multiprocessing.parent_process:multiprocessing.parent_process()*

   Return the |:multiprocessing.Process:Process| object corresponding to the parent process of the
   |:multiprocessing.current_process:current_process()|. For the main process, "parent_process" will be "None".

   New in version 3.8.

*multiprocessing.freeze_support:multiprocessing.freeze_support()*

   Add support for when a program which uses |:module-multiprocessing:multiprocessing| has been frozen to
   produce a Windows executable.  (Has been tested with *py2exe*, *PyInstaller* and
   *cx_Freeze*.)

   One needs to call this function straight after the "if __name__ == '__main__'"
   line of the main module.  For example:

```rst
from multiprocessing import Process, freeze_support

def f():
    print('hello world!')

if __name__ == '__main__':
    freeze_support()
    Process(target=f).start()
```

   If the "freeze_support()" line is omitted then trying to run the frozen
   executable will raise |:library/exceptions.txt/RuntimeError:RuntimeError|.

   Calling "freeze_support()" has no effect when invoked on any operating system
   other than Windows.  In addition, if the module is being run normally by the
   Python interpreter on Windows (the program has not been frozen), then "
   freeze_support()" has no effect.

*multiprocessing.get_all_start_methods:multiprocessing.get_all_start_methods()*

   Returns a list of the supported start methods, the first of which is the
   default.  The possible start methods are "'fork'", "'spawn'" and "'forkserver'".
   On Windows only "'spawn'" is available.  On Unix "'fork'" and "'spawn'" are
   always supported, with "'fork'" being the default.

   New in version 3.4.

*multiprocessing.get_context:multiprocessing.get_context(method=None)*

   Return a context object which has the same attributes as the |:module-multiprocessing:multiprocessing|
   module.

   If *method* is "None" then the default context is returned. Otherwise *method*
   should be "'fork'", "'spawn'", "'forkserver'".  |:library/exceptions.txt/ValueError:ValueError| is raised if the
   specified start method is not available.

   New in version 3.4.

*multiprocessing.get_start_method:multiprocessing.get_start_method(allow_none=False)*

   Return the name of start method used for starting processes.

   If the start method has not been fixed and *allow_none* is false, then the start
   method is fixed to the default and the name is returned.  If the start method
   has not been fixed and *allow_none* is true then "None" is returned.

   The return value can be "'fork'", "'spawn'", "'forkserver'" or "None".  "'fork'"
   is the default on Unix, while "'spawn'" is the default on Windows.

   New in version 3.4.

*multiprocessing.set_executable:multiprocessing.set_executable()*

   Sets the path of the Python interpreter to use when starting a child process.
   (By default |:library/sys.txt/sys.executable:sys.executable| is used).  Embedders will probably need to do some
   thing like

```rst
set_executable(os.path.join(sys.exec_prefix, 'pythonw.exe'))
```

   before they can create child processes.

   Changed in version 3.4: Now supported on Unix when the "'spawn'" start method is
   used.

*multiprocessing.set_start_method:multiprocessing.set_start_method(method)*

   Set the method which should be used to start child processes. *method* can be "
   'fork'", "'spawn'" or "'forkserver'".

   Note that this should be called at most once, and it should be protected inside
   the "if __name__ == '__main__'" clause of the main module.

   New in version 3.4.

Note:

  |:module-multiprocessing:multiprocessing| contains no analogues of |:library/threading.txt/threading.active_count:threading.active_count()|,
  |:library/threading.txt/threading.enumerate:threading.enumerate()|, |:library/threading.txt/threading.settrace:threading.settrace()|, |:library/threading.txt/threading.setprofile:threading.setprofile()|,
  |:library/threading.txt/threading.Timer:threading.Timer|, or |:library/threading.txt/threading.local:threading.local|.

## connection-objects:Connection Objects

Connection objects allow the sending and receiving of picklable objects or
strings.  They can be thought of as message oriented connected sockets.

Connection objects are usually created using |:multiprocessing.Pipe:Pipe| – see also
|:multiprocessing-listeners-clients:Listeners and Clients|.

*multiprocessing.connection.Connection:class multiprocessing.connection.Connection*

   *multiprocessing.connection.Connection.send:send(obj)*

      Send an object to the other end of the connection which should be read using
      |:multiprocessing.connection.Connection.recv:recv()|.

      The object must be picklable.  Very large pickles (approximately 32 MiB+, though
      it depends on the OS) may raise a |:library/exceptions.txt/ValueError:ValueError| exception.

   *multiprocessing.connection.Connection.recv:recv()*

      Return an object sent from the other end of the connection using |:multiprocessing.connection.Connection.send:send()|.
      Blocks until there is something to receive.  Raises |:library/exceptions.txt/EOFError:EOFError| if there is
      nothing left to receive and the other end was closed.

   *multiprocessing.connection.Connection.fileno:fileno()*

      Return the file descriptor or handle used by the connection.

   *multiprocessing.connection.Connection.close:close()*

      Close the connection.

      This is called automatically when the connection is garbage collected.

   *multiprocessing.connection.Connection.poll:poll([timeout])*

      Return whether there is any data available to be read.

      If *timeout* is not specified then it will return immediately.  If *timeout* is
      a number then this specifies the maximum time in seconds to block.  If *timeout*
      is "None" then an infinite timeout is used.

      Note that multiple connection objects may be polled at once by using
      |:multiprocessing.connection.wait:multiprocessing.connection.wait()|.

   *multiprocessing.connection.Connection.send_bytes:send_bytes(buffer[, offset[, size]])*

      Send byte data from a |:glossary.txt/term-bytes-like-object:bytes-like object| as a complete message.

      If *offset* is given then data is read from that position in *buffer*.  If *size
      * is given then that many bytes will be read from buffer.  Very large buffers
      (approximately 32 MiB+, though it depends on the OS) may raise a |:library/exceptions.txt/ValueError:ValueError|
      exception

   *multiprocessing.connection.Connection.recv_bytes:recv_bytes([maxlength])*

      Return a complete message of byte data sent from the other end of the connection
      as a string.  Blocks until there is something to receive. Raises |:library/exceptions.txt/EOFError:EOFError| if
      there is nothing left to receive and the other end has closed.

      If *maxlength* is specified and the message is longer than *maxlength* then
      |:library/exceptions.txt/OSError:OSError| is raised and the connection will no longer be readable.

      Changed in version 3.3: This function used to raise |:library/exceptions.txt/IOError:IOError|, which is now an
      alias of |:library/exceptions.txt/OSError:OSError|.

   *multiprocessing.connection.Connection.recv_bytes_into:recv_bytes_into(buffer[, offset])*

      Read into *buffer* a complete message of byte data sent from the other end of
      the connection and return the number of bytes in the message.  Blocks until
      there is something to receive.  Raises |:library/exceptions.txt/EOFError:EOFError| if there is nothing left to
      receive and the other end was closed.

      *buffer* must be a writable |:glossary.txt/term-bytes-like-object:bytes-like object|.  If *offset* is given then the
      message will be written into the buffer from that position.  Offset must be a
      non-negative integer less than the length of *buffer* (in bytes).

      If the buffer is too short then a "BufferTooShort" exception is raised and the
      complete message is available as "e.args[0]" where "e" is the exception
      instance.

   Changed in version 3.3: Connection objects themselves can now be transferred
   between processes using |:multiprocessing.connection.Connection.send:Connection.send()| and |:multiprocessing.connection.Connection.recv:Connection.recv()|.

   New in version 3.3: Connection objects now support the context management
   protocol – see |:library/stdtypes.txt/typecontextmanager:Context Manager Types|.  |:library/stdtypes.txt/contextmanager.__enter__:__enter__()| returns the connection
   object, and |:library/stdtypes.txt/contextmanager.__exit__:__exit__()| calls |:multiprocessing.connection.Connection.close:close()|.

For example:

```rst
>>> from multiprocessing import Pipe
>>> a, b = Pipe()
>>> a.send([1, 'hello', None])
>>> b.recv()
[1, 'hello', None]
>>> b.send_bytes(b'thank you')
>>> a.recv_bytes()
b'thank you'
>>> import array
>>> arr1 = array.array('i', range(5))
>>> arr2 = array.array('i', [0] * 10)
>>> a.send_bytes(arr1)
>>> count = b.recv_bytes_into(arr2)
>>> assert count == len(arr1) * arr1.itemsize
>>> arr2
array('i', [0, 1, 2, 3, 4, 0, 0, 0, 0, 0])
```

Warning:

  The |:multiprocessing.connection.Connection.recv:Connection.recv()| method automatically unpickles the data it receives,
  which can be a security risk unless you can trust the process which sent the
  message.Therefore, unless the connection object was produced using "Pipe()" you
  should only use the |:multiprocessing.connection.Connection.recv:recv()| and |:multiprocessing.connection.Connection.send:send()| methods after performing some sort of
  authentication.  See |:multiprocessing-auth-keys:Authentication keys|.

Warning:

  If a process is killed while it is trying to read or write to a pipe then the
  data in the pipe is likely to become corrupted, because it may become impossible
  to be sure where the message boundaries lie.

## synchronization-primitives:Synchronization primitives

Generally synchronization primitives are not as necessary in a multiprocess
program as they are in a multithreaded program.  See the documentation for
|:library/threading.txt/module-threading:threading| module.

Note that one can also create synchronization primitives by using a manager
object – see |:multiprocessing-managers:Managers|.

*multiprocessing.Barrier:class multiprocessing.Barrier(parties[, action[, timeout]])*

   A barrier object: a clone of |:library/threading.txt/threading.Barrier:threading.Barrier|.

   New in version 3.3.

*multiprocessing.BoundedSemaphore:class multiprocessing.BoundedSemaphore([value])*

   A bounded semaphore object: a close analog of |:library/threading.txt/threading.BoundedSemaphore:threading.BoundedSemaphore|.

   A solitary difference from its close analog exists: its "acquire" method’s first
   argument is named *block*, as is consistent with |:multiprocessing.Lock.acquire:Lock.acquire()|.

   Note:

     On Mac OS X, this is indistinguishable from |:multiprocessing.Semaphore:Semaphore| because "sem_getvalue()"
     is not implemented on that platform.

*multiprocessing.Condition:class multiprocessing.Condition([lock])*

   A condition variable: an alias for |:library/threading.txt/threading.Condition:threading.Condition|.

   If *lock* is specified then it should be a |:multiprocessing.Lock:Lock| or |:multiprocessing.RLock:RLock| object from
   |:module-multiprocessing:multiprocessing|.

   Changed in version 3.3: The |:library/threading.txt/threading.Condition.wait_for:wait_for()| method was added.

*multiprocessing.Event:class multiprocessing.Event*

   A clone of |:library/threading.txt/threading.Event:threading.Event|.

*multiprocessing.Lock:class multiprocessing.Lock*

   A non-recursive lock object: a close analog of |:library/threading.txt/threading.Lock:threading.Lock|. Once a process
   or thread has acquired a lock, subsequent attempts to acquire it from any
   process or thread will block until it is released; any process or thread may
   release it.  The concepts and behaviors of |:library/threading.txt/threading.Lock:threading.Lock| as it applies to
   threads are replicated here in |:multiprocessing.Lock:multiprocessing.Lock| as it applies to either
   processes or threads, except as noted.

   Note that |:multiprocessing.Lock:Lock| is actually a factory function which returns an instance of "
   multiprocessing.synchronize.Lock" initialized with a default context.

   |:multiprocessing.Lock:Lock| supports the |:glossary.txt/term-context-manager:context manager| protocol and thus may be used in |:reference/compound_stmts.txt/with:with|
   statements.

   *multiprocessing.Lock.acquire:acquire(block=True, timeout=None)*

      Acquire a lock, blocking or non-blocking.

      With the *block* argument set to "True" (the default), the method call will
      block until the lock is in an unlocked state, then set it to locked and return "
      True".  Note that the name of this first argument differs from that in
      |:library/threading.txt/threading.Lock.acquire:threading.Lock.acquire()|.

      With the *block* argument set to "False", the method call does not block.  If
      the lock is currently in a locked state, return "False"; otherwise set the lock
      to a locked state and return "True".

      When invoked with a positive, floating-point value for *timeout*, block for at
      most the number of seconds specified by *timeout* as long as the lock can not be
      acquired.  Invocations with a negative value for *timeout* are equivalent to a *
      timeout* of zero.  Invocations with a *timeout* value of "None" (the default)
      set the timeout period to infinite.  Note that the treatment of negative or "
      None" values for *timeout* differs from the implemented behavior in
      |:library/threading.txt/threading.Lock.acquire:threading.Lock.acquire()|.  The *timeout* argument has no practical
      implications if the *block* argument is set to "False" and is thus ignored.
      Returns "True" if the lock has been acquired or "False" if the timeout period
      has elapsed.

   *multiprocessing.Lock.release:release()*

      Release a lock.  This can be called from any process or thread, not only the
      process or thread which originally acquired the lock.

      Behavior is the same as in |:library/threading.txt/threading.Lock.release:threading.Lock.release()| except that when invoked
      on an unlocked lock, a |:library/exceptions.txt/ValueError:ValueError| is raised.

*multiprocessing.RLock:class multiprocessing.RLock*

   A recursive lock object: a close analog of |:library/threading.txt/threading.RLock:threading.RLock|.  A recursive lock
   must be released by the process or thread that acquired it. Once a process or
   thread has acquired a recursive lock, the same process or thread may acquire it
   again without blocking; that process or thread must release it once for each
   time it has been acquired.

   Note that |:multiprocessing.RLock:RLock| is actually a factory function which returns an instance of "
   multiprocessing.synchronize.RLock" initialized with a default context.

   |:multiprocessing.RLock:RLock| supports the |:glossary.txt/term-context-manager:context manager| protocol and thus may be used in |:reference/compound_stmts.txt/with:with|
   statements.

   *multiprocessing.RLock.acquire:acquire(block=True, timeout=None)*

      Acquire a lock, blocking or non-blocking.

      When invoked with the *block* argument set to "True", block until the lock is in
      an unlocked state (not owned by any process or thread) unless the lock is
      already owned by the current process or thread.  The current process or thread
      then takes ownership of the lock (if it does not already have ownership) and the
      recursion level inside the lock increments by one, resulting in a return value
      of "True".  Note that there are several differences in this first argument’s
      behavior compared to the implementation of |:library/threading.txt/threading.RLock.acquire:threading.RLock.acquire()|, starting
      with the name of the argument itself.

      When invoked with the *block* argument set to "False", do not block. If the lock
      has already been acquired (and thus is owned) by another process or thread, the
      current process or thread does not take ownership and the recursion level within
      the lock is not changed, resulting in a return value of "False".  If the lock is
      in an unlocked state, the current process or thread takes ownership and the
      recursion level is incremented, resulting in a return value of "True".

      Use and behaviors of the *timeout* argument are the same as in |:multiprocessing.Lock.acquire:Lock.acquire()|.
      Note that some of these behaviors of *timeout* differ from the implemented
      behaviors in |:library/threading.txt/threading.RLock.acquire:threading.RLock.acquire()|.

   *multiprocessing.RLock.release:release()*

      Release a lock, decrementing the recursion level.  If after the decrement the
      recursion level is zero, reset the lock to unlocked (not owned by any process or
      thread) and if any other processes or threads are blocked waiting for the lock
      to become unlocked, allow exactly one of them to proceed.  If after the
      decrement the recursion level is still nonzero, the lock remains locked and
      owned by the calling process or thread.

      Only call this method when the calling process or thread owns the lock. An
      |:library/exceptions.txt/AssertionError:AssertionError| is raised if this method is called by a process or thread other
      than the owner or if the lock is in an unlocked (unowned) state.  Note that the
      type of exception raised in this situation differs from the implemented behavior
      in |:library/threading.txt/threading.RLock.release:threading.RLock.release()|.

*multiprocessing.Semaphore:class multiprocessing.Semaphore([value])*

   A semaphore object: a close analog of |:library/threading.txt/threading.Semaphore:threading.Semaphore|.

   A solitary difference from its close analog exists: its "acquire" method’s first
   argument is named *block*, as is consistent with |:multiprocessing.Lock.acquire:Lock.acquire()|.

Note:

  On Mac OS X, "sem_timedwait" is unsupported, so calling "acquire()" with a
  timeout will emulate that function’s behavior using a sleeping loop.

Note:

  If the SIGINT signal generated by "Ctrl-C" arrives while the main thread is
  blocked by a call to "BoundedSemaphore.acquire()", |:multiprocessing.Lock.acquire:Lock.acquire()|,
  |:multiprocessing.RLock.acquire:RLock.acquire()|, "Semaphore.acquire()", "Condition.acquire()" or "
  Condition.wait()" then the call will be immediately interrupted and
  |:library/exceptions.txt/KeyboardInterrupt:KeyboardInterrupt| will be raised.This differs from the behaviour of
  |:library/threading.txt/module-threading:threading| where SIGINT will be ignored while the equivalent blocking calls are
  in progress.

Note:

  Some of this package’s functionality requires a functioning shared semaphore
  implementation on the host operating system. Without one, the "
  multiprocessing.synchronize" module will be disabled, and attempts to import it
  will result in an |:library/exceptions.txt/ImportError:ImportError|. See |:bugs.python.org/issue3770:bpo-3770| for additional information.

## shared-ctypes-objects:Shared |:library/ctypes.txt/module-ctypes:ctypes| Objects

It is possible to create shared objects using shared memory which can be
inherited by child processes.

*multiprocessing.Value:multiprocessing.Value(typecode_or_type, *args, lock=True)*

   Return a |:library/ctypes.txt/module-ctypes:ctypes| object allocated from shared memory.  By default the return
   value is actually a synchronized wrapper for the object.  The object itself can
   be accessed via the *value* attribute of a |:multiprocessing.Value:Value|.

   *typecode_or_type* determines the type of the returned object: it is either a
   ctypes type or a one character typecode of the kind used by the |:library/array.txt/module-array:array| module.
   **args* is passed on to the constructor for the type.

   If *lock* is "True" (the default) then a new recursive lock object is created to
   synchronize access to the value.  If *lock* is a |:multiprocessing.Lock:Lock| or |:multiprocessing.RLock:RLock| object then
   that will be used to synchronize access to the value.  If *lock* is "False" then
   access to the returned object will not be automatically protected by a lock, so
   it will not necessarily be “process-safe”.

   Operations like "+=" which involve a read and write are not atomic.  So if, for
   instance, you want to atomically increment a shared value it is insufficient to
   just do

```rst
counter.value += 1
```

   Assuming the associated lock is recursive (which it is by default) you can
   instead do

```rst
with counter.get_lock():
    counter.value += 1
```

   Note that *lock* is a keyword-only argument.

*multiprocessing.Array:multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)*

   Return a ctypes array allocated from shared memory.  By default the return value
   is actually a synchronized wrapper for the array.

   *typecode_or_type* determines the type of the elements of the returned array: it
   is either a ctypes type or a one character typecode of the kind used by the
   |:library/array.txt/module-array:array| module.  If *size_or_initializer* is an integer, then it determines the
   length of the array, and the array will be initially zeroed. Otherwise, *
   size_or_initializer* is a sequence which is used to initialize the array and
   whose length determines the length of the array.

   If *lock* is "True" (the default) then a new lock object is created to
   synchronize access to the value.  If *lock* is a |:multiprocessing.Lock:Lock| or |:multiprocessing.RLock:RLock| object then
   that will be used to synchronize access to the value.  If *lock* is "False" then
   access to the returned object will not be automatically protected by a lock, so
   it will not necessarily be “process-safe”.

   Note that *lock* is a keyword only argument.

   Note that an array of |:library/ctypes.txt/ctypes.c_char:ctypes.c_char| has *value* and *raw* attributes which
   allow one to use it to store and retrieve strings.

### module-multiprocessing.sharedctypes:The |:module-multiprocessing.sharedctypes:multiprocessing.sharedctypes|
module

The |:module-multiprocessing.sharedctypes:multiprocessing.sharedctypes| module provides functions for allocating
|:library/ctypes.txt/module-ctypes:ctypes| objects from shared memory which can be inherited by child processes.

Note:

  Although it is possible to store a pointer in shared memory remember that this
  will refer to a location in the address space of a specific process. However,
  the pointer is quite likely to be invalid in the context of a second process and
  trying to dereference the pointer from the second process may cause a crash.

*multiprocessing.sharedctypes.RawArray:multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)*

   Return a ctypes array allocated from shared memory.

   *typecode_or_type* determines the type of the elements of the returned array: it
   is either a ctypes type or a one character typecode of the kind used by the
   |:library/array.txt/module-array:array| module.  If *size_or_initializer* is an integer then it determines the
   length of the array, and the array will be initially zeroed. Otherwise *
   size_or_initializer* is a sequence which is used to initialize the array and
   whose length determines the length of the array.

   Note that setting and getting an element is potentially non-atomic – use
   |:multiprocessing.sharedctypes.Array:Array()| instead to make sure that access is automatically synchronized using a
   lock.

*multiprocessing.sharedctypes.RawValue:multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)*

   Return a ctypes object allocated from shared memory.

   *typecode_or_type* determines the type of the returned object: it is either a
   ctypes type or a one character typecode of the kind used by the |:library/array.txt/module-array:array| module.
   **args* is passed on to the constructor for the type.

   Note that setting and getting the value is potentially non-atomic – use
   |:multiprocessing.sharedctypes.Value:Value()| instead to make sure that access is automatically synchronized using a
   lock.

   Note that an array of |:library/ctypes.txt/ctypes.c_char:ctypes.c_char| has "value" and "raw" attributes which
   allow one to use it to store and retrieve strings – see documentation for
   |:library/ctypes.txt/module-ctypes:ctypes|.

*multiprocessing.sharedctypes.Array:multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)*

   The same as |:multiprocessing.sharedctypes.RawArray:RawArray()| except that depending on the value of *lock* a process-
   safe synchronization wrapper may be returned instead of a raw ctypes array.

   If *lock* is "True" (the default) then a new lock object is created to
   synchronize access to the value.  If *lock* is a |:multiprocessing.Lock:Lock| or |:multiprocessing.RLock:RLock| object then
   that will be used to synchronize access to the value.  If *lock* is "False" then
   access to the returned object will not be automatically protected by a lock, so
   it will not necessarily be “process-safe”.

   Note that *lock* is a keyword-only argument.

*multiprocessing.sharedctypes.Value:multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)*

   The same as |:multiprocessing.sharedctypes.RawValue:RawValue()| except that depending on the value of *lock* a process-
   safe synchronization wrapper may be returned instead of a raw ctypes object.

   If *lock* is "True" (the default) then a new lock object is created to
   synchronize access to the value.  If *lock* is a |:multiprocessing.Lock:Lock| or |:multiprocessing.RLock:RLock| object then
   that will be used to synchronize access to the value.  If *lock* is "False" then
   access to the returned object will not be automatically protected by a lock, so
   it will not necessarily be “process-safe”.

   Note that *lock* is a keyword-only argument.

*multiprocessing.sharedctypes.copy:multiprocessing.sharedctypes.copy(obj)*

   Return a ctypes object allocated from shared memory which is a copy of the
   ctypes object *obj*.

*multiprocessing.sharedctypes.synchronized:multiprocessing.sharedctypes.synchronized(obj[, lock])*

   Return a process-safe wrapper object for a ctypes object which uses *lock* to
   synchronize access.  If *lock* is "None" (the default) then a
   |:multiprocessing.RLock:multiprocessing.RLock| object is created automatically.

   A synchronized wrapper will have two methods in addition to those of the object
   it wraps: "get_obj()" returns the wrapped object and "get_lock()" returns the
   lock object used for synchronization.

   Note that accessing the ctypes object through the wrapper can be a lot slower
   than accessing the raw ctypes object.

   Changed in version 3.5: Synchronized objects support the |:glossary.txt/term-context-manager:context manager|
   protocol.

The table below compares the syntax for creating shared ctypes objects from
shared memory with the normal ctypes syntax.  (In the table "MyStruct" is some
subclass of |:library/ctypes.txt/ctypes.Structure:ctypes.Structure|.)

+----------------------+----------------------------+-----------------------------+
| ctypes               | sharedctypes using type    | sharedctypes using typecode |
|======================|============================|=============================|
| c_double(2.4)        | RawValue(c_double, 2.4)    | RawValue(‘d’, 2.4)          |
+----------------------+----------------------------+-----------------------------+
| MyStruct(4, 6)       | RawValue(MyStruct, 4, 6)   |                             |
+----------------------+----------------------------+-----------------------------+
| (c_short * 7)()      | RawArray(c_short, 7)       | RawArray(‘h’, 7)            |
+----------------------+----------------------------+-----------------------------+
| (c_int * 3)(9, 2, 8) | RawArray(c_int, (9, 2, 8)) | RawArray(‘i’, (9, 2, 8))    |
+----------------------+----------------------------+-----------------------------+

Below is an example where a number of ctypes objects are modified by a child
process:

```rst
from multiprocessing import Process, Lock
from multiprocessing.sharedctypes import Value, Array
from ctypes import Structure, c_double

class Point(Structure):
    _fields_ = [('x', c_double), ('y', c_double)]

def modify(n, x, s, A):
    n.value **= 2
    x.value **= 2
    s.value = s.value.upper()
    for a in A:
        a.x **= 2
        a.y **= 2

if __name__ == '__main__':
    lock = Lock()

    n = Value('i', 7)
    x = Value(c_double, 1.0/3.0, lock=False)
    s = Array('c', b'hello world', lock=lock)
    A = Array(Point, [(1.875,-6.25), (-5.75,2.0), (2.375,9.5)], lock=lock)

    p = Process(target=modify, args=(n, x, s, A))
    p.start()
    p.join()

    print(n.value)
    print(x.value)
    print(s.value)
    print([(a.x, a.y) for a in A])
```

The results printed are

```rst
49
0.1111111111111111
HELLO WORLD
[(3.515625, 39.0625), (33.0625, 4.0), (5.640625, 90.25)]
```

*|multiprocessing-managers:⚓|* ## managers:Managers

Managers provide a way to create data which can be shared between different
processes, including sharing over a network between processes running on
different machines. A manager object controls a server process which manages *
shared objects*.  Other processes can access the shared objects by using
proxies.

*multiprocessing.sharedctypes.multiprocessing.Manager:multiprocessing.Manager()*

   Returns a started |:multiprocessing.managers.SyncManager:SyncManager| object which can be used for sharing objects
   between processes.  The returned manager object corresponds to a spawned child
   process and has methods which will create shared objects and return
   corresponding proxies.

*|module-multiprocessing.managers:⚓|*

Manager processes will be shutdown as soon as they are garbage collected or
their parent process exits.  The manager classes are defined in the
|:module-multiprocessing.managers:multiprocessing.managers| module:

*multiprocessing.managers.BaseManager:class multiprocessing.managers.BaseManager([address[, authkey]])*

   Create a BaseManager object.

   Once created one should call |:multiprocessing.managers.BaseManager.start:start()| or "get_server().serve_forever()" to
   ensure that the manager object refers to a started manager process.

   *address* is the address on which the manager process listens for new
   connections.  If *address* is "None" then an arbitrary one is chosen.

   *authkey* is the authentication key which will be used to check the validity of
   incoming connections to the server process.  If *authkey* is "None" then "
   current_process().authkey" is used. Otherwise *authkey* is used and it must be a
   byte string.

   *multiprocessing.managers.BaseManager.start:start([initializer[, initargs]])*

      Start a subprocess to start the manager.  If *initializer* is not "None" then
      the subprocess will call "initializer(*initargs)" when it starts.

   *multiprocessing.managers.BaseManager.get_server:get_server()*

      Returns a "Server" object which represents the actual server under the control
      of the Manager. The "Server" object supports the "serve_forever()" method:

```rst
>>> from multiprocessing.managers import BaseManager
>>> manager = BaseManager(address=('', 50000), authkey=b'abc')
>>> server = manager.get_server()
>>> server.serve_forever()
```

      "Server" additionally has an |:multiprocessing.managers.BaseManager.address:address| attribute.

   *multiprocessing.managers.BaseManager.connect:connect()*

      Connect a local manager object to a remote manager process:

```rst
>>> from multiprocessing.managers import BaseManager
>>> m = BaseManager(address=('127.0.0.1', 50000), authkey=b'abc')
>>> m.connect()
```

   *multiprocessing.managers.BaseManager.shutdown:shutdown()*

      Stop the process used by the manager.  This is only available if |:multiprocessing.managers.BaseManager.start:start()| has
      been used to start the server process.

      This can be called multiple times.

   *multiprocessing.managers.BaseManager.register:register(typeid[, callable[, proxytype[, exposed[, method_to_typeid[, create_method]]]]])*

      A classmethod which can be used for registering a type or callable with the
      manager class.

      *typeid* is a “type identifier” which is used to identify a particular type of
      shared object.  This must be a string.

      *callable* is a callable used for creating objects for this type identifier.  If
      a manager instance will be connected to the server using the |:multiprocessing.managers.BaseManager.connect:connect()| method,
      or if the *create_method* argument is "False" then this can be left as "None".

      *proxytype* is a subclass of |:multiprocessing.managers.BaseProxy:BaseProxy| which is used to create proxies for
      shared objects with this *typeid*.  If "None" then a proxy class is created
      automatically.

      *exposed* is used to specify a sequence of method names which proxies for this
      typeid should be allowed to access using |:multiprocessing.managers.BaseProxy._callmethod:BaseProxy._callmethod()|.  (If *
      exposed* is "None" then "proxytype._exposed_" is used instead if it exists.)  In
      the case where no exposed list is specified, all “public methods” of the shared
      object will be accessible.  (Here a “public method” means any attribute which
      has a |:reference/datamodel.txt/object.__call__:__call__()| method and whose name does not begin with "'_'".)

      *method_to_typeid* is a mapping used to specify the return type of those exposed
      methods which should return a proxy.  It maps method names to typeid strings.
      (If *method_to_typeid* is "None" then "proxytype._method_to_typeid_" is used
      instead if it exists.)  If a method’s name is not a key of this mapping or if
      the mapping is "None" then the object returned by the method will be copied by
      value.

      *create_method* determines whether a method should be created with name *typeid*
      which can be used to tell the server process to create a new shared object and
      return a proxy for it.  By default it is "True".

   |:multiprocessing.managers.BaseManager:BaseManager| instances also have one read-only property:

   *multiprocessing.managers.BaseManager.address:address*

      The address used by the manager.

   Changed in version 3.3: Manager objects support the context management protocol
   – see |:library/stdtypes.txt/typecontextmanager:Context Manager Types|.  |:library/stdtypes.txt/contextmanager.__enter__:__enter__()| starts the server process (if it
   has not already started) and then returns the manager object.  |:library/stdtypes.txt/contextmanager.__exit__:__exit__()|
   calls |:multiprocessing.managers.BaseManager.shutdown:shutdown()|.In previous versions |:library/stdtypes.txt/contextmanager.__enter__:__enter__()| did not start the
   manager’s server process if it was not already started.

*multiprocessing.managers.SyncManager:class multiprocessing.managers.SyncManager*

   A subclass of |:multiprocessing.managers.BaseManager:BaseManager| which can be used for the synchronization of
   processes.  Objects of this type are returned by "multiprocessing.Manager()".

   Its methods create and return |:multiprocessing-proxy-objects:Proxy Objects| for a number of commonly used data
   types to be synchronized across processes. This notably includes shared lists
   and dictionaries.

   *multiprocessing.managers.SyncManager.Barrier:Barrier(parties[, action[, timeout]])*

      Create a shared |:library/threading.txt/threading.Barrier:threading.Barrier| object and return a proxy for it.

      New in version 3.3.

   *multiprocessing.managers.SyncManager.BoundedSemaphore:BoundedSemaphore([value])*

      Create a shared |:library/threading.txt/threading.BoundedSemaphore:threading.BoundedSemaphore| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.Condition:Condition([lock])*

      Create a shared |:library/threading.txt/threading.Condition:threading.Condition| object and return a proxy for it.

      If *lock* is supplied then it should be a proxy for a |:library/threading.txt/threading.Lock:threading.Lock| or
      |:library/threading.txt/threading.RLock:threading.RLock| object.

      Changed in version 3.3: The |:library/threading.txt/threading.Condition.wait_for:wait_for()| method was added.

   *multiprocessing.managers.SyncManager.Event:Event()*

      Create a shared |:library/threading.txt/threading.Event:threading.Event| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.Lock:Lock()*

      Create a shared |:library/threading.txt/threading.Lock:threading.Lock| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.Namespace:Namespace()*

      Create a shared |:multiprocessing.managers.Namespace:Namespace| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.Queue:Queue([maxsize])*

      Create a shared |:library/queue.txt/queue.Queue:queue.Queue| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.RLock:RLock()*

      Create a shared |:library/threading.txt/threading.RLock:threading.RLock| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.Semaphore:Semaphore([value])*

      Create a shared |:library/threading.txt/threading.Semaphore:threading.Semaphore| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.Array:Array(typecode, sequence)*

      Create an array and return a proxy for it.

   *multiprocessing.managers.SyncManager.Value:Value(typecode, value)*

      Create an object with a writable "value" attribute and return a proxy for it.

   *multiprocessing.managers.SyncManager.dict:dict()*
   dict(mapping)
   dict(sequence)

      Create a shared |:library/stdtypes.txt/dict:dict| object and return a proxy for it.

   *multiprocessing.managers.SyncManager.list:list()*
   list(sequence)

      Create a shared |:library/stdtypes.txt/list:list| object and return a proxy for it.

   Changed in version 3.6: Shared objects are capable of being nested.  For
   example, a shared container object such as a shared list can contain other
   shared objects which will all be managed and synchronized by the |:multiprocessing.managers.SyncManager:SyncManager|.

*multiprocessing.managers.Namespace:class multiprocessing.managers.Namespace*

   A type that can register with |:multiprocessing.managers.SyncManager:SyncManager|.

   A namespace object has no public methods, but does have writable attributes. Its
   representation shows the values of its attributes.

   However, when using a proxy for a namespace object, an attribute beginning with
   "'_'" will be an attribute of the proxy and not an attribute of the referent:

```rst
>>> manager = multiprocessing.Manager()
>>> Global = manager.Namespace()
>>> Global.x = 10
>>> Global.y = 'hello'
>>> Global._z = 12.3    # this is an attribute of the proxy
>>> print(Global)
Namespace(x=10, y='hello')
```

### customized-managers:Customized managers

To create one’s own manager, one creates a subclass of |:multiprocessing.managers.BaseManager:BaseManager| and uses
the |:multiprocessing.managers.BaseManager.register:register()| classmethod to register new types or callables with the manager
class.  For example:

```rst
from multiprocessing.managers import BaseManager

class MathsClass:
    def add(self, x, y):
        return x + y
    def mul(self, x, y):
        return x * y

class MyManager(BaseManager):
    pass

MyManager.register('Maths', MathsClass)

if __name__ == '__main__':
    with MyManager() as manager:
        maths = manager.Maths()
        print(maths.add(4, 3))         # prints 7
        print(maths.mul(7, 8))         # prints 56
```

### using-a-remote-manager:Using a remote manager

It is possible to run a manager server on one machine and have clients use it
from other machines (assuming that the firewalls involved allow it).

Running the following commands creates a server for a single shared queue which
remote clients can access:

```rst
>>> from multiprocessing.managers import BaseManager
>>> from queue import Queue
>>> queue = Queue()
>>> class QueueManager(BaseManager): pass
>>> QueueManager.register('get_queue', callable=lambda:queue)
>>> m = QueueManager(address=('', 50000), authkey=b'abracadabra')
>>> s = m.get_server()
>>> s.serve_forever()
```

One client can access the server as follows:

```rst
>>> from multiprocessing.managers import BaseManager
>>> class QueueManager(BaseManager): pass
>>> QueueManager.register('get_queue')
>>> m = QueueManager(address=('foo.bar.org', 50000), authkey=b'abracadabra')
>>> m.connect()
>>> queue = m.get_queue()
>>> queue.put('hello')
```

Another client can also use it:

```rst
>>> from multiprocessing.managers import BaseManager
>>> class QueueManager(BaseManager): pass
>>> QueueManager.register('get_queue')
>>> m = QueueManager(address=('foo.bar.org', 50000), authkey=b'abracadabra')
>>> m.connect()
>>> queue = m.get_queue()
>>> queue.get()
'hello'
```

Local processes can also access that queue, using the code from above on the
client to access it remotely:

```rst
>>> from multiprocessing import Process, Queue
>>> from multiprocessing.managers import BaseManager
>>> class Worker(Process):
...     def __init__(self, q):
...         self.q = q
...         super(Worker, self).__init__()
...     def run(self):
...         self.q.put('local hello')
...
>>> queue = Queue()
>>> w = Worker(queue)
>>> w.start()
>>> class QueueManager(BaseManager): pass
...
>>> QueueManager.register('get_queue', callable=lambda: queue)
>>> m = QueueManager(address=('', 50000), authkey=b'abracadabra')
>>> s = m.get_server()
>>> s.serve_forever()
```

*|multiprocessing-proxy-objects:⚓|* ## proxy-objects:Proxy Objects

A proxy is an object which *refers* to a shared object which lives (presumably)
in a different process.  The shared object is said to be the *referent* of the
proxy.  Multiple proxy objects may have the same referent.

A proxy object has methods which invoke corresponding methods of its referent
(although not every method of the referent will necessarily be available through
the proxy).  In this way, a proxy can be used just like its referent can:

```rst
>>> from multiprocessing import Manager
>>> manager = Manager()
>>> l = manager.list([i*i for i in range(10)])
>>> print(l)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> print(repr(l))
<ListProxy object, typeid 'list' at 0x...>
>>> l[4]
16
>>> l[2:5]
[4, 9, 16]
```

Notice that applying |:library/stdtypes.txt/str:str()| to a proxy will return the representation of the
referent, whereas applying |:library/functions.txt/repr:repr()| will return the representation of the proxy.

An important feature of proxy objects is that they are picklable so they can be
passed between processes.  As such, a referent can contain |:multiprocessing-proxy-objects:Proxy Objects|.
This permits nesting of these managed lists, dicts, and other |:multiprocessing-proxy-objects:Proxy Objects|:

```rst
>>> a = manager.list()
>>> b = manager.list()
>>> a.append(b)         # referent of a now contains referent of b
>>> print(a, b)
[<ListProxy object, typeid 'list' at ...>] []
>>> b.append('hello')
>>> print(a[0], b)
['hello'] ['hello']
```

Similarly, dict and list proxies may be nested inside one another:

```rst
>>> l_outer = manager.list([ manager.dict() for i in range(2) ])
>>> d_first_inner = l_outer[0]
>>> d_first_inner['a'] = 1
>>> d_first_inner['b'] = 2
>>> l_outer[1]['c'] = 3
>>> l_outer[1]['z'] = 26
>>> print(l_outer[0])
{'a': 1, 'b': 2}
>>> print(l_outer[1])
{'c': 3, 'z': 26}
```

If standard (non-proxy) |:library/stdtypes.txt/list:list| or |:library/stdtypes.txt/dict:dict| objects are contained in a referent,
modifications to those mutable values will not be propagated through the manager
because the proxy has no way of knowing when the values contained within are
modified.  However, storing a value in a container proxy (which triggers a "
__setitem__" on the proxy object) does propagate through the manager and so to
effectively modify such an item, one could re-assign the modified value to the
container proxy:

```rst
# create a list proxy and append a mutable object (a dictionary)
lproxy = manager.list()
lproxy.append({})
# now mutate the dictionary
d = lproxy[0]
d['a'] = 1
d['b'] = 2
# at this point, the changes to d are not yet synced, but by
# updating the dictionary, the proxy is notified of the change
lproxy[0] = d
```

This approach is perhaps less convenient than employing nested |:multiprocessing-proxy-objects:Proxy Objects|
for most use cases but also demonstrates a level of control over the
synchronization.

Note:

  The proxy types in |:module-multiprocessing:multiprocessing| do nothing to support comparisons by value.
  So, for instance, we have:

```rst
>>> manager.list([1,2,3]) == [1,2,3]
False
```

  One should just use a copy of the referent instead when making comparisons.

*multiprocessing.managers.BaseProxy:class multiprocessing.managers.BaseProxy*

   Proxy objects are instances of subclasses of |:multiprocessing.managers.BaseProxy:BaseProxy|.

   *multiprocessing.managers.BaseProxy._callmethod:_callmethod(methodname[, args[, kwds]])*

      Call and return the result of a method of the proxy’s referent.

      If "proxy" is a proxy whose referent is "obj" then the expression

```rst
proxy._callmethod(methodname, args, kwds)
```

      will evaluate the expression

```rst
getattr(obj, methodname)(*args, **kwds)
```

      in the manager’s process.

      The returned value will be a copy of the result of the call or a proxy to a new
      shared object – see documentation for the *method_to_typeid* argument of
      |:multiprocessing.managers.BaseManager.register:BaseManager.register()|.

      If an exception is raised by the call, then is re-raised by |:multiprocessing.managers.BaseProxy._callmethod:_callmethod()|.  If
      some other exception is raised in the manager’s process then this is converted
      into a "RemoteError" exception and is raised by |:multiprocessing.managers.BaseProxy._callmethod:_callmethod()|.

      Note in particular that an exception will be raised if *methodname* has not been
      *exposed*.

      An example of the usage of |:multiprocessing.managers.BaseProxy._callmethod:_callmethod()|:

```rst
>>> l = manager.list(range(10))
>>> l._callmethod('__len__')
10
>>> l._callmethod('__getitem__', (slice(2, 7),)) # equivalent to l[2:7]
[2, 3, 4, 5, 6]
>>> l._callmethod('__getitem__', (20,))          # equivalent to l[20]
Traceback (most recent call last):
...
IndexError: list index out of range
```

   *multiprocessing.managers.BaseProxy._getvalue:_getvalue()*

      Return a copy of the referent.

      If the referent is unpicklable then this will raise an exception.

   *multiprocessing.managers.BaseProxy.__repr__:__repr__()*

      Return a representation of the proxy object.

   *multiprocessing.managers.BaseProxy.__str__:__str__()*

      Return the representation of the referent.

### cleanup:Cleanup

A proxy object uses a weakref callback so that when it gets garbage collected it
deregisters itself from the manager which owns its referent.

A shared object gets deleted from the manager process when there are no longer
any proxies referring to it.

## module-multiprocessing.pool:Process Pools

One can create a pool of processes which will carry out tasks submitted to it
with the |:multiprocessing.pool.Pool:Pool| class.

*multiprocessing.pool.Pool:class multiprocessing.pool.Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])*

   A process pool object which controls a pool of worker processes to which jobs
   can be submitted.  It supports asynchronous results with timeouts and callbacks
   and has a parallel map implementation.

   *processes* is the number of worker processes to use.  If *processes* is "None"
   then the number returned by |:library/os.txt/os.cpu_count:os.cpu_count()| is used.

   If *initializer* is not "None" then each worker process will call "
   initializer(*initargs)" when it starts.

   *maxtasksperchild* is the number of tasks a worker process can complete before
   it will exit and be replaced with a fresh worker process, to enable unused
   resources to be freed. The default *maxtasksperchild* is "None", which means
   worker processes will live as long as the pool.

   *context* can be used to specify the context used for starting the worker
   processes.  Usually a pool is created using the function "multiprocessing.Pool()
   " or the |:multiprocessing.pool.Pool:Pool()| method of a context object.  In both cases *context* is set
   appropriately.

   Note that the methods of the pool object should only be called by the process
   which created the pool.

   Warning:

     |:module-multiprocessing.pool:multiprocessing.pool| objects have internal resources that need to be properly
     managed (like any other resource) by using the pool as a context manager or by
     calling |:multiprocessing.pool.Pool.close:close()| and |:multiprocessing.pool.Pool.terminate:terminate()| manually. Failure to do this can lead to the
     process hanging on finalization.Note that is *not correct* to rely on the
     garbage colletor to destroy the pool as CPython does not assure that the
     finalizer of the pool will be called (see |:reference/datamodel.txt/object.__del__:object.__del__()| for more
     information).

   New in version 3.2: *maxtasksperchild*

   New in version 3.4: *context*

   Note:

     Worker processes within a |:multiprocessing.pool.Pool:Pool| typically live for the complete duration of the
     Pool’s work queue. A frequent pattern found in other systems (such as Apache,
     mod_wsgi, etc) to free resources held by workers is to allow a worker within a
     pool to complete only a set amount of work before being exiting, being cleaned
     up and a new process spawned to replace the old one. The *maxtasksperchild*
     argument to the |:multiprocessing.pool.Pool:Pool| exposes this ability to the end user.

   *multiprocessing.pool.Pool.apply:apply(func[, args[, kwds]])*

      Call *func* with arguments *args* and keyword arguments *kwds*.  It blocks until
      the result is ready. Given this blocks, |:multiprocessing.pool.Pool.apply_async:apply_async()| is better suited for
      performing work in parallel. Additionally, *func* is only executed in one of the
      workers of the pool.

   *multiprocessing.pool.Pool.apply_async:apply_async(func[, args[, kwds[, callback[, error_callback]]]])*

      A variant of the |:multiprocessing.pool.Pool.apply:apply()| method which returns a |:multiprocessing.pool.AsyncResult:AsyncResult| object.

      If *callback* is specified then it should be a callable which accepts a single
      argument.  When the result becomes ready *callback* is applied to it, that is
      unless the call failed, in which case the *error_callback* is applied instead.

      If *error_callback* is specified then it should be a callable which accepts a
      single argument.  If the target function fails, then the *error_callback* is
      called with the exception instance.

      Callbacks should complete immediately since otherwise the thread which handles
      the results will get blocked.

   *multiprocessing.pool.Pool.map:map(func, iterable[, chunksize])*

      A parallel equivalent of the |:library/functions.txt/map:map()| built-in function (it supports only one *
      iterable* argument though, for multiple iterables see |:multiprocessing.pool.Pool.starmap:starmap()|). It blocks
      until the result is ready.

      This method chops the iterable into a number of chunks which it submits to the
      process pool as separate tasks.  The (approximate) size of these chunks can be
      specified by setting *chunksize* to a positive integer.

      Note that it may cause high memory usage for very long iterables. Consider using
      |:multiprocessing.pool.Pool.imap:imap()| or |:multiprocessing.pool.Pool.imap_unordered:imap_unordered()| with explicit *chunksize* option for better
      efficiency.

   *multiprocessing.pool.Pool.map_async:map_async(func, iterable[, chunksize[, callback[, error_callback]]])*

      A variant of the |:multiprocessing.pool.Pool.map:map()| method which returns a |:multiprocessing.pool.AsyncResult:AsyncResult| object.

      If *callback* is specified then it should be a callable which accepts a single
      argument.  When the result becomes ready *callback* is applied to it, that is
      unless the call failed, in which case the *error_callback* is applied instead.

      If *error_callback* is specified then it should be a callable which accepts a
      single argument.  If the target function fails, then the *error_callback* is
      called with the exception instance.

      Callbacks should complete immediately since otherwise the thread which handles
      the results will get blocked.

   *multiprocessing.pool.Pool.imap:imap(func, iterable[, chunksize])*

      A lazier version of |:multiprocessing.pool.Pool.map:map()|.

      The *chunksize* argument is the same as the one used by the |:multiprocessing.pool.Pool.map:map()| method.  For
      very long iterables using a large value for *chunksize* can make the job
      complete *much* faster than using the default value of "1".

      Also if *chunksize* is "1" then the "next()" method of the iterator returned by
      the |:multiprocessing.pool.Pool.imap:imap()| method has an optional *timeout* parameter: "next(timeout)" will
      raise |:multiprocessing.TimeoutError:multiprocessing.TimeoutError| if the result cannot be returned within *
      timeout* seconds.

   *multiprocessing.pool.Pool.imap_unordered:imap_unordered(func, iterable[, chunksize])*

      The same as |:multiprocessing.pool.Pool.imap:imap()| except that the ordering of the results from the returned
      iterator should be considered arbitrary.  (Only when there is only one worker
      process is the order guaranteed to be “correct”.)

   *multiprocessing.pool.Pool.starmap:starmap(func, iterable[, chunksize])*

      Like |:library/functions.txt/map:map()| except that the elements of the *iterable* are expected to be
      iterables that are unpacked as arguments.

      Hence an *iterable* of "[(1,2), (3, 4)]" results in "[func(1,2), func(3,4)]".

      New in version 3.3.

   *multiprocessing.pool.Pool.starmap_async:starmap_async(func, iterable[, chunksize[, callback[, error_callback]]])*

      A combination of |:multiprocessing.pool.Pool.starmap:starmap()| and |:multiprocessing.pool.Pool.map_async:map_async()| that iterates over *iterable* of
      iterables and calls *func* with the iterables unpacked. Returns a result object.

      New in version 3.3.

   *multiprocessing.pool.Pool.close:close()*

      Prevents any more tasks from being submitted to the pool.  Once all the tasks
      have been completed the worker processes will exit.

   *multiprocessing.pool.Pool.terminate:terminate()*

      Stops the worker processes immediately without completing outstanding work.
      When the pool object is garbage collected |:multiprocessing.pool.Pool.terminate:terminate()| will be called
      immediately.

   *multiprocessing.pool.Pool.join:join()*

      Wait for the worker processes to exit.  One must call |:multiprocessing.pool.Pool.close:close()| or |:multiprocessing.pool.Pool.terminate:terminate()|
      before using |:multiprocessing.pool.Pool.join:join()|.

   New in version 3.3: Pool objects now support the context management protocol –
   see |:library/stdtypes.txt/typecontextmanager:Context Manager Types|.  |:library/stdtypes.txt/contextmanager.__enter__:__enter__()| returns the pool object, and
   |:library/stdtypes.txt/contextmanager.__exit__:__exit__()| calls |:multiprocessing.pool.Pool.terminate:terminate()|.

*multiprocessing.pool.AsyncResult:class multiprocessing.pool.AsyncResult*

   The class of the result returned by |:multiprocessing.pool.Pool.apply_async:Pool.apply_async()| and |:multiprocessing.pool.Pool.map_async:Pool.map_async()|.

   *multiprocessing.pool.AsyncResult.get:get([timeout])*

      Return the result when it arrives.  If *timeout* is not "None" and the result
      does not arrive within *timeout* seconds then |:multiprocessing.TimeoutError:multiprocessing.TimeoutError| is
      raised.  If the remote call raised an exception then that exception will be
      reraised by |:multiprocessing.pool.AsyncResult.get:get()|.

   *multiprocessing.pool.AsyncResult.wait:wait([timeout])*

      Wait until the result is available or until *timeout* seconds pass.

   *multiprocessing.pool.AsyncResult.ready:ready()*

      Return whether the call has completed.

   *multiprocessing.pool.AsyncResult.successful:successful()*

      Return whether the call completed without raising an exception.  Will raise
      |:library/exceptions.txt/ValueError:ValueError| if the result is not ready.

      Changed in version 3.7: If the result is not ready, |:library/exceptions.txt/ValueError:ValueError| is raised
      instead of |:library/exceptions.txt/AssertionError:AssertionError|.

The following example demonstrates the use of a pool:

```rst
from multiprocessing import Pool
import time

def f(x):
    return x*x

if __name__ == '__main__':
    with Pool(processes=4) as pool:         # start 4 worker processes
        result = pool.apply_async(f, (10,)) # evaluate "f(10)" asynchronously in a single process
        print(result.get(timeout=1))        # prints "100" unless your computer is *very* slow

        print(pool.map(f, range(10)))       # prints "[0, 1, 4,..., 81]"

        it = pool.imap(f, range(10))
        print(next(it))                     # prints "0"
        print(next(it))                     # prints "1"
        print(it.next(timeout=1))           # prints "4" unless your computer is *very* slow

        result = pool.apply_async(time.sleep, (10,))
        print(result.get(timeout=1))        # raises multiprocessing.TimeoutError
```

*|multiprocessing-listeners-clients:⚓|* ## module-multiprocessing.connection:
Listeners and Clients

Usually message passing between processes is done using queues or by using
|:multiprocessing.connection.Connection:Connection| objects returned by |:multiprocessing.Pipe:Pipe()|.

However, the |:module-multiprocessing.connection:multiprocessing.connection| module allows some extra flexibility.
It basically gives a high level message oriented API for dealing with sockets or
Windows named pipes.  It also has support for *digest authentication* using the
|:library/hmac.txt/module-hmac:hmac| module, and for polling multiple connections at the same time.

*multiprocessing.connection.deliver_challenge:multiprocessing.connection.deliver_challenge(connection, authkey)*

   Send a randomly generated message to the other end of the connection and wait
   for a reply.

   If the reply matches the digest of the message using *authkey* as the key then a
   welcome message is sent to the other end of the connection.  Otherwise
   |:multiprocessing.AuthenticationError:AuthenticationError| is raised.

*multiprocessing.connection.answer_challenge:multiprocessing.connection.answer_challenge(connection, authkey)*

   Receive a message, calculate the digest of the message using *authkey* as the
   key, and then send the digest back.

   If a welcome message is not received, then |:multiprocessing.AuthenticationError:AuthenticationError| is raised.

*multiprocessing.connection.Client:multiprocessing.connection.Client(address[, family[, authkey]])*

   Attempt to set up a connection to the listener which is using address *address*,
   returning a |:multiprocessing.connection.Connection:Connection|.

   The type of the connection is determined by *family* argument, but this can
   generally be omitted since it can usually be inferred from the format of *
   address*. (See |:multiprocessing-address-formats:Address Formats|)

   If *authkey* is given and not None, it should be a byte string and will be used
   as the secret key for an HMAC-based authentication challenge. No authentication
   is done if *authkey* is None. |:multiprocessing.AuthenticationError:AuthenticationError| is raised if authentication
   fails. See |:multiprocessing-auth-keys:Authentication keys|.

*multiprocessing.connection.Listener:class multiprocessing.connection.Listener([address[, family[, backlog[, authkey]]]])*

   A wrapper for a bound socket or Windows named pipe which is ‘listening’ for
   connections.

   *address* is the address to be used by the bound socket or named pipe of the
   listener object.

   Note:

     If an address of ‘0.0.0.0’ is used, the address will not be a connectable end
     point on Windows. If you require a connectable end-point, you should use
     ‘127.0.0.1’.

   *family* is the type of socket (or named pipe) to use.  This can be one of the
   strings "'AF_INET'" (for a TCP socket), "'AF_UNIX'" (for a Unix domain socket)
   or "'AF_PIPE'" (for a Windows named pipe).  Of these only the first is
   guaranteed to be available.  If *family* is "None" then the family is inferred
   from the format of *address*.  If *address* is also "None" then a default is
   chosen.  This default is the family which is assumed to be the fastest
   available.  See |:multiprocessing-address-formats:Address Formats|.  Note that if *family* is "'AF_UNIX'" and
   address is "None" then the socket will be created in a private temporary
   directory created using |:library/tempfile.txt/tempfile.mkstemp:tempfile.mkstemp()|.

   If the listener object uses a socket then *backlog* (1 by default) is passed to
   the |:library/socket.txt/socket.socket.listen:listen()| method of the socket once it has been bound.

   If *authkey* is given and not None, it should be a byte string and will be used
   as the secret key for an HMAC-based authentication challenge. No authentication
   is done if *authkey* is None. |:multiprocessing.AuthenticationError:AuthenticationError| is raised if authentication
   fails. See |:multiprocessing-auth-keys:Authentication keys|.

   *multiprocessing.connection.Listener.accept:accept()*

      Accept a connection on the bound socket or named pipe of the listener object and
      return a |:multiprocessing.connection.Connection:Connection| object. If authentication is attempted and fails, then
      |:multiprocessing.AuthenticationError:AuthenticationError| is raised.

   *multiprocessing.connection.Listener.close:close()*

      Close the bound socket or named pipe of the listener object.  This is called
      automatically when the listener is garbage collected.  However it is advisable
      to call it explicitly.

   Listener objects have the following read-only properties:

   *multiprocessing.connection.Listener.address:address*

      The address which is being used by the Listener object.

   *multiprocessing.connection.Listener.last_accepted:last_accepted*

      The address from which the last accepted connection came.  If this is
      unavailable then it is "None".

   New in version 3.3: Listener objects now support the context management protocol
   – see |:library/stdtypes.txt/typecontextmanager:Context Manager Types|.  |:library/stdtypes.txt/contextmanager.__enter__:__enter__()| returns the listener object, and
   |:library/stdtypes.txt/contextmanager.__exit__:__exit__()| calls |:multiprocessing.connection.Listener.close:close()|.

*multiprocessing.connection.wait:multiprocessing.connection.wait(object_list, timeout=None)*

   Wait till an object in *object_list* is ready.  Returns the list of those
   objects in *object_list* which are ready.  If *timeout* is a float then the call
   blocks for at most that many seconds.  If *timeout* is "None" then it will block
   for an unlimited period. A negative timeout is equivalent to a zero timeout.

   For both Unix and Windows, an object can appear in *object_list* if it is

   * a readable |:multiprocessing.connection.Connection:Connection| object;

   * a connected and readable |:library/socket.txt/socket.socket:socket.socket| object; or

   * the |:multiprocessing.Process.sentinel:sentinel| attribute of a |:multiprocessing.Process:Process| object.

   A connection or socket object is ready when there is data available to be read
   from it, or the other end has been closed.

   *Unix*: "wait(object_list, timeout)" almost equivalent "
   select.select(object_list, [], [], timeout)".  The difference is that, if
   |:library/select.txt/select.select:select.select()| is interrupted by a signal, it can raise |:library/exceptions.txt/OSError:OSError| with an
   error number of "EINTR", whereas |:multiprocessing.connection.wait:wait()| will not.

   *Windows*: An item in *object_list* must either be an integer handle which is
   waitable (according to the definition used by the documentation of the Win32
   function "WaitForMultipleObjects()") or it can be an object with a "fileno()"
   method which returns a socket handle or pipe handle.  (Note that pipe handles
   and socket handles are *not* waitable handles.)

   New in version 3.3.

*Examples*

The following server code creates a listener which uses "'secret password'" as
an authentication key.  It then waits for a connection and sends some data to
the client:

```rst
from multiprocessing.connection import Listener
from array import array

address = ('localhost', 6000)     # family is deduced to be 'AF_INET'

with Listener(address, authkey=b'secret password') as listener:
    with listener.accept() as conn:
        print('connection accepted from', listener.last_accepted)

        conn.send([2.25, None, 'junk', float])

        conn.send_bytes(b'hello')

        conn.send_bytes(array('i', [42, 1729]))
```

The following code connects to the server and receives some data from the
server:

```rst
from multiprocessing.connection import Client
from array import array

address = ('localhost', 6000)

with Client(address, authkey=b'secret password') as conn:
    print(conn.recv())                  # => [2.25, None, 'junk', float]

    print(conn.recv_bytes())            # => 'hello'

    arr = array('i', [0, 0, 0, 0, 0])
    print(conn.recv_bytes_into(arr))    # => 8
    print(arr)                          # => array('i', [42, 1729, 0, 0, 0])
```

The following code uses |:multiprocessing.connection.wait:wait()| to wait for messages from multiple processes at
once:

```rst
import time, random
from multiprocessing import Process, Pipe, current_process
from multiprocessing.connection import wait

def foo(w):
    for i in range(10):
        w.send((i, current_process().name))
    w.close()

if __name__ == '__main__':
    readers = []

    for i in range(4):
        r, w = Pipe(duplex=False)
        readers.append(r)
        p = Process(target=foo, args=(w,))
        p.start()
        # We close the writable end of the pipe now to be sure that
        # p is the only process which owns a handle for it.  This
        # ensures that when p closes its handle for the writable end,
        # wait() will promptly report the readable end as being ready.
        w.close()

    while readers:
        for r in wait(readers):
            try:
                msg = r.recv()
            except EOFError:
                readers.remove(r)
            else:
                print(msg)
```

### address-formats:Address Formats

* An "'AF_INET'" address is a tuple of the form "(hostname, port)" where *hostname
  * is a string and *port* is an integer.

* An "'AF_UNIX'" address is a string representing a filename on the filesystem.

* An "'AF_PIPE'" address is a string of the form "r'\.\pipe{PipeName}'".  To use
  |:multiprocessing.connection.Client:Client()| to connect to a named pipe on a remote computer called *ServerName*
  one should use an address of the form "r'\*ServerName*\pipe{PipeName}'" instead.

Note that any string beginning with two backslashes is assumed by default to be
an "'AF_PIPE'" address rather than an "'AF_UNIX'" address.

*|multiprocessing-auth-keys:⚓|* ## authentication-keys:Authentication keys

When one uses |:multiprocessing.connection.Connection.recv:Connection.recv|, the data received is automatically unpickled.
Unfortunately unpickling data from an untrusted source is a security risk.
Therefore |:multiprocessing.connection.Listener:Listener| and |:multiprocessing.connection.Client:Client()| use the |:library/hmac.txt/module-hmac:hmac| module to provide digest
authentication.

An authentication key is a byte string which can be thought of as a password:
once a connection is established both ends will demand proof that the other
knows the authentication key.  (Demonstrating that both ends are using the same
key does *not* involve sending the key over the connection.)

If authentication is requested but no authentication key is specified then the
return value of "current_process().authkey" is used (see |:multiprocessing.Process:Process|).  This value
will be automatically inherited by any |:multiprocessing.Process:Process| object that the current process
creates. This means that (by default) all processes of a multi-process program
will share a single authentication key which can be used when setting up
connections between themselves.

Suitable authentication keys can also be generated by using |:library/os.txt/os.urandom:os.urandom()|.

## logging:Logging

Some support for logging is available.  Note, however, that the |:library/logging.txt/module-logging:logging|
package does not use process shared locks so it is possible (depending on the
handler type) for messages from different processes to get mixed up.

*multiprocessing.get_logger:multiprocessing.get_logger()*

   Returns the logger used by |:module-multiprocessing:multiprocessing|.  If necessary, a new one will be
   created.

   When first created the logger has level "logging.NOTSET" and no default handler.
   Messages sent to this logger will not by default propagate to the root logger.

   Note that on Windows child processes will only inherit the level of the parent
   process’s logger – any other customization of the logger will not be inherited.

*multiprocessing.log_to_stderr:multiprocessing.log_to_stderr()*

   This function performs a call to |:multiprocessing.get_logger:get_logger()| but in addition to returning the
   logger created by get_logger, it adds a handler which sends output to
   |:library/sys.txt/sys.stderr:sys.stderr| using format "'[%(levelname)s/%(processName)s] %(message)s'".

Below is an example session with logging turned on:

```rst
>>> import multiprocessing, logging
>>> logger = multiprocessing.log_to_stderr()
>>> logger.setLevel(logging.INFO)
>>> logger.warning('doomed')
[WARNING/MainProcess] doomed
>>> m = multiprocessing.Manager()
[INFO/SyncManager-...] child process calling self.run()
[INFO/SyncManager-...] created temp directory /.../pymp-...
[INFO/SyncManager-...] manager serving at '/.../listener-...'
>>> del m
[INFO/MainProcess] sending shutdown message to manager
[INFO/SyncManager-...] manager exiting with exitcode 0
```

For a full table of logging levels, see the |:library/logging.txt/module-logging:logging| module.

## module-multiprocessing.dummy:The |:module-multiprocessing.dummy:multiprocessing.dummy| module

|:module-multiprocessing.dummy:multiprocessing.dummy| replicates the API of |:module-multiprocessing:multiprocessing| but is no more
than a wrapper around the |:library/threading.txt/module-threading:threading| module.

In particular, the "Pool" function provided by |:module-multiprocessing.dummy:multiprocessing.dummy| returns
an instance of |:multiprocessing.pool.ThreadPool:ThreadPool|, which is a subclass of |:multiprocessing.pool.Pool:Pool| that supports all the
same method calls but uses a pool of worker threads rather than worker
processes.

*multiprocessing.pool.ThreadPool:class multiprocessing.pool.ThreadPool([processes[, initializer[, initargs]]])*

   A thread pool object which controls a pool of worker threads to which jobs can
   be submitted.  |:multiprocessing.pool.ThreadPool:ThreadPool| instances are fully interface compatible with |:multiprocessing.pool.Pool:Pool|
   instances, and their resources must also be properly managed, either by using
   the pool as a context manager or by calling |:multiprocessing.pool.Pool.close:close()| and |:multiprocessing.pool.Pool.terminate:terminate()|
   manually.

   *processes* is the number of worker threads to use.  If *processes* is "None"
   then the number returned by |:library/os.txt/os.cpu_count:os.cpu_count()| is used.

   If *initializer* is not "None" then each worker process will call "
   initializer(*initargs)" when it starts.

   Unlike |:multiprocessing.pool.Pool:Pool|, *maxtasksperchild* and *context* cannot be provided.

      Note:

        A |:multiprocessing.pool.ThreadPool:ThreadPool| shares the same interface as |:multiprocessing.pool.Pool:Pool|, which is designed around a
        pool of processes and predates the introduction of the |:library/concurrent.futures.txt/module-concurrent.futures:concurrent.futures|
        module.  As such, it inherits some operations that don’t make sense for a pool
        backed by threads, and it has its own type for representing the status of
        asynchronous jobs, |:multiprocessing.pool.AsyncResult:AsyncResult|, that is not understood by any other libraries.
        Users should generally prefer to use |:library/concurrent.futures.txt/concurrent.futures.ThreadPoolExecutor:concurrent.futures.ThreadPoolExecutor|,
        which has a simpler interface that was designed around threads from the start,
        and which returns |:library/concurrent.futures.txt/concurrent.futures.Future:concurrent.futures.Future| instances that are compatible with
        many other libraries, including |:library/asyncio.txt/module-asyncio:asyncio|.

*|multiprocessing-programming:⚓|* # programming-guidelines:Programming
guidelines

There are certain guidelines and idioms which should be adhered to when using
|:module-multiprocessing:multiprocessing|.

## all-start-methods:All start methods

The following applies to all start methods.

Avoid shared state

   As far as possible one should try to avoid shifting large amounts of data
   between processes.

   It is probably best to stick to using queues or pipes for communication between
   processes rather than using the lower level synchronization primitives.

Picklability

   Ensure that the arguments to the methods of proxies are picklable.

Thread safety of proxies

   Do not use a proxy object from more than one thread unless you protect it with a
   lock.

   (There is never a problem with different processes using the *same* proxy.)

Joining zombie processes

   On Unix when a process finishes but has not been joined it becomes a zombie.
   There should never be very many because each time a new process starts (or
   |:multiprocessing.active_children:active_children()| is called) all completed processes which have not yet been
   joined will be joined.  Also calling a finished process’s |:multiprocessing.Process.is_alive:Process.is_alive|
   will join the process.  Even so it is probably good practice to explicitly join
   all the processes that you start.

Better to inherit than pickle/unpickle

   When using the *spawn* or *forkserver* start methods many types from
   |:module-multiprocessing:multiprocessing| need to be picklable so that child processes can use them.
   However, one should generally avoid sending shared objects to other processes
   using pipes or queues. Instead you should arrange the program so that a process
   which needs access to a shared resource created elsewhere can inherit it from an
   ancestor process.

Avoid terminating processes

   Using the |:multiprocessing.Process.terminate:Process.terminate| method to stop a process is liable to cause any
   shared resources (such as locks, semaphores, pipes and queues) currently being
   used by the process to become broken or unavailable to other processes.

   Therefore it is probably best to only consider using |:multiprocessing.Process.terminate:Process.terminate| on
   processes which never use any shared resources.

Joining processes that use queues

   Bear in mind that a process that has put items in a queue will wait before
   terminating until all the buffered items are fed by the “feeder” thread to the
   underlying pipe.  (The child process can call the |:multiprocessing.Queue.cancel_join_thread:Queue.cancel_join_thread|
   method of the queue to avoid this behaviour.)

   This means that whenever you use a queue you need to make sure that all items
   which have been put on the queue will eventually be removed before the process
   is joined.  Otherwise you cannot be sure that processes which have put items on
   the queue will terminate.  Remember also that non-daemonic processes will be
   joined automatically.

   An example which will deadlock is the following:

```rst
from multiprocessing import Process, Queue

def f(q):
    q.put('X' * 1000000)

if __name__ == '__main__':
    queue = Queue()
    p = Process(target=f, args=(queue,))
    p.start()
    p.join()                    # this deadlocks
    obj = queue.get()
```

   A fix here would be to swap the last two lines (or simply remove the "p.join()"
   line).

Explicitly pass resources to child processes

   On Unix using the *fork* start method, a child process can make use of a shared
   resource created in a parent process using a global resource.  However, it is
   better to pass the object as an argument to the constructor for the child
   process.

   Apart from making the code (potentially) compatible with Windows and the other
   start methods this also ensures that as long as the child process is still alive
   the object will not be garbage collected in the parent process.  This might be
   important if some resource is freed when the object is garbage collected in the
   parent process.

   So for instance

```rst
from multiprocessing import Process, Lock

def f():
    ... do something using "lock" ...

if __name__ == '__main__':
    lock = Lock()
    for i in range(10):
        Process(target=f).start()
```

   should be rewritten as

```rst
from multiprocessing import Process, Lock

def f(l):
    ... do something using "l" ...

if __name__ == '__main__':
    lock = Lock()
    for i in range(10):
        Process(target=f, args=(lock,)).start()
```

Beware of replacing |:library/sys.txt/sys.stdin:sys.stdin| with a “file like object”

   |:module-multiprocessing:multiprocessing| originally unconditionally called:

```rst
os.close(sys.stdin.fileno())
```

   in the "multiprocessing.Process._bootstrap()" method — this resulted in issues
   with processes-in-processes. This has been changed to:

```rst
sys.stdin.close()
sys.stdin = open(os.open(os.devnull, os.O_RDONLY), closefd=False)
```

   Which solves the fundamental issue of processes colliding with each other
   resulting in a bad file descriptor error, but introduces a potential danger to
   applications which replace |:library/sys.txt/sys.stdin:sys.stdin()| with a “file-like object” with output
   buffering.  This danger is that if multiple processes call |:library/io.txt/io.IOBase.close:close()| on this
   file-like object, it could result in the same data being flushed to the object
   multiple times, resulting in corruption.

   If you write a file-like object and implement your own caching, you can make it
   fork-safe by storing the pid whenever you append to the cache, and discarding
   the cache when the pid changes. For example:

```rst
@property
def cache(self):
    pid = os.getpid()
    if pid != self._pid:
        self._pid = pid
        self._cache = []
    return self._cache
```

   For more information, see |:bugs.python.org/issue5155:bpo-5155|, |:bugs.python.org/issue5313:bpo-5313| and |:bugs.python.org/issue5331:bpo-5331|

## the-spawn-and-forkserver-start-methods:The *spawn* and *forkserver* start
methods

There are a few extra restriction which don’t apply to the *fork* start method.

More picklability

   Ensure that all arguments to "Process.__init__()" are picklable. Also, if you
   subclass |:multiprocessing.Process:Process| then make sure that instances will be picklable when the
   |:multiprocessing.Process.start:Process.start| method is called.

Global variables

   Bear in mind that if code run in a child process tries to access a global
   variable, then the value it sees (if any) may not be the same as the value in
   the parent process at the time that |:multiprocessing.Process.start:Process.start| was called.

   However, global variables which are just module level constants cause no
   problems.

Safe importing of main module

   Make sure that the main module can be safely imported by a new Python
   interpreter without causing unintended side effects (such a starting a new
   process).

   For example, using the *spawn* or *forkserver* start method running the
   following module would fail with a |:library/exceptions.txt/RuntimeError:RuntimeError|:

```rst
from multiprocessing import Process

def foo():
    print('hello')

p = Process(target=foo)
p.start()
```

   Instead one should protect the “entry point” of the program by using "if
   __name__ == '__main__':" as follows:

```rst
from multiprocessing import Process, freeze_support, set_start_method

def foo():
    print('hello')

if __name__ == '__main__':
    freeze_support()
    set_start_method('spawn')
    p = Process(target=foo)
    p.start()
```

   (The "freeze_support()" line can be omitted if the program will be run normally
   instead of frozen.)

   This allows the newly spawned Python interpreter to safely import the module and
   then run the module’s "foo()" function.

   Similar restrictions apply if a pool or manager is created in the main module.

*|multiprocessing-examples:⚓|* # examples:Examples

Demonstration of how to create and use customized managers and proxies:

```rst
from multiprocessing import freeze_support
from multiprocessing.managers import BaseManager, BaseProxy
import operator

##

class Foo:
    def f(self):
        print('you called Foo.f()')
    def g(self):
        print('you called Foo.g()')
    def _h(self):
        print('you called Foo._h()')

# A simple generator function
def baz():
    for i in range(10):
        yield i*i

# Proxy type for generator objects
class GeneratorProxy(BaseProxy):
    _exposed_ = ['__next__']
    def __iter__(self):
        return self
    def __next__(self):
        return self._callmethod('__next__')

# Function to return the operator module
def get_operator_module():
    return operator

##

class MyManager(BaseManager):
    pass

# register the Foo class; make `f()` and `g()` accessible via proxy
MyManager.register('Foo1', Foo)

# register the Foo class; make `g()` and `_h()` accessible via proxy
MyManager.register('Foo2', Foo, exposed=('g', '_h'))

# register the generator function baz; use `GeneratorProxy` to make proxies
MyManager.register('baz', baz, proxytype=GeneratorProxy)

# register get_operator_module(); make public functions accessible via proxy
MyManager.register('operator', get_operator_module)

##

def test():
    manager = MyManager()
    manager.start()

    print('-' * 20)

    f1 = manager.Foo1()
    f1.f()
    f1.g()
    assert not hasattr(f1, '_h')
    assert sorted(f1._exposed_) == sorted(['f', 'g'])

    print('-' * 20)

    f2 = manager.Foo2()
    f2.g()
    f2._h()
    assert not hasattr(f2, 'f')
    assert sorted(f2._exposed_) == sorted(['g', '_h'])

    print('-' * 20)

    it = manager.baz()
    for i in it:
        print('<%d>' % i, end=' ')
    print()

    print('-' * 20)

    op = manager.operator()
    print('op.add(23, 45) =', op.add(23, 45))
    print('op.pow(2, 94) =', op.pow(2, 94))
    print('op._exposed_ =', op._exposed_)

##

if __name__ == '__main__':
    freeze_support()
    test()

```

Using |:multiprocessing.pool.Pool:Pool|:

```rst
import multiprocessing
import time
import random
import sys

#
# Functions used by test code
#

def calculate(func, args):
    result = func(*args)
    return '%s says that %s%s = %s' % (
        multiprocessing.current_process().name,
        func.__name__, args, result
        )

def calculatestar(args):
    return calculate(*args)

def mul(a, b):
    time.sleep(0.5 * random.random())
    return a * b

def plus(a, b):
    time.sleep(0.5 * random.random())
    return a + b

def f(x):
    return 1.0 / (x - 5.0)

def pow3(x):
    return x ** 3

def noop(x):
    pass

#
# Test code
#

def test():
    PROCESSES = 4
    print('Creating pool with %d processes\n' % PROCESSES)

    with multiprocessing.Pool(PROCESSES) as pool:
        #
        # Tests
        #

        TASKS = [(mul, (i, 7)) for i in range(10)] + \
                [(plus, (i, 8)) for i in range(10)]

        results = [pool.apply_async(calculate, t) for t in TASKS]
        imap_it = pool.imap(calculatestar, TASKS)
        imap_unordered_it = pool.imap_unordered(calculatestar, TASKS)

        print('Ordered results using pool.apply_async():')
        for r in results:
            print('\t', r.get())
        print()

        print('Ordered results using pool.imap():')
        for x in imap_it:
            print('\t', x)
        print()

        print('Unordered results using pool.imap_unordered():')
        for x in imap_unordered_it:
            print('\t', x)
        print()

        print('Ordered results using pool.map() --- will block till complete:')
        for x in pool.map(calculatestar, TASKS):
            print('\t', x)
        print()

        #
        # Test error handling
        #

        print('Testing error handling:')

        try:
            print(pool.apply(f, (5,)))
        except ZeroDivisionError:
            print('\tGot ZeroDivisionError as expected from pool.apply()')
        else:
            raise AssertionError('expected ZeroDivisionError')

        try:
            print(pool.map(f, list(range(10))))
        except ZeroDivisionError:
            print('\tGot ZeroDivisionError as expected from pool.map()')
        else:
            raise AssertionError('expected ZeroDivisionError')

        try:
            print(list(pool.imap(f, list(range(10)))))
        except ZeroDivisionError:
            print('\tGot ZeroDivisionError as expected from list(pool.imap())')
        else:
            raise AssertionError('expected ZeroDivisionError')

        it = pool.imap(f, list(range(10)))
        for i in range(10):
            try:
                x = next(it)
            except ZeroDivisionError:
                if i == 5:
                    pass
            except StopIteration:
                break
            else:
                if i == 5:
                    raise AssertionError('expected ZeroDivisionError')

        assert i == 9
        print('\tGot ZeroDivisionError as expected from IMapIterator.next()')
        print()

        #
        # Testing timeouts
        #

        print('Testing ApplyResult.get() with timeout:', end=' ')
        res = pool.apply_async(calculate, TASKS[0])
        while 1:
            sys.stdout.flush()
            try:
                sys.stdout.write('\n\t%s' % res.get(0.02))
                break
            except multiprocessing.TimeoutError:
                sys.stdout.write('.')
        print()
        print()

        print('Testing IMapIterator.next() with timeout:', end=' ')
        it = pool.imap(calculatestar, TASKS)
        while 1:
            sys.stdout.flush()
            try:
                sys.stdout.write('\n\t%s' % it.next(0.02))
            except StopIteration:
                break
            except multiprocessing.TimeoutError:
                sys.stdout.write('.')
        print()
        print()


if __name__ == '__main__':
    multiprocessing.freeze_support()
    test()

```

An example showing how to use queues to feed tasks to a collection of worker
processes and collect the results:

```rst
import time
import random

from multiprocessing import Process, Queue, current_process, freeze_support

#
# Function run by worker processes
#

def worker(input, output):
    for func, args in iter(input.get, 'STOP'):
        result = calculate(func, args)
        output.put(result)

#
# Function used to calculate result
#

def calculate(func, args):
    result = func(*args)
    return '%s says that %s%s = %s' % \
        (current_process().name, func.__name__, args, result)

#
# Functions referenced by tasks
#

def mul(a, b):
    time.sleep(0.5*random.random())
    return a * b

def plus(a, b):
    time.sleep(0.5*random.random())
    return a + b

#
#
#

def test():
    NUMBER_OF_PROCESSES = 4
    TASKS1 = [(mul, (i, 7)) for i in range(20)]
    TASKS2 = [(plus, (i, 8)) for i in range(10)]

    # Create queues
    task_queue = Queue()
    done_queue = Queue()

    # Submit tasks
    for task in TASKS1:
        task_queue.put(task)

    # Start worker processes
    for i in range(NUMBER_OF_PROCESSES):
        Process(target=worker, args=(task_queue, done_queue)).start()

    # Get and print results
    print('Unordered results:')
    for i in range(len(TASKS1)):
        print('\t', done_queue.get())

    # Add more tasks using `put()`
    for task in TASKS2:
        task_queue.put(task)

    # Get and print some more results
    for i in range(len(TASKS2)):
        print('\t', done_queue.get())

    # Tell child processes to stop
    for i in range(NUMBER_OF_PROCESSES):
        task_queue.put('STOP')


if __name__ == '__main__':
    freeze_support()
    test()

```



