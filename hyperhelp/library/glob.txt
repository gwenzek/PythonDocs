%hyperhelp title="glob" date="2021-07-11"
*|module-glob:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/glob.py:Lib/glob.py|

*|index-0:⚓|*

======================================================================

*|index-1:⚓|*

The |:module-glob:glob| module finds all the pathnames matching a specified pattern according
to the rules used by the Unix shell, although results are returned in arbitrary
order.  No tilde expansion is done, but "*", "?", and character ranges expressed
with "[]" will be correctly matched.  This is done by using the |:library/os.txt/os.scandir:os.scandir()|
and |:library/fnmatch.txt/fnmatch.fnmatch:fnmatch.fnmatch()| functions in concert, and not by actually invoking a
subshell.  Note that unlike |:library/fnmatch.txt/fnmatch.fnmatch:fnmatch.fnmatch()|, |:module-glob:glob| treats filenames
beginning with a dot (".") as special cases. (For tilde and shell variable
expansion, use |:library/os.path.txt/os.path.expanduser:os.path.expanduser()| and |:library/os.path.txt/os.path.expandvars:os.path.expandvars()|.)

For a literal match, wrap the meta-characters in brackets. For example, "'[?]'"
matches the character "'?'".

See also:

  The |:library/pathlib.txt/module-pathlib:pathlib| module offers high-level path objects.

*glob.glob:glob.glob(pathname, *, recursive=False)*

   Return a possibly-empty list of path names that match *pathname*, which must be
   a string containing a path specification. *pathname* can be either absolute
   (like "/usr/src/Python-1.5/Makefile") or relative (like "../../Tools/*/*.gif"),
   and can contain shell-style wildcards. Broken symlinks are included in the
   results (as in the shell). Whether or not the results are sorted depends on the
   file system.  If a file that satisfies conditions is removed or added during the
   call of this function, whether a path name for that file be included is
   unspecified.

   *|index-2:⚓|*

   If *recursive* is true, the pattern “"**"” will match any files and zero or more
   directories, subdirectories and symbolic links to directories. If the pattern is
   followed by an |:library/os.txt/os.sep:os.sep| or |:library/os.txt/os.altsep:os.altsep| then files will not match.

   Raises an |:library/sys.txt/auditing:auditing event| "glob.glob" with arguments "pathname", "recursive".

   Note:

     Using the “"**"” pattern in large directory trees may consume an inordinate
     amount of time.

   Changed in version 3.5: Support for recursive globs using “"**"”.

*glob.iglob:glob.iglob(pathname, *, recursive=False)*

   Return an |:glossary.txt/term-iterator:iterator| which yields the same values as |:module-glob:glob()| without actually
   storing them all simultaneously.

   Raises an |:library/sys.txt/auditing:auditing event| "glob.glob" with arguments "pathname", "recursive".

*glob.escape:glob.escape(pathname)*

   Escape all special characters ("'?'", "'*'" and "'['"). This is useful if you
   want to match an arbitrary literal string that may have special characters in
   it.  Special characters in drive/UNC sharepoints are not escaped, e.g. on
   Windows "escape('//?/c:/Quo vadis?.txt')" returns "'//?/c:/Quo vadis[?].txt'".

   New in version 3.4.

For example, consider a directory containing the following files: "1.gif", "
2.txt", "card.gif" and a subdirectory "sub" which contains only the file "3.txt"
.  |:module-glob:glob()| will produce the following results.  Notice how any leading
components of the path are preserved.

```rst
>>> import glob
>>> glob.glob('./[0-9].*')
['./1.gif', './2.txt']
>>> glob.glob('*.gif')
['1.gif', 'card.gif']
>>> glob.glob('?.gif')
['1.gif']
>>> glob.glob('**/*.txt', recursive=True)
['2.txt', 'sub/3.txt']
>>> glob.glob('./**/', recursive=True)
['./', './sub/']
```

If the directory contains files starting with "." they won’t be matched by
default. For example, consider a directory containing "card.gif" and ".card.gif"
:

```rst
>>> import glob
>>> glob.glob('*.gif')
['card.gif']
>>> glob.glob('.c*')
['.card.gif']
```

See also:

  Module |:library/fnmatch.txt/module-fnmatch:fnmatch|
     Shell-style filename (not path) expansion



