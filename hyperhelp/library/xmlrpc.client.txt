%hyperhelp title="xmlrpc.client" date="2021-07-11"
*|module-xmlrpc.client:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/xmlrpc/client.py:Lib/xmlrpc/client.py|

======================================================================

XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) as a
transport.  With it, a client can call methods with parameters on a remote
server (the server is named by a URI) and get back structured data.  This module
supports writing XML-RPC client code; it handles all the details of translating
between conformable Python objects and XML on the wire.

Warning:

  The |:module-xmlrpc.client:xmlrpc.client| module is not secure against maliciously constructed data.
  If you need to parse untrusted or unauthenticated data see |:library/xml.txt/xml-vulnerabilities:XML vulnerabilities|
  .

Changed in version 3.5: For HTTPS URIs, |:module-xmlrpc.client:xmlrpc.client| now performs all the
necessary certificate and hostname checks by default.

*xmlrpc.client.ServerProxy:class xmlrpc.client.ServerProxy(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, headers=(), context=None)*

   A |:xmlrpc.client.ServerProxy:ServerProxy| instance is an object that manages communication with a remote
   XML-RPC server.  The required first argument is a URI (Uniform Resource
   Indicator), and will normally be the URL of the server.  The optional second
   argument is a transport factory instance; by default it is an internal "
   SafeTransport" instance for https: URLs and an internal HTTP "Transport"
   instance otherwise.  The optional third argument is an encoding, by default
   UTF-8. The optional fourth argument is a debugging flag.

   The following parameters govern the use of the returned proxy instance. If *
   allow_none* is true,  the Python constant "None" will be translated into XML;
   the default behaviour is for "None" to raise a |:library/exceptions.txt/TypeError:TypeError|. This is a commonly-
   used extension to the XML-RPC specification, but isn’t supported by all clients
   and servers; see |:ontosys.com/xml-rpc/extensions.php:http://ontosys.com/xml-rpc/extensions.php|*|http-ontosys-com-
   xml-rpc-extensions-php:⚓|*  for a description. The *use_builtin_types* flag can
   be used to cause date/time values to be presented as |:library/datetime.txt/datetime.datetime:datetime.datetime| objects
   and binary data to be presented as |:library/stdtypes.txt/bytes:bytes| objects; this flag is false by
   default. |:library/datetime.txt/datetime.datetime:datetime.datetime|, |:library/stdtypes.txt/bytes:bytes| and |:library/stdtypes.txt/bytearray:bytearray| objects may be passed to
   calls. The *headers* parameter is an optional sequence of HTTP headers to send
   with each request, expressed as a sequence of 2-tuples representing the header
   name and value. (e.g. *[(‘Header-Name’, ‘value’)]*). The obsolete *use_datetime*
   flag is similar to *use_builtin_types* but it applies only to date/time values.

Changed in version 3.3: The *use_builtin_types* flag was added.

Changed in version 3.8: The *headers* parameter was added.Both the HTTP and
HTTPS transports support the URL syntax extension for HTTP Basic Authentication:
"http://user:pass@host:port/path".  The  "user:pass" portion will be
base64-encoded as an HTTP ‘Authorization’ header, and sent to the remote server
as part of the connection process when invoking an XML-RPC method.  You only
need to use this if the remote server requires a Basic Authentication user and
password. If an HTTPS URL is provided, *context* may be |:library/ssl.txt/ssl.SSLContext:ssl.SSLContext| and
configures the SSL settings of the underlying HTTPS connection.The returned
instance is a proxy object with methods that can be used to invoke corresponding
RPC calls on the remote server.  If the remote server supports the introspection
API, the proxy can also be used to query the remote server for the methods it
supports (service discovery) and fetch other server-associated metadata.Types
that are conformable (e.g. that can be marshalled through XML), include the
following (and except where noted, they are unmarshalled as the same Python
type):

+------------------------+---------------------------------------------------------+
| XML-RPC type           | Python type                                             |
|========================|=========================================================|
| "boolean"              | |:library/functions.txt/bool:bool|                      |
+------------------------+---------------------------------------------------------+
| "int", "i1", "i2",     | |:library/functions.txt/int:int| in range from          |
| "i4", "i8" or          | -2147483648 to 2147483647. Values get the "<int>" tag.  |
| "biginteger"           |                                                         |
+------------------------+---------------------------------------------------------+
| "double" or "float"    | |:library/functions.txt/float:float|.  Values get the   |
|                        | "<double>" tag.                                         |
+------------------------+---------------------------------------------------------+
| "string"               | |:library/stdtypes.txt/str:str|                         |
+------------------------+---------------------------------------------------------+
| "array"                | |:library/stdtypes.txt/list:list| or                    |
|                        | |:library/stdtypes.txt/tuple:tuple| containing          |
|                        | conformable elements.  Arrays are returned as           |
|                        | |:library/stdtypes.txt/list:lists|.                     |
+------------------------+---------------------------------------------------------+
| "struct"               | |:library/stdtypes.txt/dict:dict|.  Keys must be        |
|                        | strings, values may be any conformable type.  Objects   |
|                        | of user-defined classes can be passed in; only their    |
|                        | |:library/stdtypes.txt/object.__dict__:__dict__|        |
|                        | attribute is transmitted.                               |
+------------------------+---------------------------------------------------------+
| "dateTime.iso8601"     | |:xmlrpc.client.DateTime:DateTime| or |:library/dateti  |
|                        | me.txt/datetime.datetime:datetime.datetime|. Returned   |
|                        | type depends on values of * use_builtin_types* and      |
|                        | *use_datetime* flags.                                   |
+------------------------+---------------------------------------------------------+
| "base64"               | |:xmlrpc.client.Binary:Binary|,                         |
|                        | |:library/stdtypes.txt/bytes:bytes| or                  |
|                        | |:library/stdtypes.txt/bytearray:bytearray|.  Returned  |
|                        | type depends on the value of the * use_builtin_types*   |
|                        | flag.                                                   |
+------------------------+---------------------------------------------------------+
| "nil"                  | The "None" constant.  Passing is allowed only if        |
|                        | *allow_none* is true.                                   |
+------------------------+---------------------------------------------------------+
| "bigdecimal"           | |:library/decimal.txt/decimal.Decimal:decimal.Decimal|. |
|                        | Returned type only.                                     |
+------------------------+---------------------------------------------------------+

This is the full set of data types supported by XML-RPC.  Method calls may also
raise a special |:xmlrpc.client.Fault:Fault| instance, used to signal XML-RPC server errors, or
|:xmlrpc.client.ProtocolError:ProtocolError| used to signal an error in the HTTP/HTTPS transport layer. Both
|:xmlrpc.client.Fault:Fault| and |:xmlrpc.client.ProtocolError:ProtocolError| derive from a base class called "Error".  Note that
the xmlrpc client module currently does not marshal instances of subclasses of
built-in types.When passing strings, characters special to XML such as "<", ">",
and "&" will be automatically escaped.  However, it’s the caller’s
responsibility to ensure that the string is free of characters that aren’t
allowed in XML, such as the control characters with ASCII values between 0 and
31 (except, of course, tab, newline and carriage return); failing to do this
will result in an XML-RPC request that isn’t well-formed XML.  If you have to
pass arbitrary bytes via XML-RPC, use |:library/stdtypes.txt/bytes:bytes| or |:library/stdtypes.txt/bytearray:bytearray| classes or the
|:xmlrpc.client.Binary:Binary| wrapper class described below."Server" is retained as an alias for
|:xmlrpc.client.ServerProxy:ServerProxy| for backwards compatibility.  New code should use |:xmlrpc.client.ServerProxy:ServerProxy|.

Changed in version 3.5: Added the *context* argument.

Changed in version 3.6: Added support of type tags with prefixes (e.g. "ex:nil"
). Added support of unmarshalling additional types used by Apache XML-RPC
implementation for numerics: "i1", "i2", "i8", "biginteger", "float" and "
bigdecimal". See |:ws.apache.org/xmlrpc/types.html:http://ws.apache.org/xmlrpc/types.html| for a description.

See also:

  |:www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html:XML-RPC HOWTO|*|xml-rpc-howto:⚓|*
     A good description of XML-RPC operation and client software in several
     languages. Contains pretty much everything an XML-RPC client developer needs to
     know.

  |:xmlrpc-c.sourceforge.net/introspection.html:XML-RPC Introspection|*|xml-rpc-introspection:⚓|*
     Describes the XML-RPC protocol extension for introspection.

  |:xmlrpc.scripting.com/spec.html:XML-RPC Specification|*|xml-rpc-specification:⚓|*
     The official specification.

  |:effbot.org/zone/xmlrpc-errata.htm:Unofficial XML-RPC Errata|*|unofficial-xml-rpc-errata:⚓|*
     Fredrik Lundh’s “unofficial errata, intended to clarify certain details in the
     XML-RPC specification, as well as hint at ‘best practices’ to use when designing
     your own XML-RPC implementations.”

# serverproxy-objects:ServerProxy Objects

A |:xmlrpc.client.ServerProxy:ServerProxy| instance has a method corresponding to each remote procedure
call accepted by the XML-RPC server.  Calling the method performs an RPC,
dispatched by both name and argument signature (e.g. the same method name can be
overloaded with multiple argument signatures).  The RPC finishes by returning a
value, which may be either returned data in a conformant type or a |:xmlrpc.client.Fault:Fault| or
|:xmlrpc.client.ProtocolError:ProtocolError| object indicating an error.

Servers that support the XML introspection API support some common methods
grouped under the reserved "system" attribute:

*xmlrpc.client.ServerProxy.system.listMethods:ServerProxy.system.listMethods()*

   This method returns a list of strings, one for each (non-system) method
   supported by the XML-RPC server.

*xmlrpc.client.ServerProxy.system.methodSignature:ServerProxy.system.methodSignature(name)*

   This method takes one parameter, the name of a method implemented by the XML-RPC
   server. It returns an array of possible signatures for this method. A signature
   is an array of types. The first of these types is the return type of the method,
   the rest are parameters.

   Because multiple signatures (ie. overloading) is permitted, this method returns
   a list of signatures rather than a singleton.

   Signatures themselves are restricted to the top level parameters expected by a
   method. For instance if a method expects one array of structs as a parameter,
   and it returns a string, its signature is simply “string, array”. If it expects
   three integers and returns a string, its signature is “string, int, int, int”.

   If no signature is defined for the method, a non-array value is returned. In
   Python this means that the type of the returned  value will be something other
   than list.

*xmlrpc.client.ServerProxy.system.methodHelp:ServerProxy.system.methodHelp(name)*

   This method takes one parameter, the name of a method implemented by the XML-RPC
   server.  It returns a documentation string describing the use of that method. If
   no such string is available, an empty string is returned. The documentation
   string may contain HTML markup.

Changed in version 3.5: Instances of |:xmlrpc.client.ServerProxy:ServerProxy| support the |:glossary.txt/term-context-manager:context manager|
protocol for closing the underlying transport.

A working example follows. The server code:

```rst
from xmlrpc.server import SimpleXMLRPCServer

def is_even(n):
    return n % 2 == 0

server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(is_even, "is_even")
server.serve_forever()
```

The client code for the preceding server:

```rst
import xmlrpc.client

with xmlrpc.client.ServerProxy("http://localhost:8000/") as proxy:
    print("3 is even: %s" % str(proxy.is_even(3)))
    print("100 is even: %s" % str(proxy.is_even(100)))
```

*|datetime-objects:⚓|* # datetime-objects:DateTime Objects

*xmlrpc.client.DateTime:class xmlrpc.client.DateTime*

   This class may be initialized with seconds since the epoch, a time tuple, an ISO
   8601 time/date string, or a |:library/datetime.txt/datetime.datetime:datetime.datetime| instance.  It has the following
   methods, supported mainly for internal use by the marshalling/unmarshalling
   code:

   *xmlrpc.client.DateTime.decode:decode(string)*

      Accept a string as the instance’s new time value.

   *xmlrpc.client.DateTime.encode:encode(out)*

      Write the XML-RPC encoding of this |:xmlrpc.client.DateTime:DateTime| item to the *out* stream object.

   It also supports certain of Python’s built-in operators through rich comparison
   and "__repr__()" methods.

A working example follows. The server code:

```rst
import datetime
from xmlrpc.server import SimpleXMLRPCServer
import xmlrpc.client

def today():
    today = datetime.datetime.today()
    return xmlrpc.client.DateTime(today)

server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(today, "today")
server.serve_forever()
```

The client code for the preceding server:

```rst
import xmlrpc.client
import datetime

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")

today = proxy.today()
# convert the ISO8601 string to a datetime object
converted = datetime.datetime.strptime(today.value, "%Y%m%dT%H:%M:%S")
print("Today: %s" % converted.strftime("%d.%m.%Y, %H:%M"))
```

*|binary-objects:⚓|* # binary-objects:Binary Objects

*xmlrpc.client.Binary:class xmlrpc.client.Binary*

   This class may be initialized from bytes data (which may include NULs). The
   primary access to the content of a |:xmlrpc.client.Binary:Binary| object is provided by an attribute:

   *xmlrpc.client.Binary.data:data*

      The binary data encapsulated by the |:xmlrpc.client.Binary:Binary| instance.  The data is provided as
      a |:library/stdtypes.txt/bytes:bytes| object.

   |:xmlrpc.client.Binary:Binary| objects have the following methods, supported mainly for internal use
   by the marshalling/unmarshalling code:

   *xmlrpc.client.Binary.decode:decode(bytes)*

      Accept a base64 |:library/stdtypes.txt/bytes:bytes| object and decode it as the instance’s new data.

   *xmlrpc.client.Binary.encode:encode(out)*

      Write the XML-RPC base 64 encoding of this binary item to the *out* stream
      object.

      The encoded data will have newlines every 76 characters as per *|index-0:⚓|*
      |:tools.ietf.org/html/rfc2045.html#section-6.8:RFC 2045 section 6.8|, which was the de facto standard base64 specification
      when the XML-RPC spec was written.

   It also supports certain of Python’s built-in operators through "__eq__()" and "
   __ne__()" methods.

Example usage of the binary objects.  We’re going to transfer an image over
XMLRPC:

```rst
from xmlrpc.server import SimpleXMLRPCServer
import xmlrpc.client

def python_logo():
    with open("python_logo.jpg", "rb") as handle:
        return xmlrpc.client.Binary(handle.read())

server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(python_logo, 'python_logo')

server.serve_forever()
```

The client gets the image and saves it to a file:

```rst
import xmlrpc.client

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
with open("fetched_python_logo.jpg", "wb") as handle:
    handle.write(proxy.python_logo().data)
```

*|fault-objects:⚓|* # fault-objects:Fault Objects

*xmlrpc.client.Fault:class xmlrpc.client.Fault*

   A |:xmlrpc.client.Fault:Fault| object encapsulates the content of an XML-RPC fault tag. Fault objects
   have the following attributes:

   *xmlrpc.client.Fault.faultCode:faultCode*

      A string indicating the fault type.

   *xmlrpc.client.Fault.faultString:faultString*

      A string containing a diagnostic message associated with the fault.

In the following example we’re going to intentionally cause a |:xmlrpc.client.Fault:Fault| by
returning a complex type object.  The server code:

```rst
from xmlrpc.server import SimpleXMLRPCServer

# A marshalling error is going to occur because we're returning a
# complex number
def add(x, y):
    return x+y+0j

server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(add, 'add')

server.serve_forever()
```

The client code for the preceding server:

```rst
import xmlrpc.client

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
try:
    proxy.add(2, 5)
except xmlrpc.client.Fault as err:
    print("A fault occurred")
    print("Fault code: %d" % err.faultCode)
    print("Fault string: %s" % err.faultString)
```

*|protocol-error-objects:⚓|* # protocolerror-objects:ProtocolError Objects

*xmlrpc.client.ProtocolError:class xmlrpc.client.ProtocolError*

   A |:xmlrpc.client.ProtocolError:ProtocolError| object describes a protocol error in the underlying transport
   layer (such as a 404 ‘not found’ error if the server named by the URI does not
   exist).  It has the following attributes:

   *xmlrpc.client.ProtocolError.url:url*

      The URI or URL that triggered the error.

   *xmlrpc.client.ProtocolError.errcode:errcode*

      The error code.

   *xmlrpc.client.ProtocolError.errmsg:errmsg*

      The error message or diagnostic string.

   *xmlrpc.client.ProtocolError.headers:headers*

      A dict containing the headers of the HTTP/HTTPS request that triggered the
      error.

In the following example we’re going to intentionally cause a |:xmlrpc.client.ProtocolError:ProtocolError| by
providing an invalid URI:

```rst
import xmlrpc.client

# create a ServerProxy with a URI that doesn't respond to XMLRPC requests
proxy = xmlrpc.client.ServerProxy("http://google.com/")

try:
    proxy.some_method()
except xmlrpc.client.ProtocolError as err:
    print("A protocol error occurred")
    print("URL: %s" % err.url)
    print("HTTP/HTTPS headers: %s" % err.headers)
    print("Error code: %d" % err.errcode)
    print("Error message: %s" % err.errmsg)
```

# multicall-objects:MultiCall Objects

The |:xmlrpc.client.MultiCall:MultiCall| object provides a way to encapsulate multiple calls to a remote
server into a single request [1].

*xmlrpc.client.MultiCall:class xmlrpc.client.MultiCall(server)*

   Create an object used to boxcar method calls. *server* is the eventual target of
   the call. Calls can be made to the result object, but they will immediately
   return "None", and only store the call name and parameters in the |:xmlrpc.client.MultiCall:MultiCall|
   object. Calling the object itself causes all stored calls to be transmitted as a
   single "system.multicall" request. The result of this call is a |:glossary.txt/term-generator:generator|;
   iterating over this generator yields the individual results.

A usage example of this class follows.  The server code:

```rst
from xmlrpc.server import SimpleXMLRPCServer

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    return x // y

# A simple server with simple arithmetic functions
server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_multicall_functions()
server.register_function(add, 'add')
server.register_function(subtract, 'subtract')
server.register_function(multiply, 'multiply')
server.register_function(divide, 'divide')
server.serve_forever()
```

The client code for the preceding server:

```rst
import xmlrpc.client

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
multicall = xmlrpc.client.MultiCall(proxy)
multicall.add(7, 3)
multicall.subtract(7, 3)
multicall.multiply(7, 3)
multicall.divide(7, 3)
result = multicall()

print("7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d" % tuple(result))
```

# convenience-functions:Convenience Functions

*xmlrpc.client.dumps:xmlrpc.client.dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)*

   Convert *params* into an XML-RPC request. or into a response if *methodresponse*
   is true. *params* can be either a tuple of arguments or an instance of the
   |:xmlrpc.client.Fault:Fault| exception class.  If *methodresponse* is true, only a single value can
   be returned, meaning that *params* must be of length 1. *encoding*, if supplied,
   is the encoding to use in the generated XML; the default is UTF-8. Python’s
   |:library/constants.txt/None:None| value cannot be used in standard XML-RPC; to allow using it via an
   extension,  provide a true value for *allow_none*.

*xmlrpc.client.loads:xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False)*

   Convert an XML-RPC request or response into Python objects, a "(params,
   methodname)".  *params* is a tuple of argument; *methodname* is a string, or "
   None" if no method name is present in the packet. If the XML-RPC packet
   represents a fault condition, this function will raise a |:xmlrpc.client.Fault:Fault| exception. The
   *use_builtin_types* flag can be used to cause date/time values to be presented
   as |:library/datetime.txt/datetime.datetime:datetime.datetime| objects and binary data to be presented as |:library/stdtypes.txt/bytes:bytes|
   objects; this flag is false by default.

   The obsolete *use_datetime* flag is similar to *use_builtin_types* but it
   applies only to date/time values.

   Changed in version 3.3: The *use_builtin_types* flag was added.

*|xmlrpc-client-example:⚓|* # example-of-client-usage:Example of Client Usage

```rst
# simple test program (from the XML-RPC specification)
from xmlrpc.client import ServerProxy, Error

# server = ServerProxy("http://localhost:8000") # local server
with ServerProxy("http://betty.userland.com") as proxy:

    print(proxy)

    try:
        print(proxy.examples.getStateName(41))
    except Error as v:
        print("ERROR", v)
```

To access an XML-RPC server through a HTTP proxy, you need to define a custom
transport.  The following example shows how:

```rst
import http.client
import xmlrpc.client

class ProxiedTransport(xmlrpc.client.Transport):

    def set_proxy(self, host, port=None, headers=None):
        self.proxy = host, port
        self.proxy_headers = headers

    def make_connection(self, host):
        connection = http.client.HTTPConnection(*self.proxy)
        connection.set_tunnel(host, headers=self.proxy_headers)
        self._connection = host, connection
        return connection

transport = ProxiedTransport()
transport.set_proxy('proxy-server', 8080)
server = xmlrpc.client.ServerProxy('http://betty.userland.com', transport=transport)
print(server.examples.getStateName(41))
```

# example-of-client-and-server-usage:Example of Client and Server Usage

See |:library/xmlrpc.server.txt/simplexmlrpcserver-example:SimpleXMLRPCServer Example|.

-[ Footnotes ]-

[1] This approach has been first presented in |:www.xmlrpc.com/discuss/msgReader$1208?mode=topic:a discussion on xmlrpc.com|*|a
    -discussion-on-xmlrpc-com:⚓|* .



