%hyperhelp title="email.generator" date="2021-07-11"
*|module-email.generator:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/email/generator.py:Lib/email/generator.py|

======================================================================

One of the most common tasks is to generate the flat (serialized) version of the
email message represented by a message object structure.  You will need to do
this if you want to send your message via |:library/smtplib.txt/smtplib.SMTP.sendmail:smtplib.SMTP.sendmail()| or the
|:library/nntplib.txt/module-nntplib:nntplib| module, or print the message on the console.  Taking a message object
structure and producing a serialized representation is the job of the generator
classes.

As with the |:library/email.parser.txt/module-email.parser:email.parser| module, you aren’t limited to the functionality of
the bundled generator; you could write one from scratch yourself.  However the
bundled generator knows how to generate most email in a standards-compliant way,
should handle MIME and non-MIME email messages just fine, and is designed so
that the bytes-oriented parsing and generation operations are inverses, assuming
the same non-transforming |:library/email.policy.txt/module-email.policy:policy| is used for both.  That is, parsing the
serialized byte stream via the |:library/email.parser.txt/email.parser.BytesParser:BytesParser| class and then regenerating the
serialized byte stream using |:email.generator.BytesGenerator:BytesGenerator| should produce output identical to
the input [1].  (On the other hand, using the generator on an |:library/email.message.txt/email.message.EmailMessage:EmailMessage|
constructed by program may result in changes to the |:library/email.message.txt/email.message.EmailMessage:EmailMessage| object as
defaults are filled in.)

The |:email.generator.Generator:Generator| class can be used to flatten a message into a text (as opposed
to binary) serialized representation, but since Unicode cannot represent binary
data directly, the message is of necessity transformed into something that
contains only ASCII characters, using the standard email RFC Content Transfer
Encoding techniques for encoding email messages for transport over channels that
are not “8 bit clean”.

To accommodate reproducible processing of SMIME-signed messages |:email.generator.Generator:Generator|
disables header folding for message parts of type "multipart/signed" and all
subparts.

*email.generator.BytesGenerator:class email.generator.BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None)*

   Return a |:email.generator.BytesGenerator:BytesGenerator| object that will write any message provided to the
   |:email.generator.BytesGenerator.flatten:flatten()| method, or any surrogateescape encoded text provided to the
   |:email.generator.BytesGenerator.write:write()| method, to the |:glossary.txt/term-file-like-object:file-like object| *outfp*. *outfp* must support a "
   write" method that accepts binary data.

   If optional *mangle_from_* is "True", put a ">" character in front of any line
   in the body that starts with the exact string ""From "", that is "From" followed
   by a space at the beginning of a line.  *mangle_from_* defaults to the value of
   the |:library/email.policy.txt/email.policy.Policy.mangle_from_:mangle_from_| setting of the *policy* (which is "True" for the |:library/email.policy.txt/email.policy.compat32:compat32|
   policy and "False" for all others). *mangle_from_* is intended for use when
   messages are stored in unix mbox format (see |:library/mailbox.txt/module-mailbox:mailbox| and
   |:www.jwz.org/doc/content-length.html:WHY THE CONTENT-LENGTH FORMAT IS BAD|*|why-the-content-length-format-is-bad:⚓|*
   ).

   If *maxheaderlen* is not "None", refold any header lines that are longer than *
   maxheaderlen*, or if "0", do not rewrap any headers.  If *manheaderlen* is "None
   " (the default), wrap headers and other message lines according to the *policy*
   settings.

   If *policy* is specified, use that policy to control message generation.  If *
   policy* is "None" (the default), use the policy associated with the |:library/email.compat32-message.txt/email.message.Message:Message| or
   |:library/email.message.txt/email.message.EmailMessage:EmailMessage| object passed to "flatten" to control the message generation.
   See |:library/email.policy.txt/module-email.policy:email.policy| for details on what *policy* controls.

   New in version 3.2.

   Changed in version 3.3: Added the *policy* keyword.

   Changed in version 3.6: The default behavior of the *mangle_from_* and *
   maxheaderlen* parameters is to follow the policy.

   *email.generator.BytesGenerator.flatten:flatten(msg, unixfrom=False, linesep=None)*

      Print the textual representation of the message object structure rooted at *msg*
      to the output file specified when the |:email.generator.BytesGenerator:BytesGenerator| instance was created.

      If the |:library/email.policy.txt/module-email.policy:policy| option |:library/email.policy.txt/email.policy.Policy.cte_type:cte_type| is "8bit" (the default), copy any headers in
      the original parsed message that have not been modified to the output with any
      bytes with the high bit set reproduced as in the original, and preserve the non-
      ASCII *Content-Transfer-Encoding* of any body parts that have them. If "cte_type
      " is "7bit", convert the bytes with the high bit set as needed using an ASCII-
      compatible *Content-Transfer-Encoding*. That is, transform parts with non-ASCII
      *Content-Transfer-Encoding* (*Content-Transfer-Encoding: 8bit*) to an ASCII
      compatible *Content-Transfer-Encoding*, and encode RFC-invalid non-ASCII bytes
      in headers using the MIME "unknown-8bit" character set, thus rendering them RFC-
      compliant.

      If *unixfrom* is "True", print the envelope header delimiter used by the Unix
      mailbox format (see |:library/mailbox.txt/module-mailbox:mailbox|) before the first of the *|index-0:⚓|* |:tools.ietf.org/html/rfc5322.html:RFC 5322|
      headers of the root message object.  If the root object has no envelope header,
      craft a standard one.  The default is "False". Note that for subparts, no
      envelope header is ever printed.

      If *linesep* is not "None", use it as the separator character between all the
      lines of the flattened message.  If *linesep* is "None" (the default), use the
      value specified in the *policy*.

   *email.generator.BytesGenerator.clone:clone(fp)*

      Return an independent clone of this |:email.generator.BytesGenerator:BytesGenerator| instance with the exact
      same option settings, and *fp* as the new *outfp*.

   *email.generator.BytesGenerator.write:write(s)*

      Encode *s* using the "ASCII" codec and the "surrogateescape" error handler, and
      pass it to the *write* method of the *outfp* passed to the |:email.generator.BytesGenerator:BytesGenerator|’s
      constructor.

As a convenience, |:library/email.message.txt/email.message.EmailMessage:EmailMessage| provides the methods |:library/email.message.txt/email.message.EmailMessage.as_bytes:as_bytes()| and "
bytes(aMessage)" (a.k.a. |:library/email.message.txt/email.message.EmailMessage.__bytes__:__bytes__()|), which simplify the generation of a
serialized binary representation of a message object.  For more detail, see
|:library/email.message.txt/module-email.message:email.message|.

Because strings cannot represent binary data, the |:email.generator.Generator:Generator| class must convert
any binary data in any message it flattens to an ASCII compatible format, by
converting them to an ASCII compatible *Content-Transfer_Encoding*.  Using the
terminology of the email RFCs, you can think of this as |:email.generator.Generator:Generator| serializing
to an I/O stream that is not “8 bit clean”.  In other words, most applications
will want to be using |:email.generator.BytesGenerator:BytesGenerator|, and not |:email.generator.Generator:Generator|.

*email.generator.Generator:class email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None)*

   Return a |:email.generator.Generator:Generator| object that will write any message provided to the
   |:email.generator.Generator.flatten:flatten()| method, or any text provided to the |:email.generator.Generator.write:write()| method, to the
   |:glossary.txt/term-file-like-object:file-like object| *outfp*.  *outfp* must support a "write" method that accepts
   string data.

   If optional *mangle_from_* is "True", put a ">" character in front of any line
   in the body that starts with the exact string ""From "", that is "From" followed
   by a space at the beginning of a line.  *mangle_from_* defaults to the value of
   the |:library/email.policy.txt/email.policy.Policy.mangle_from_:mangle_from_| setting of the *policy* (which is "True" for the |:library/email.policy.txt/email.policy.compat32:compat32|
   policy and "False" for all others). *mangle_from_* is intended for use when
   messages are stored in unix mbox format (see |:library/mailbox.txt/module-mailbox:mailbox| and
   |:www.jwz.org/doc/content-length.html:WHY THE CONTENT-LENGTH FORMAT IS BAD|*|id2:⚓|* ).

   If *maxheaderlen* is not "None", refold any header lines that are longer than *
   maxheaderlen*, or if "0", do not rewrap any headers.  If *manheaderlen* is "None
   " (the default), wrap headers and other message lines according to the *policy*
   settings.

   If *policy* is specified, use that policy to control message generation.  If *
   policy* is "None" (the default), use the policy associated with the |:library/email.compat32-message.txt/email.message.Message:Message| or
   |:library/email.message.txt/email.message.EmailMessage:EmailMessage| object passed to "flatten" to control the message generation.
   See |:library/email.policy.txt/module-email.policy:email.policy| for details on what *policy* controls.

   Changed in version 3.3: Added the *policy* keyword.

   Changed in version 3.6: The default behavior of the *mangle_from_* and *
   maxheaderlen* parameters is to follow the policy.

   *email.generator.Generator.flatten:flatten(msg, unixfrom=False, linesep=None)*

      Print the textual representation of the message object structure rooted at *msg*
      to the output file specified when the |:email.generator.Generator:Generator| instance was created.

      If the |:library/email.policy.txt/module-email.policy:policy| option |:library/email.policy.txt/email.policy.Policy.cte_type:cte_type| is "8bit", generate the message as if the
      option were set to "7bit". (This is required because strings cannot represent
      non-ASCII bytes.) Convert any bytes with the high bit set as needed using an
      ASCII-compatible *Content-Transfer-Encoding*.  That is, transform parts with
      non-ASCII *Content-Transfer-Encoding* (*Content-Transfer-Encoding: 8bit*) to an
      ASCII compatible *Content-Transfer-Encoding*, and encode RFC-invalid non-ASCII
      bytes in headers using the MIME "unknown-8bit" character set, thus rendering
      them RFC-compliant.

      If *unixfrom* is "True", print the envelope header delimiter used by the Unix
      mailbox format (see |:library/mailbox.txt/module-mailbox:mailbox|) before the first of the *|index-1:⚓|* |:tools.ietf.org/html/rfc5322.html:RFC 5322|
      headers of the root message object.  If the root object has no envelope header,
      craft a standard one.  The default is "False". Note that for subparts, no
      envelope header is ever printed.

      If *linesep* is not "None", use it as the separator character between all the
      lines of the flattened message.  If *linesep* is "None" (the default), use the
      value specified in the *policy*.

      Changed in version 3.2: Added support for re-encoding "8bit" message bodies, and
      the *linesep* argument.

   *email.generator.Generator.clone:clone(fp)*

      Return an independent clone of this |:email.generator.Generator:Generator| instance with the exact same
      options, and *fp* as the new *outfp*.

   *email.generator.Generator.write:write(s)*

      Write *s* to the *write* method of the *outfp* passed to the |:email.generator.Generator:Generator|’s
      constructor.  This provides just enough file-like API for |:email.generator.Generator:Generator| instances
      to be used in the |:library/functions.txt/print:print()| function.

As a convenience, |:library/email.message.txt/email.message.EmailMessage:EmailMessage| provides the methods |:library/email.message.txt/email.message.EmailMessage.as_string:as_string()| and "
str(aMessage)" (a.k.a. |:library/email.message.txt/email.message.EmailMessage.__str__:__str__()|), which simplify the generation of a
formatted string representation of a message object.  For more detail, see
|:library/email.message.txt/module-email.message:email.message|.

The |:module-email.generator:email.generator| module also provides a derived class, |:email.generator.DecodedGenerator:DecodedGenerator|,
which is like the |:email.generator.Generator:Generator| base class, except that non-*text* parts are not
serialized, but are instead represented in the output stream by a string derived
from a template filled in with information about the part.

*email.generator.DecodedGenerator:class email.generator.DecodedGenerator(outfp, mangle_from_=None, maxheaderlen=None, fmt=None, *, policy=None)*

   Act like |:email.generator.Generator:Generator|, except that for any subpart of the message passed to
   |:email.generator.Generator.flatten:Generator.flatten()|, if the subpart is of main type *text*, print the decoded
   payload of the subpart, and if the main type is not *text*, instead of printing
   it fill in the string *fmt* using information from the part and print the
   resulting filled-in string.

   To fill in *fmt*, execute "fmt % part_info", where "part_info" is a dictionary
   composed of the following keys and values:

   * "type" – Full MIME type of the non-*text* part

   * "maintype" – Main MIME type of the non-*text* part

   * "subtype" – Sub-MIME type of the non-*text* part

   * "filename" – Filename of the non-*text* part

   * "description" – Description associated with the non-*text* part

   * "encoding" – Content transfer encoding of the non-*text* part

   If *fmt* is "None", use the following default *fmt*:

      “[Non-text (%(type)s) part of message omitted, filename %(filename)s]”

   Optional *_mangle_from_* and *maxheaderlen* are as with the |:email.generator.Generator:Generator| base
   class.

-[ Footnotes ]-

[1] This statement assumes that you use the appropriate setting for "unixfrom", and
    that there are no "policy" settings calling for automatic adjustments (for
    example, "refold_source" must be "none", which is *not* the default).  It is
    also not 100% true, since if the message does not conform to the RFC standards
    occasionally information about the exact original text is lost during parsing
    error recovery.  It is a goal to fix these latter edge cases when possible.



