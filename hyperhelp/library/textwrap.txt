%hyperhelp title="textwrap" date="2021-07-11"
*|module-textwrap:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/textwrap.py:Lib/textwrap.py|

======================================================================

The |:module-textwrap:textwrap| module provides some convenience functions, as well as
|:textwrap.TextWrapper:TextWrapper|, the class that does all the work. If you’re just wrapping or
filling one or two text strings, the convenience functions should be good
enough; otherwise, you should use an instance of |:textwrap.TextWrapper:TextWrapper| for efficiency.

*textwrap.wrap:textwrap.wrap(text, width=70, **kwargs)*

   Wraps the single paragraph in *text* (a string) so every line is at most *width*
   characters long.  Returns a list of output lines, without final newlines.

   Optional keyword arguments correspond to the instance attributes of
   |:textwrap.TextWrapper:TextWrapper|, documented below.  *width* defaults to "70".

   See the |:textwrap.TextWrapper.wrap:TextWrapper.wrap()| method for additional details on how |:textwrap.wrap:wrap()|
   behaves.

*textwrap.fill:textwrap.fill(text, width=70, **kwargs)*

   Wraps the single paragraph in *text*, and returns a single string containing the
   wrapped paragraph.  |:textwrap.fill:fill()| is shorthand for

```rst
"\n".join(wrap(text, ...))
```

   In particular, |:textwrap.fill:fill()| accepts exactly the same keyword arguments as |:textwrap.wrap:wrap()|.

*textwrap.shorten:textwrap.shorten(text, width, **kwargs)*

   Collapse and truncate the given *text* to fit in the given *width*.

   First the whitespace in *text* is collapsed (all whitespace is replaced by
   single spaces).  If the result fits in the *width*, it is returned. Otherwise,
   enough words are dropped from the end so that the remaining words plus the "
   placeholder" fit within "width":

```rst
>>> textwrap.shorten("Hello  world!", width=12)
'Hello world!'
>>> textwrap.shorten("Hello  world!", width=11)
'Hello [...]'
>>> textwrap.shorten("Hello world", width=10, placeholder="...")
'Hello...'
```

   Optional keyword arguments correspond to the instance attributes of
   |:textwrap.TextWrapper:TextWrapper|, documented below.  Note that the whitespace is collapsed before
   the text is passed to the |:textwrap.TextWrapper:TextWrapper| |:textwrap.fill:fill()| function, so changing the value
   of |:textwrap.TextWrapper.tabsize:tabsize|, |:textwrap.TextWrapper.expand_tabs:expand_tabs|, |:textwrap.TextWrapper.drop_whitespace:drop_whitespace|, and |:textwrap.TextWrapper.replace_whitespace:replace_whitespace| will
   have no effect.

   New in version 3.4.

*textwrap.dedent:textwrap.dedent(text)*

   Remove any common leading whitespace from every line in *text*.

   This can be used to make triple-quoted strings line up with the left edge of the
   display, while still presenting them in the source code in indented form.

   Note that tabs and spaces are both treated as whitespace, but they are not
   equal: the lines ""  hello"" and ""\thello"" are considered to have no common
   leading whitespace.

   Lines containing only whitespace are ignored in the input and normalized to a
   single newline character in the output.

   For example:

```rst
def test():
    # end first line with \ to avoid the empty line!
    s = '''\
    hello
      world
    '''
    print(repr(s))          # prints '    hello\n      world\n    '
    print(repr(dedent(s)))  # prints 'hello\n  world\n'
```

*textwrap.indent:textwrap.indent(text, prefix, predicate=None)*

   Add *prefix* to the beginning of selected lines in *text*.

   Lines are separated by calling "text.splitlines(True)".

   By default, *prefix* is added to all lines that do not consist solely of
   whitespace (including any line endings).

   For example:

```rst
>>> s = 'hello\n\n \nworld'
>>> indent(s, '  ')
'  hello\n\n \n  world'
```

   The optional *predicate* argument can be used to control which lines are
   indented. For example, it is easy to add *prefix* to even empty and whitespace-
   only lines:

```rst
>>> print(indent(s, '+ ', lambda line: True))
+ hello
+
+
+ world
```

   New in version 3.3.

|:textwrap.wrap:wrap()|, |:textwrap.fill:fill()| and |:textwrap.shorten:shorten()| work by creating a |:textwrap.TextWrapper:TextWrapper| instance and
calling a single method on it.  That instance is not reused, so for applications
that process many text strings using |:textwrap.wrap:wrap()| and/or |:textwrap.fill:fill()|, it may be more
efficient to create your own |:textwrap.TextWrapper:TextWrapper| object.

Text is preferably wrapped on whitespaces and right after the hyphens in
hyphenated words; only then will long words be broken if necessary, unless
|:textwrap.TextWrapper.break_long_words:TextWrapper.break_long_words| is set to false.

*textwrap.TextWrapper:class textwrap.TextWrapper(**kwargs)*

   The |:textwrap.TextWrapper:TextWrapper| constructor accepts a number of optional keyword arguments.
   Each keyword argument corresponds to an instance attribute, so for example

```rst
wrapper = TextWrapper(initial_indent="* ")
```

   is the same as

```rst
wrapper = TextWrapper()
wrapper.initial_indent = "* "
```

   You can re-use the same |:textwrap.TextWrapper:TextWrapper| object many times, and you can change any
   of its options through direct assignment to instance attributes between uses.

   The |:textwrap.TextWrapper:TextWrapper| instance attributes (and keyword arguments to the constructor)
   are as follows:

   *textwrap.TextWrapper.width:width*

      (default: "70") The maximum length of wrapped lines.  As long as there are no
      individual words in the input text longer than |:textwrap.TextWrapper.width:width|, |:textwrap.TextWrapper:TextWrapper| guarantees
      that no output line will be longer than |:textwrap.TextWrapper.width:width| characters.

   *textwrap.TextWrapper.expand_tabs:expand_tabs*

      (default: "True") If true, then all tab characters in *text* will be expanded to
      spaces using the "expandtabs()" method of *text*.

   *textwrap.TextWrapper.tabsize:tabsize*

      (default: "8") If |:textwrap.TextWrapper.expand_tabs:expand_tabs| is true, then all tab characters in *text* will
      be expanded to zero or more spaces, depending on the current column and the
      given tab size.

      New in version 3.3.

   *textwrap.TextWrapper.replace_whitespace:replace_whitespace*

      (default: "True") If true, after tab expansion but before wrapping, the |:textwrap.wrap:wrap()|
      method will replace each whitespace character with a single space.  The
      whitespace characters replaced are as follows: tab, newline, vertical tab,
      formfeed, and carriage return ("'\t\n\v\f\r'").

      Note:

        If |:textwrap.TextWrapper.expand_tabs:expand_tabs| is false and |:textwrap.TextWrapper.replace_whitespace:replace_whitespace| is true, each tab character
        will be replaced by a single space, which is *not* the same as tab expansion.

      Note:

        If |:textwrap.TextWrapper.replace_whitespace:replace_whitespace| is false, newlines may appear in the middle of a line
        and cause strange output. For this reason, text should be split into paragraphs
        (using |:library/stdtypes.txt/str.splitlines:str.splitlines()| or similar) which are wrapped separately.

   *textwrap.TextWrapper.drop_whitespace:drop_whitespace*

      (default: "True") If true, whitespace at the beginning and ending of every line
      (after wrapping but before indenting) is dropped. Whitespace at the beginning of
      the paragraph, however, is not dropped if non-whitespace follows it.  If
      whitespace being dropped takes up an entire line, the whole line is dropped.

   *textwrap.TextWrapper.initial_indent:initial_indent*

      (default: "''") String that will be prepended to the first line of wrapped
      output.  Counts towards the length of the first line.  The empty string is not
      indented.

   *textwrap.TextWrapper.subsequent_indent:subsequent_indent*

      (default: "''") String that will be prepended to all lines of wrapped output
      except the first.  Counts towards the length of each line except the first.

   *textwrap.TextWrapper.fix_sentence_endings:fix_sentence_endings*

      (default: "False") If true, |:textwrap.TextWrapper:TextWrapper| attempts to detect sentence endings
      and ensure that sentences are always separated by exactly two spaces.  This is
      generally desired for text in a monospaced font. However, the sentence detection
      algorithm is imperfect: it assumes that a sentence ending consists of a
      lowercase letter followed by one of "'.'", "'!'", or "'?'", possibly followed by
      one of "'"'" or ""'"", followed by a space.  One problem with this is algorithm
      is that it is unable to detect the difference between “Dr.” in

```rst
[...] Dr. Frankenstein's monster [...]
```

      and “Spot.” in

```rst
[...] See Spot. See Spot run [...]
```

      |:textwrap.TextWrapper.fix_sentence_endings:fix_sentence_endings| is false by default.

      Since the sentence detection algorithm relies on "string.lowercase" for the
      definition of “lowercase letter”, and a convention of using two spaces after a
      period to separate sentences on the same line, it is specific to English-
      language texts.

   *textwrap.TextWrapper.break_long_words:break_long_words*

      (default: "True") If true, then words longer than |:textwrap.TextWrapper.width:width| will be broken in
      order to ensure that no lines are longer than |:textwrap.TextWrapper.width:width|.  If it is false, long
      words will not be broken, and some lines may be longer than |:textwrap.TextWrapper.width:width|.  (Long
      words will be put on a line by themselves, in order to minimize the amount by
      which |:textwrap.TextWrapper.width:width| is exceeded.)

   *textwrap.TextWrapper.break_on_hyphens:break_on_hyphens*

      (default: "True") If true, wrapping will occur preferably on whitespaces and
      right after hyphens in compound words, as it is customary in English. If false,
      only whitespaces will be considered as potentially good places for line breaks,
      but you need to set |:textwrap.TextWrapper.break_long_words:break_long_words| to false if you want truly insecable
      words.  Default behaviour in previous versions was to always allow breaking
      hyphenated words.

   *textwrap.TextWrapper.max_lines:max_lines*

      (default: "None") If not "None", then the output will contain at most *max_lines
      * lines, with *placeholder* appearing at the end of the output.

      New in version 3.4.

   *|index-0:⚓|*

   *textwrap.TextWrapper.placeholder:placeholder*

      (default: "' [...]'") String that will appear at the end of the output text if
      it has been truncated.

      New in version 3.4.

   |:textwrap.TextWrapper:TextWrapper| also provides some public methods, analogous to the module-level
   convenience functions:

   *textwrap.TextWrapper.wrap:wrap(text)*

      Wraps the single paragraph in *text* (a string) so every line is at most |:textwrap.TextWrapper.width:width|
      characters long.  All wrapping options are taken from instance attributes of the
      |:textwrap.TextWrapper:TextWrapper| instance.  Returns a list of output lines, without final newlines.
      If the wrapped output has no content, the returned list is empty.

   *textwrap.TextWrapper.fill:fill(text)*

      Wraps the single paragraph in *text*, and returns a single string containing the
      wrapped paragraph.



