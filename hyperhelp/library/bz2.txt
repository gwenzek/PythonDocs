%hyperhelp title="bz2" date="2021-07-11"
*|module-bz2:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/bz2.py:Lib/bz2.py|

======================================================================

This module provides a comprehensive interface for compressing and decompressing
data using the bzip2 compression algorithm.

The |:module-bz2:bz2| module contains:

* The |:bz2.open:open()| function and |:bz2.BZ2File:BZ2File| class for reading and writing compressed
  files.

* The |:bz2.BZ2Compressor:BZ2Compressor| and |:bz2.BZ2Decompressor:BZ2Decompressor| classes for incremental
  (de)compression.

* The |:bz2.compress:compress()| and |:bz2.decompress:decompress()| functions for one-shot (de)compression.

All of the classes in this module may safely be accessed from multiple threads.

# de-compression-of-files:(De)compression of files

*bz2.open:bz2.open(filename, mode='r', compresslevel=9, encoding=None, errors=None, newline=None)*

   Open a bzip2-compressed file in binary or text mode, returning a |:glossary.txt/term-file-object:file
object|.

   As with the constructor for |:bz2.BZ2File:BZ2File|, the *filename* argument can be an actual
   filename (a |:library/stdtypes.txt/str:str| or |:library/stdtypes.txt/bytes:bytes| object), or an existing file object to read from or
   write to.

   The *mode* argument can be any of "'r'", "'rb'", "'w'", "'wb'", "'x'", "'xb'", "
   'a'" or "'ab'" for binary mode, or "'rt'", "'wt'", "'xt'", or "'at'" for text
   mode. The default is "'rb'".

   The *compresslevel* argument is an integer from 1 to 9, as for the |:bz2.BZ2File:BZ2File|
   constructor.

   For binary mode, this function is equivalent to the |:bz2.BZ2File:BZ2File| constructor: "
   BZ2File(filename, mode, compresslevel=compresslevel)". In this case, the *
   encoding*, *errors* and *newline* arguments must not be provided.

   For text mode, a |:bz2.BZ2File:BZ2File| object is created, and wrapped in an
   |:library/io.txt/io.TextIOWrapper:io.TextIOWrapper| instance with the specified encoding, error handling
   behavior, and line ending(s).

   New in version 3.3.

   Changed in version 3.4: The "'x'" (exclusive creation) mode was added.

   Changed in version 3.6: Accepts a |:glossary.txt/term-path-like-object:path-like object|.

*bz2.BZ2File:class bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)*

   Open a bzip2-compressed file in binary mode.

   If *filename* is a |:library/stdtypes.txt/str:str| or |:library/stdtypes.txt/bytes:bytes| object, open the named file directly.
   Otherwise, *filename* should be a |:glossary.txt/term-file-object:file object|, which will be used to read or
   write the compressed data.

   The *mode* argument can be either "'r'" for reading (default), "'w'" for
   overwriting, "'x'" for exclusive creation, or "'a'" for appending. These can
   equivalently be given as "'rb'", "'wb'", "'xb'" and "'ab'" respectively.

   If *filename* is a file object (rather than an actual file name), a mode of "'w'
   " does not truncate the file, and is instead equivalent to "'a'".

   The *buffering* argument is ignored. Its use is deprecated since Python 3.0.

   If *mode* is "'w'" or "'a'", *compresslevel* can be an integer between "1" and "
   9" specifying the level of compression: "1" produces the least compression, and
   "9" (default) produces the most compression.

   If *mode* is "'r'", the input file may be the concatenation of multiple
   compressed streams.

   |:bz2.BZ2File:BZ2File| provides all of the members specified by the |:library/io.txt/io.BufferedIOBase:io.BufferedIOBase|,
   except for "detach()" and "truncate()". Iteration and the |:reference/compound_stmts.txt/with:with| statement are
   supported.

   |:bz2.BZ2File:BZ2File| also provides the following method:

   *bz2.BZ2File.peek:peek([n])*

      Return buffered data without advancing the file position. At least one byte of
      data will be returned (unless at EOF). The exact number of bytes returned is
      unspecified.

      Note:

        While calling |:bz2.BZ2File.peek:peek()| does not change the file position of the |:bz2.BZ2File:BZ2File|, it
        may change the position of the underlying file object (e.g. if the |:bz2.BZ2File:BZ2File| was
        constructed by passing a file object for *filename*).

      New in version 3.3.

   Deprecated since version 3.0: The keyword argument *buffering* was deprecated
   and is now ignored.

   Changed in version 3.1: Support for the |:reference/compound_stmts.txt/with:with| statement was added.

   Changed in version 3.3: The "fileno()", "readable()", "seekable()", "writable()"
   , "read1()" and "readinto()" methods were added.

   Changed in version 3.3: Support was added for *filename* being a |:glossary.txt/term-file-object:file object|
   instead of an actual filename.

   Changed in version 3.3: The "'a'" (append) mode was added, along with support
   for reading multi-stream files.

   Changed in version 3.4: The "'x'" (exclusive creation) mode was added.

   Changed in version 3.5: The |:library/io.txt/io.BufferedIOBase.read:read()| method now accepts an argument of "None".

   Changed in version 3.6: Accepts a |:glossary.txt/term-path-like-object:path-like object|.

# incremental-de-compression:Incremental (de)compression

*bz2.BZ2Compressor:class bz2.BZ2Compressor(compresslevel=9)*

   Create a new compressor object. This object may be used to compress data
   incrementally. For one-shot compression, use the |:bz2.compress:compress()| function instead.

   *compresslevel*, if given, must be an integer between "1" and "9". The default
   is "9".

   *bz2.BZ2Compressor.compress:compress(data)*

      Provide data to the compressor object. Returns a chunk of compressed data if
      possible, or an empty byte string otherwise.

      When you have finished providing data to the compressor, call the |:bz2.BZ2Compressor.flush:flush()|
      method to finish the compression process.

   *bz2.BZ2Compressor.flush:flush()*

      Finish the compression process. Returns the compressed data left in internal
      buffers.

      The compressor object may not be used after this method has been called.

*bz2.BZ2Decompressor:class bz2.BZ2Decompressor*

   Create a new decompressor object. This object may be used to decompress data
   incrementally. For one-shot compression, use the |:bz2.decompress:decompress()| function
   instead.

   Note:

     This class does not transparently handle inputs containing multiple compressed
     streams, unlike |:bz2.decompress:decompress()| and |:bz2.BZ2File:BZ2File|. If you need to decompress a multi-
     stream input with |:bz2.BZ2Decompressor:BZ2Decompressor|, you must use a new decompressor for each
     stream.

   *bz2.BZ2Decompressor.decompress:decompress(data, max_length=- 1)*

      Decompress *data* (a |:glossary.txt/term-bytes-like-object:bytes-like object|), returning uncompressed data as bytes.
      Some of *data* may be buffered internally, for use in later calls to
      |:bz2.decompress:decompress()|. The returned data should be concatenated with the output of any
      previous calls to |:bz2.decompress:decompress()|.

      If *max_length* is nonnegative, returns at most *max_length* bytes of
      decompressed data. If this limit is reached and further output can be produced,
      the |:bz2.BZ2Decompressor.needs_input:needs_input| attribute will be set to "False". In this case, the next call
      to |:bz2.BZ2Decompressor.decompress:decompress()| may provide *data* as "b''" to obtain more of the output.

      If all of the input data was decompressed and returned (either because this was
      less than *max_length* bytes, or because *max_length* was negative), the
      |:bz2.BZ2Decompressor.needs_input:needs_input| attribute will be set to "True".

      Attempting to decompress data after the end of stream is reached raises an *
      EOFError*.  Any data found after the end of the stream is ignored and saved in
      the |:bz2.BZ2Decompressor.unused_data:unused_data| attribute.

      Changed in version 3.5: Added the *max_length* parameter.

   *bz2.BZ2Decompressor.eof:eof*

      "True" if the end-of-stream marker has been reached.

      New in version 3.3.

   *bz2.BZ2Decompressor.unused_data:unused_data*

      Data found after the end of the compressed stream.

      If this attribute is accessed before the end of the stream has been reached, its
      value will be "b''".

   *bz2.BZ2Decompressor.needs_input:needs_input*

      "False" if the |:bz2.BZ2Decompressor.decompress:decompress()| method can provide more decompressed data before
      requiring new uncompressed input.

      New in version 3.5.

# one-shot-de-compression:One-shot (de)compression

*bz2.compress:bz2.compress(data, compresslevel=9)*

   Compress *data*, a |:glossary.txt/term-bytes-like-object:bytes-like object|.

   *compresslevel*, if given, must be an integer between "1" and "9". The default
   is "9".

   For incremental compression, use a |:bz2.BZ2Compressor:BZ2Compressor| instead.

*bz2.decompress:bz2.decompress(data)*

   Decompress *data*, a |:glossary.txt/term-bytes-like-object:bytes-like object|.

   If *data* is the concatenation of multiple compressed streams, decompress all of
   the streams.

   For incremental decompression, use a |:bz2.BZ2Decompressor:BZ2Decompressor| instead.

   Changed in version 3.3: Support for multi-stream inputs was added.

*|bz2-usage-examples:⚓|* # examples-of-usage:Examples of usage

Below are some examples of typical usage of the |:module-bz2:bz2| module.

Using |:bz2.compress:compress()| and |:bz2.decompress:decompress()| to demonstrate round-trip compression:

```python
>>> import bz2
>>> data = b"""\
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum."""
>>> c = bz2.compress(data)
>>> len(data) / len(c)  # Data compression ratio
1.513595166163142
>>> d = bz2.decompress(c)
>>> data == d  # Check equality to original object after round-trip
True
```

Using |:bz2.BZ2Compressor:BZ2Compressor| for incremental compression:

```python
>>> import bz2
>>> def gen_data(chunks=10, chunksize=1000):
...     """Yield incremental blocks of chunksize bytes."""
...     for _ in range(chunks):
...         yield b"z" * chunksize
...
>>> comp = bz2.BZ2Compressor()
>>> out = b""
>>> for chunk in gen_data():
...     # Provide data to the compressor object
...     out = out + comp.compress(chunk)
...
>>> # Finish the compression process.  Call this once you have
>>> # finished providing data to the compressor.
>>> out = out + comp.flush()
```

The example above uses a very “nonrandom” stream of data (a stream of *b”z”*
chunks).  Random data tends to compress poorly, while ordered, repetitive data
usually yields a high compression ratio.

Writing and reading a bzip2-compressed file in binary mode:

```python
>>> import bz2
>>> data = b"""\
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum."""
>>> with bz2.open("myfile.bz2", "wb") as f:
...     # Write compressed data to file
...     unused = f.write(data)
>>> with bz2.open("myfile.bz2", "rb") as f:
...     # Decompress data from file
...     content = f.read()
>>> content == data  # Check equality to original object after round-trip
True
```



