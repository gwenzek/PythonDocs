%hyperhelp title="zipimport" date="2021-07-11"
*|module-zipimport:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/zipimport.py:Lib/zipimport.py|

======================================================================

This module adds the ability to import Python modules ("*.py", "*.pyc") and
packages from ZIP-format archives. It is usually not needed to use the
|:module-zipimport:zipimport| module explicitly; it is automatically used by the built-in |:reference/simple_stmts.txt/import:import|
mechanism for |:library/sys.txt/sys.path:sys.path| items that are paths to ZIP archives.

Typically, |:library/sys.txt/sys.path:sys.path| is a list of directory names as strings.  This module also
allows an item of |:library/sys.txt/sys.path:sys.path| to be a string naming a ZIP file archive. The ZIP
archive can contain a subdirectory structure to support package imports, and a
path within the archive can be specified to only import from a subdirectory.
For example, the path "example.zip/lib/" would only import from the "lib/"
subdirectory within the archive.

Any files may be present in the ZIP archive, but only files ".py" and ".pyc" are
available for import.  ZIP import of dynamic modules (".pyd", ".so") is
disallowed. Note that if an archive only contains ".py" files, Python will not
attempt to modify the archive by adding the corresponding ".pyc" file, meaning
that if a ZIP archive doesn’t contain ".pyc" files, importing may be rather
slow.

Changed in version 3.8: Previously, ZIP archives with an archive comment were
not supported.

See also:

  |:pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT:PKZIP Application Note|*|pkzip-application-note:⚓|*
     Documentation on the ZIP file format by Phil Katz, the creator of the format and
     algorithms used.

  *|index-0:⚓|*
  |:www.python.org/dev/peps/pep-0273:PEP 273| - Import Modules from Zip Archives
     Written by James C. Ahlstrom, who also provided an implementation. Python 2.3
     follows the specification in *|index-1:⚓|* |:www.python.org/dev/peps/pep-0273:PEP 273|, but uses an implementation
     written by Just van Rossum that uses the import hooks described in *|index-2:⚓|*
     |:www.python.org/dev/peps/pep-0302:PEP 302|.

  *|index-3:⚓|*
  |:www.python.org/dev/peps/pep-0302:PEP 302| - New Import Hooks
     The PEP to add the import hooks that help this module work.

This module defines an exception:

*zipimport.ZipImportError:exception zipimport.ZipImportError*

   Exception raised by zipimporter objects. It’s a subclass of |:library/exceptions.txt/ImportError:ImportError|, so it
   can be caught as |:library/exceptions.txt/ImportError:ImportError|, too.

# zipimporter-objects:zipimporter Objects

|:zipimport.zipimporter:zipimporter| is the class for importing ZIP files.

*zipimport.zipimporter:class zipimport.zipimporter(archivepath)*

   Create a new zipimporter instance. *archivepath* must be a path to a ZIP file,
   or to a specific path within a ZIP file.  For example, an *archivepath* of "
   foo/bar.zip/lib" will look for modules in the "lib" directory inside the ZIP
   file "foo/bar.zip" (provided that it exists).

   |:zipimport.ZipImportError:ZipImportError| is raised if *archivepath* doesn’t point to a valid ZIP
   archive.

   *zipimport.zipimporter.find_module:find_module(fullname[, path])*

      Search for a module specified by *fullname*. *fullname* must be the fully
      qualified (dotted) module name. It returns the zipimporter instance itself if
      the module was found, or |:library/constants.txt/None:None| if it wasn’t. The optional *path* argument is
      ignored—it’s there for compatibility with the importer protocol.

   *zipimport.zipimporter.get_code:get_code(fullname)*

      Return the code object for the specified module. Raise |:zipimport.ZipImportError:ZipImportError| if the
      module couldn’t be found.

   *zipimport.zipimporter.get_data:get_data(pathname)*

      Return the data associated with *pathname*. Raise |:library/exceptions.txt/OSError:OSError| if the file wasn’t
      found.

      Changed in version 3.3: |:library/exceptions.txt/IOError:IOError| used to be raised instead of |:library/exceptions.txt/OSError:OSError|.

   *zipimport.zipimporter.get_filename:get_filename(fullname)*

      Return the value "__file__" would be set to if the specified module was
      imported. Raise |:zipimport.ZipImportError:ZipImportError| if the module couldn’t be found.

      New in version 3.1.

   *zipimport.zipimporter.get_source:get_source(fullname)*

      Return the source code for the specified module. Raise |:zipimport.ZipImportError:ZipImportError| if the
      module couldn’t be found, return |:library/constants.txt/None:None| if the archive does contain the module,
      but has no source for it.

   *zipimport.zipimporter.is_package:is_package(fullname)*

      Return "True" if the module specified by *fullname* is a package. Raise
      |:zipimport.ZipImportError:ZipImportError| if the module couldn’t be found.

   *zipimport.zipimporter.load_module:load_module(fullname)*

      Load the module specified by *fullname*. *fullname* must be the fully qualified
      (dotted) module name. It returns the imported module, or raises |:zipimport.ZipImportError:ZipImportError|
      if it wasn’t found.

   *zipimport.zipimporter.archive:archive*

      The file name of the importer’s associated ZIP file, without a possible subpath.

   *zipimport.zipimporter.prefix:prefix*

      The subpath within the ZIP file where modules are searched.  This is the empty
      string for zipimporter objects which point to the root of the ZIP file.

   The |:zipimport.zipimporter.archive:archive| and |:zipimport.zipimporter.prefix:prefix| attributes, when combined with a slash, equal the
   original *archivepath* argument given to the |:zipimport.zipimporter:zipimporter| constructor.

*|zipimport-examples:⚓|* # examples:Examples

Here is an example that imports a module from a ZIP archive - note that the
|:module-zipimport:zipimport| module is not explicitly used.

```rst
$ unzip -l example.zip
Archive:  example.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
     8467  11-26-02 22:30   jwzthreading.py
 --------                   -------
     8467                   1 file
$ ./python
Python 2.3 (#1, Aug 1 2003, 19:54:32)
>>> import sys
>>> sys.path.insert(0, 'example.zip')  # Add .zip file to front of path
>>> import jwzthreading
>>> jwzthreading.__file__
'example.zip/jwzthreading.py'
```



