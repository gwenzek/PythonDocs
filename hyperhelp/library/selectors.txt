%hyperhelp title="selectors" date="2021-07-11"
*|module-selectors:⚓|*

New in version 3.4.

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/selectors.py:Lib/selectors.py|

======================================================================

# introduction:Introduction

This module allows high-level and efficient I/O multiplexing, built upon the
|:library/select.txt/module-select:select| module primitives. Users are encouraged to use this module instead,
unless they want precise control over the OS-level primitives used.

It defines a |:selectors.BaseSelector:BaseSelector| abstract base class, along with several concrete
implementations (|:selectors.KqueueSelector:KqueueSelector|, |:selectors.EpollSelector:EpollSelector|…), that can be used to wait
for I/O readiness notification on multiple file objects. In the following, “file
object” refers to any object with a "fileno()" method, or a raw file descriptor.
See |:glossary.txt/term-file-object:file object|.

|:selectors.DefaultSelector:DefaultSelector| is an alias to the most efficient implementation available on
the current platform: this should be the default choice for most users.

Note:

  The type of file objects supported depends on the platform: on Windows, sockets
  are supported, but not pipes, whereas on Unix, both are supported (some other
  types may be supported as well, such as fifos or special file devices).

See also:

  |:library/select.txt/module-select:select|
     Low-level I/O multiplexing module.

# classes:Classes

Classes hierarchy:

```rst
BaseSelector
+-- SelectSelector
+-- PollSelector
+-- EpollSelector
+-- DevpollSelector
+-- KqueueSelector
```

In the following, *events* is a bitwise mask indicating which I/O events should
be waited for on a given file object. It can be a combination of the modules
constants below:

   +-------------------------+-------------------------------------------------+
   | Constant                | Meaning                                         |
   |=========================|=================================================|
   | "EVENT_READ"            | Available for read                              |
   +-------------------------+-------------------------------------------------+
   | "EVENT_WRITE"           | Available for write                             |
   +-------------------------+-------------------------------------------------+

*selectors.SelectorKey:class selectors.SelectorKey*

   A |:selectors.SelectorKey:SelectorKey| is a |:library/collections.txt/collections.namedtuple:namedtuple| used to associate a file object to its
   underlying file descriptor, selected event mask and attached data. It is
   returned by several |:selectors.BaseSelector:BaseSelector| methods.

   *selectors.SelectorKey.fileobj:fileobj*

      File object registered.

   *selectors.SelectorKey.fd:fd*

      Underlying file descriptor.

   *selectors.SelectorKey.events:events*

      Events that must be waited for on this file object.

   *selectors.SelectorKey.data:data*

      Optional opaque data associated to this file object: for example, this could be
      used to store a per-client session ID.

*selectors.BaseSelector:class selectors.BaseSelector*

   A |:selectors.BaseSelector:BaseSelector| is used to wait for I/O event readiness on multiple file
   objects. It supports file stream registration, unregistration, and a method to
   wait for I/O events on those streams, with an optional timeout. It’s an abstract
   base class, so cannot be instantiated. Use |:selectors.DefaultSelector:DefaultSelector| instead, or one of
   |:selectors.SelectSelector:SelectSelector|, |:selectors.KqueueSelector:KqueueSelector| etc. if you want to specifically use an
   implementation, and your platform supports it. |:selectors.BaseSelector:BaseSelector| and its concrete
   implementations support the |:glossary.txt/term-context-manager:context manager| protocol.

   *selectors.BaseSelector.register:abstractmethod register(fileobj, events, data=None)*

      Register a file object for selection, monitoring it for I/O events.

      *fileobj* is the file object to monitor.  It may either be an integer file
      descriptor or an object with a "fileno()" method. *events* is a bitwise mask of
      events to monitor. *data* is an opaque object.

      This returns a new |:selectors.SelectorKey:SelectorKey| instance, or raises a |:library/exceptions.txt/ValueError:ValueError| in case of
      invalid event mask or file descriptor, or |:library/exceptions.txt/KeyError:KeyError| if the file object is
      already registered.

   *selectors.BaseSelector.unregister:abstractmethod unregister(fileobj)*

      Unregister a file object from selection, removing it from monitoring. A file
      object shall be unregistered prior to being closed.

      *fileobj* must be a file object previously registered.

      This returns the associated |:selectors.SelectorKey:SelectorKey| instance, or raises a |:library/exceptions.txt/KeyError:KeyError| if *
      fileobj* is not registered.  It will raise |:library/exceptions.txt/ValueError:ValueError| if *fileobj* is invalid
      (e.g. it has no "fileno()" method or its "fileno()" method has an invalid return
      value).

   *selectors.BaseSelector.modify:modify(fileobj, events, data=None)*

      Change a registered file object’s monitored events or attached data.

      This is equivalent to "BaseSelector.unregister(fileobj)()" followed by "
      BaseSelector.register(fileobj, events, data)()", except that it can be
      implemented more efficiently.

      This returns a new |:selectors.SelectorKey:SelectorKey| instance, or raises a |:library/exceptions.txt/ValueError:ValueError| in case of
      invalid event mask or file descriptor, or |:library/exceptions.txt/KeyError:KeyError| if the file object is not
      registered.

   *selectors.BaseSelector.select:abstractmethod select(timeout=None)*

      Wait until some registered file objects become ready, or the timeout expires.

      If "timeout > 0", this specifies the maximum wait time, in seconds. If "timeout
      <= 0", the call won’t block, and will report the currently ready file objects.
      If *timeout* is "None", the call will block until a monitored file object
      becomes ready.

      This returns a list of "(key, events)" tuples, one for each ready file object.

      *key* is the |:selectors.SelectorKey:SelectorKey| instance corresponding to a ready file object. *
      events* is a bitmask of events ready on this file object.

      Note:

        This method can return before any file object becomes ready or the timeout has
        elapsed if the current process receives a signal: in this case, an empty list
        will be returned.

      Changed in version 3.5: The selector is now retried with a recomputed timeout
      when interrupted by a signal if the signal handler did not raise an exception
      (see *|index-0:⚓|* |:www.python.org/dev/peps/pep-0475:PEP 475| for the rationale), instead of returning an empty
      list of events before the timeout.

   *selectors.BaseSelector.close:close()*

      Close the selector.

      This must be called to make sure that any underlying resource is freed. The
      selector shall not be used once it has been closed.

   *selectors.BaseSelector.get_key:get_key(fileobj)*

      Return the key associated with a registered file object.

      This returns the |:selectors.SelectorKey:SelectorKey| instance associated to this file object, or
      raises |:library/exceptions.txt/KeyError:KeyError| if the file object is not registered.

   *selectors.BaseSelector.get_map:abstractmethod get_map()*

      Return a mapping of file objects to selector keys.

      This returns a |:library/collections.abc.txt/collections.abc.Mapping:Mapping| instance mapping registered file objects to their
      associated |:selectors.SelectorKey:SelectorKey| instance.

*selectors.DefaultSelector:class selectors.DefaultSelector*

   The default selector class, using the most efficient implementation available on
   the current platform. This should be the default choice for most users.

*selectors.SelectSelector:class selectors.SelectSelector*

   |:library/select.txt/select.select:select.select()|-based selector.

*selectors.PollSelector:class selectors.PollSelector*

   |:library/select.txt/select.poll:select.poll()|-based selector.

*selectors.EpollSelector:class selectors.EpollSelector*

   |:library/select.txt/select.epoll:select.epoll()|-based selector.

   *selectors.EpollSelector.fileno:fileno()*

      This returns the file descriptor used by the underlying |:library/select.txt/select.epoll:select.epoll()| object.

*selectors.DevpollSelector:class selectors.DevpollSelector*

   |:library/select.txt/select.devpoll:select.devpoll()|-based selector.

   *selectors.DevpollSelector.fileno:fileno()*

      This returns the file descriptor used by the underlying |:library/select.txt/select.devpoll:select.devpoll()|
      object.

   New in version 3.5.

*selectors.KqueueSelector:class selectors.KqueueSelector*

   |:library/select.txt/select.kqueue:select.kqueue()|-based selector.

   *selectors.KqueueSelector.fileno:fileno()*

      This returns the file descriptor used by the underlying |:library/select.txt/select.kqueue:select.kqueue()|
      object.

# examples:Examples

Here is a simple echo server implementation:

```rst
import selectors
import socket

sel = selectors.DefaultSelector()

def accept(sock, mask):
    conn, addr = sock.accept()  # Should be ready
    print('accepted', conn, 'from', addr)
    conn.setblocking(False)
    sel.register(conn, selectors.EVENT_READ, read)

def read(conn, mask):
    data = conn.recv(1000)  # Should be ready
    if data:
        print('echoing', repr(data), 'to', conn)
        conn.send(data)  # Hope it won't block
    else:
        print('closing', conn)
        sel.unregister(conn)
        conn.close()

sock = socket.socket()
sock.bind(('localhost', 1234))
sock.listen(100)
sock.setblocking(False)
sel.register(sock, selectors.EVENT_READ, accept)

while True:
    events = sel.select()
    for key, mask in events:
        callback = key.data
        callback(key.fileobj, mask)
```



