%hyperhelp title="gzip" date="2021-07-11"
*|module-gzip:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/gzip.py:Lib/gzip.py|

======================================================================

This module provides a simple interface to compress and decompress files just
like the GNU programs *gzip* and *gunzip* would.

The data compression is provided by the |:library/zlib.txt/module-zlib:zlib| module.

The |:module-gzip:gzip| module provides the |:gzip.GzipFile:GzipFile| class, as well as the |:gzip.open:open()|,
|:gzip.compress:compress()| and |:gzip.decompress:decompress()| convenience functions. The |:gzip.GzipFile:GzipFile| class
reads and writes *gzip*-format files, automatically compressing or decompressing
the data so that it looks like an ordinary |:glossary.txt/term-file-object:file object|.

Note that additional file formats which can be decompressed by the *gzip* and *
gunzip* programs, such  as those produced by *compress* and *pack*, are not
supported by this module.

The module defines the following items:

*gzip.open:gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)*

   Open a gzip-compressed file in binary or text mode, returning a |:glossary.txt/term-file-object:file
object|.

   The *filename* argument can be an actual filename (a |:library/stdtypes.txt/str:str| or |:library/stdtypes.txt/bytes:bytes| object),
   or an existing file object to read from or write to.

   The *mode* argument can be any of "'r'", "'rb'", "'a'", "'ab'", "'w'", "'wb'", "
   'x'" or "'xb'" for binary mode, or "'rt'", "'at'", "'wt'", or "'xt'" for text
   mode. The default is "'rb'".

   The *compresslevel* argument is an integer from 0 to 9, as for the |:gzip.GzipFile:GzipFile|
   constructor.

   For binary mode, this function is equivalent to the |:gzip.GzipFile:GzipFile| constructor: "
   GzipFile(filename, mode, compresslevel)". In this case, the *encoding*, *errors*
   and *newline* arguments must not be provided.

   For text mode, a |:gzip.GzipFile:GzipFile| object is created, and wrapped in an
   |:library/io.txt/io.TextIOWrapper:io.TextIOWrapper| instance with the specified encoding, error handling
   behavior, and line ending(s).

   Changed in version 3.3: Added support for *filename* being a file object,
   support for text mode, and the *encoding*, *errors* and *newline* arguments.

   Changed in version 3.4: Added support for the "'x'", "'xb'" and "'xt'" modes.

   Changed in version 3.6: Accepts a |:glossary.txt/term-path-like-object:path-like object|.

*gzip.BadGzipFile:exception gzip.BadGzipFile*

   An exception raised for invalid gzip files.  It inherits |:library/exceptions.txt/OSError:OSError|. |:library/exceptions.txt/EOFError:EOFError|
   and |:library/zlib.txt/zlib.error:zlib.error| can also be raised for invalid gzip files.

   New in version 3.8.

*gzip.GzipFile:class gzip.GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)*

   Constructor for the |:gzip.GzipFile:GzipFile| class, which simulates most of the methods of a
   |:glossary.txt/term-file-object:file object|, with the exception of the "truncate()" method.  At least one of *
   fileobj* and *filename* must be given a non-trivial value.

   The new class instance is based on *fileobj*, which can be a regular file, an
   |:library/io.txt/io.BytesIO:io.BytesIO| object, or any other object which simulates a file.  It defaults to
   "None", in which case *filename* is opened to provide a file object.

   When *fileobj* is not "None", the *filename* argument is only used to be
   included in the *gzip* file header, which may include the original filename of
   the uncompressed file.  It defaults to the filename of *fileobj*, if
   discernible; otherwise, it defaults to the empty string, and in this case the
   original filename is not included in the header.

   The *mode* argument can be any of "'r'", "'rb'", "'a'", "'ab'", "'w'", "'wb'", "
   'x'", or "'xb'", depending on whether the file will be read or written.  The
   default is the mode of *fileobj* if discernible; otherwise, the default is "'rb'
   ".

   Note that the file is always opened in binary mode. To open a compressed file in
   text mode, use |:gzip.open:open()| (or wrap your |:gzip.GzipFile:GzipFile| with an |:library/io.txt/io.TextIOWrapper:io.TextIOWrapper|).

   The *compresslevel* argument is an integer from "0" to "9" controlling the level
   of compression; "1" is fastest and produces the least compression, and "9" is
   slowest and produces the most compression. "0" is no compression. The default is
   "9".

   The *mtime* argument is an optional numeric timestamp to be written to the last
   modification time field in the stream when compressing.  It should only be
   provided in compression mode.  If omitted or "None", the current time is used.
   See the |:gzip.GzipFile.mtime:mtime| attribute for more details.

   Calling a |:gzip.GzipFile:GzipFile| object’s "close()" method does not close *fileobj*, since
   you might wish to append more material after the compressed data.  This also
   allows you to pass an |:library/io.txt/io.BytesIO:io.BytesIO| object opened for writing as *fileobj*, and
   retrieve the resulting memory buffer using the |:library/io.txt/io.BytesIO:io.BytesIO| object’s
   |:library/io.txt/io.BytesIO.getvalue:getvalue()| method.

   |:gzip.GzipFile:GzipFile| supports the |:library/io.txt/io.BufferedIOBase:io.BufferedIOBase| interface, including iteration and
   the |:reference/compound_stmts.txt/with:with| statement.  Only the "truncate()" method isn’t implemented.

   |:gzip.GzipFile:GzipFile| also provides the following method and attribute:

   *gzip.GzipFile.peek:peek(n)*

      Read *n* uncompressed bytes without advancing the file position. At most one
      single read on the compressed stream is done to satisfy the call.  The number of
      bytes returned may be more or less than requested.

      Note:

        While calling |:gzip.GzipFile.peek:peek()| does not change the file position of the |:gzip.GzipFile:GzipFile|, it
        may change the position of the underlying file object (e.g. if the |:gzip.GzipFile:GzipFile|
        was constructed with the *fileobj* parameter).

      New in version 3.2.

   *gzip.GzipFile.mtime:mtime*

      When decompressing, the value of the last modification time field in the most
      recently read header may be read from this attribute, as an integer.  The
      initial value before reading any headers is "None".

      All *gzip* compressed streams are required to contain this timestamp field.
      Some programs, such as *gunzip*, make use of the timestamp.  The format is the
      same as the return value of |:library/time.txt/time.time:time.time()| and the |:library/os.txt/os.stat_result.st_mtime:st_mtime| attribute of the
      object returned by |:library/os.txt/os.stat:os.stat()|.

   Changed in version 3.1: Support for the |:reference/compound_stmts.txt/with:with| statement was added, along with
   the *mtime* constructor argument and |:gzip.GzipFile.mtime:mtime| attribute.

   Changed in version 3.2: Support for zero-padded and unseekable files was added.

   Changed in version 3.3: The |:library/io.txt/io.BufferedIOBase.read1:io.BufferedIOBase.read1()| method is now
   implemented.

   Changed in version 3.4: Added support for the "'x'" and "'xb'" modes.

   Changed in version 3.5: Added support for writing arbitrary |:glossary.txt/term-bytes-like-object:bytes-like objects|
   . The |:library/io.txt/io.BufferedIOBase.read:read()| method now accepts an argument of "None".

   Changed in version 3.6: Accepts a |:glossary.txt/term-path-like-object:path-like object|.

*gzip.compress:gzip.compress(data, compresslevel=9, *, mtime=None)*

   Compress the *data*, returning a |:library/stdtypes.txt/bytes:bytes| object containing the compressed data.
   *compresslevel* and *mtime* have the same meaning as in the |:gzip.GzipFile:GzipFile|
   constructor above.

   New in version 3.2.

   Changed in version 3.8: Added the *mtime* parameter for reproducible output.

*gzip.decompress:gzip.decompress(data)*

   Decompress the *data*, returning a |:library/stdtypes.txt/bytes:bytes| object containing the uncompressed
   data.

   New in version 3.2.

# examples-of-usage:Examples of usage

Example of how to read a compressed file:

```rst
import gzip
with gzip.open('/home/joe/file.txt.gz', 'rb') as f:
    file_content = f.read()
```

Example of how to create a compressed GZIP file:

```rst
import gzip
content = b"Lots of content here"
with gzip.open('/home/joe/file.txt.gz', 'wb') as f:
    f.write(content)
```

Example of how to GZIP compress an existing file:

```rst
import gzip
import shutil
with open('/home/joe/file.txt', 'rb') as f_in:
    with gzip.open('/home/joe/file.txt.gz', 'wb') as f_out:
        shutil.copyfileobj(f_in, f_out)
```

Example of how to GZIP compress a binary string:

```rst
import gzip
s_in = b"Lots of content here"
s_out = gzip.compress(s_in)
```

See also:

  Module |:library/zlib.txt/module-zlib:zlib|
     The basic data compression module needed to support the *gzip* file format.

# command-line-interface:Command Line Interface

The |:module-gzip:gzip| module provides a simple command line interface to compress or
decompress files.

Once executed the |:module-gzip:gzip| module keeps the input file(s).

Changed in version 3.8: Add a new command line interface with a usage. By
default, when you will execute the CLI, the default compression level is 6.

## command-line-options:Command line options

*cmdoption-gzip-arg-file:file*

   If *file* is not specified, read from |:library/sys.txt/sys.stdin:sys.stdin|.

*cmdoption-gzip-fast:--fast*

   Indicates the fastest compression method (less compression).

*cmdoption-gzip-best:--best*

   Indicates the slowest compression method (best compression).

*cmdoption-gzip-d:-d, --decompress*

   Decompress the given file.

*cmdoption-gzip-h:-h, --help*

   Show the help message.



