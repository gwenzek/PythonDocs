%hyperhelp title="platform" date="2021-07-11"
*|module-platform:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/platform.py:Lib/platform.py|

======================================================================

Note:

  Specific platforms listed alphabetically, with Linux included in the Unix
  section.

# cross-platform:Cross Platform

*platform.architecture:platform.architecture(executable=sys.executable, bits='', linkage='')*

   Queries the given executable (defaults to the Python interpreter binary) for
   various architecture information.

   Returns a tuple "(bits, linkage)" which contain information about the bit
   architecture and the linkage format used for the executable. Both values are
   returned as strings.

   Values that cannot be determined are returned as given by the parameter presets.
   If bits is given as "''", the "sizeof(pointer)" (or "sizeof(long)" on Python
   version < 1.5.2) is used as indicator for the supported pointer size.

   The function relies on the system’s "file" command to do the actual work. This
   is available on most if not all Unix  platforms and some non-Unix platforms and
   then only if the executable points to the Python interpreter.  Reasonable
   defaults are used when the above needs are not met.

   Note:

     On Mac OS X (and perhaps other platforms), executable files may be universal
     files containing multiple architectures.To get at the “64-bitness” of the
     current interpreter, it is more reliable to query the |:library/sys.txt/sys.maxsize:sys.maxsize| attribute:

```rst
is_64bits = sys.maxsize > 2**32
```

*platform.machine:platform.machine()*

   Returns the machine type, e.g. "'i386'". An empty string is returned if the
   value cannot be determined.

*platform.node:platform.node()*

   Returns the computer’s network name (may not be fully qualified!). An empty
   string is returned if the value cannot be determined.

*platform.platform:platform.platform(aliased=0, terse=0)*

   Returns a single string identifying the underlying platform with as much useful
   information as possible.

   The output is intended to be *human readable* rather than machine parseable. It
   may look different on different platforms and this is intended.

   If *aliased* is true, the function will use aliases for various platforms that
   report system names which differ from their common names, for example SunOS will
   be reported as Solaris.  The |:platform.system_alias:system_alias()| function is used to implement
   this.

   Setting *terse* to true causes the function to return only the absolute minimum
   information needed to identify the platform.

   Changed in version 3.8: On macOS, the function now uses |:platform.mac_ver:mac_ver()|, if it
   returns a non-empty release string, to get the macOS version rather than the
   darwin version.

*platform.processor:platform.processor()*

   Returns the (real) processor name, e.g. "'amdk6'".

   An empty string is returned if the value cannot be determined. Note that many
   platforms do not provide this information or simply return the same value as for
   |:platform.machine:machine()|.  NetBSD does this.

*platform.python_build:platform.python_build()*

   Returns a tuple "(buildno, builddate)" stating the Python build number and date
   as strings.

*platform.python_compiler:platform.python_compiler()*

   Returns a string identifying the compiler used for compiling Python.

*platform.python_branch:platform.python_branch()*

   Returns a string identifying the Python implementation SCM branch.

*platform.python_implementation:platform.python_implementation()*

   Returns a string identifying the Python implementation. Possible return values
   are: ‘CPython’, ‘IronPython’, ‘Jython’, ‘PyPy’.

*platform.python_revision:platform.python_revision()*

   Returns a string identifying the Python implementation SCM revision.

*platform.python_version:platform.python_version()*

   Returns the Python version as string "'major.minor.patchlevel'".

   Note that unlike the Python "sys.version", the returned value will always
   include the patchlevel (it defaults to 0).

*platform.python_version_tuple:platform.python_version_tuple()*

   Returns the Python version as tuple "(major, minor, patchlevel)" of strings.

   Note that unlike the Python "sys.version", the returned value will always
   include the patchlevel (it defaults to "'0'").

*platform.release:platform.release()*

   Returns the system’s release, e.g. "'2.2.0'" or "'NT'" An empty string is
   returned if the value cannot be determined.

*platform.system:platform.system()*

   Returns the system/OS name, such as "'Linux'", "'Darwin'", "'Java'", "'Windows'"
   . An empty string is returned if the value cannot be determined.

*platform.system_alias:platform.system_alias(system, release, version)*

   Returns "(system, release, version)" aliased to common marketing names used for
   some systems.  It also does some reordering of the information in some cases
   where it would otherwise cause confusion.

*platform.version:platform.version()*

   Returns the system’s release version, e.g. "'#3 on degas'". An empty string is
   returned if the value cannot be determined.

*platform.uname:platform.uname()*

   Fairly portable uname interface. Returns a |:library/collections.txt/collections.namedtuple:namedtuple()| containing six
   attributes: |:platform.system:system|, |:platform.node:node|, |:platform.release:release|, |:platform.version:version|, |:platform.machine:machine|, and |:platform.processor:processor|.

   Note that this adds a sixth attribute (|:platform.processor:processor|) not present in the
   |:library/os.txt/os.uname:os.uname()| result.  Also, the attribute names are different for the first two
   attributes; |:library/os.txt/os.uname:os.uname()| names them "sysname" and "nodename".

   Entries which cannot be determined are set to "''".

   Changed in version 3.3: Result changed from a tuple to a namedtuple.

# java-platform:Java Platform

*platform.java_ver:platform.java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', ''))*

   Version interface for Jython.

   Returns a tuple "(release, vendor, vminfo, osinfo)" with *vminfo* being a tuple
   "(vm_name, vm_release, vm_vendor)" and *osinfo* being a tuple "(os_name,
   os_version, os_arch)". Values which cannot be determined are set to the defaults
   given as parameters (which all default to "''").

# windows-platform:Windows Platform

*platform.win32_ver:platform.win32_ver(release='', version='', csd='', ptype='')*

   Get additional version information from the Windows Registry and return a tuple
   "(release, version, csd, ptype)" referring to OS release, version number, CSD
   level (service pack) and OS type (multi/single processor).

   As a hint: *ptype* is "'Uniprocessor Free'" on single processor NT machines and
   "'Multiprocessor Free'" on multi processor machines. The *‘Free’* refers to the
   OS version being free of debugging code. It could also state *‘Checked’* which
   means the OS version uses debugging code, i.e. code that checks arguments,
   ranges, etc.

*platform.win32_edition:platform.win32_edition()*

   Returns a string representing the current Windows edition.  Possible values
   include but are not limited to "'Enterprise'", "'IoTUAP'", "'ServerStandard'",
   and "'nanoserver'".

   New in version 3.8.

*platform.win32_is_iot:platform.win32_is_iot()*

   Return "True" if the Windows edition returned by |:platform.win32_edition:win32_edition()| is recognized
   as an IoT edition.

   New in version 3.8.

# mac-os-platform:Mac OS Platform

*platform.mac_ver:platform.mac_ver(release='', versioninfo=('', '', ''), machine='')*

   Get Mac OS version information and return it as tuple "(release, versioninfo,
   machine)" with *versioninfo* being a tuple "(version, dev_stage,
   non_release_version)".

   Entries which cannot be determined are set to "''".  All tuple entries are
   strings.

# unix-platforms:Unix Platforms

*platform.libc_ver:platform.libc_ver(executable=sys.executable, lib='', version='', chunksize=16384)*

   Tries to determine the libc version against which the file executable (defaults
   to the Python interpreter) is linked.  Returns a tuple of strings "(lib,
   version)" which default to the given parameters in case the lookup fails.

   Note that this function has intimate knowledge of how different libc versions
   add symbols to the executable is probably only usable for executables compiled
   using *gcc*.

   The file is read and scanned in chunks of *chunksize* bytes.



