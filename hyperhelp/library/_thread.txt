%hyperhelp title="_thread" date="2021-07-11"
*|module-_thread:⚓|*

*|index-0:⚓|*

======================================================================

This module provides low-level primitives for working with multiple threads
(also called *light-weight processes* or *tasks*) — multiple threads of control
sharing their global data space.  For synchronization, simple locks (also called
*mutexes* or *binary semaphores*) are provided. The |:library/threading.txt/module-threading:threading| module provides
an easier to use and higher-level threading API built on top of this module.

*|index-1:⚓|*

Changed in version 3.7: This module used to be optional, it is now always
available.

This module defines the following constants and functions:

*thread.error:exception _thread.error*

   Raised on thread-specific errors.

   Changed in version 3.3: This is now a synonym of the built-in |:library/exceptions.txt/RuntimeError:RuntimeError|.

*thread.LockType:_thread.LockType*

   This is the type of lock objects.

*thread.start_new_thread:_thread.start_new_thread(function, args[, kwargs])*

   Start a new thread and return its identifier.  The thread executes the function
   *function* with the argument list *args* (which must be a tuple). The optional *
   kwargs* argument specifies a dictionary of keyword arguments.

   When the function returns, the thread silently exits.

   When the function terminates with an unhandled exception, |:library/sys.txt/sys.unraisablehook:sys.unraisablehook()|
   is called to handle the exception. The *object* attribute of the hook argument
   is *function*. By default, a stack trace is printed and then the thread exits
   (but other threads continue to run).

   When the function raises a |:library/exceptions.txt/SystemExit:SystemExit| exception, it is silently ignored.

   Changed in version 3.8: |:library/sys.txt/sys.unraisablehook:sys.unraisablehook()| is now used to handle unhandled
   exceptions.

*thread.interrupt_main:_thread.interrupt_main()*

   Simulate the effect of a |:library/signal.txt/signal.SIGINT:signal.SIGINT| signal arriving in the main thread. A
   thread can use this function to interrupt the main thread.

   If |:library/signal.txt/signal.SIGINT:signal.SIGINT| isn’t handled by Python (it was set to |:library/signal.txt/signal.SIG_DFL:signal.SIG_DFL| or
   |:library/signal.txt/signal.SIG_IGN:signal.SIG_IGN|), this function does nothing.

*thread.exit:_thread.exit()*

   Raise the |:library/exceptions.txt/SystemExit:SystemExit| exception.  When not caught, this will cause the thread
   to exit silently.

*thread.allocate_lock:_thread.allocate_lock()*

   Return a new lock object.  Methods of locks are described below.  The lock is
   initially unlocked.

*thread.get_ident:_thread.get_ident()*

   Return the ‘thread identifier’ of the current thread.  This is a nonzero
   integer.  Its value has no direct meaning; it is intended as a magic cookie to
   be used e.g. to index a dictionary of thread-specific data.  Thread identifiers
   may be recycled when a thread exits and another thread is created.

*thread.get_native_id:_thread.get_native_id()*

   Return the native integral Thread ID of the current thread assigned by the
   kernel. This is a non-negative integer. Its value may be used to uniquely
   identify this particular thread system-wide (until the thread terminates, after
   which the value may be recycled by the OS).

   |:library/intro.txt/availability:Availability|: Windows, FreeBSD, Linux, macOS, OpenBSD, NetBSD, AIX.

   New in version 3.8.

*thread.stack_size:_thread.stack_size([size])*

   Return the thread stack size used when creating new threads.  The optional *size
   * argument specifies the stack size to be used for subsequently created threads,
   and must be 0 (use platform or configured default) or a positive integer value
   of at least 32,768 (32 KiB). If *size* is not specified, 0 is used.  If changing
   the thread stack size is unsupported, a |:library/exceptions.txt/RuntimeError:RuntimeError| is raised.  If the
   specified stack size is invalid, a |:library/exceptions.txt/ValueError:ValueError| is raised and the stack size is
   unmodified.  32 KiB is currently the minimum supported stack size value to
   guarantee sufficient stack space for the interpreter itself.  Note that some
   platforms may have particular restrictions on values for the stack size, such as
   requiring a minimum stack size > 32 KiB or requiring allocation in multiples of
   the system memory page size - platform documentation should be referred to for
   more information (4 KiB pages are common; using multiples of 4096 for the stack
   size is the suggested approach in the absence of more specific information).

   |:library/intro.txt/availability:Availability|: Windows, systems with POSIX threads.

*thread.TIMEOUT_MAX:_thread.TIMEOUT_MAX*

   The maximum value allowed for the *timeout* parameter of "Lock.acquire()".
   Specifying a timeout greater than this value will raise an |:library/exceptions.txt/OverflowError:OverflowError|.

   New in version 3.2.

Lock objects have the following methods:

*thread.lock.acquire:lock.acquire(waitflag=1, timeout=- 1)*

   Without any optional argument, this method acquires the lock unconditionally, if
   necessary waiting until it is released by another thread (only one thread at a
   time can acquire a lock — that’s their reason for existence).

   If the integer *waitflag* argument is present, the action depends on its value:
   if it is zero, the lock is only acquired if it can be acquired immediately
   without waiting, while if it is nonzero, the lock is acquired unconditionally as
   above.

   If the floating-point *timeout* argument is present and positive, it specifies
   the maximum wait time in seconds before returning.  A negative *timeout*
   argument specifies an unbounded wait.  You cannot specify a *timeout* if *
   waitflag* is zero.

   The return value is "True" if the lock is acquired successfully, "False" if not.

   Changed in version 3.2: The *timeout* parameter is new.

   Changed in version 3.2: Lock acquires can now be interrupted by signals on
   POSIX.

*thread.lock.release:lock.release()*

   Releases the lock.  The lock must have been acquired earlier, but not
   necessarily by the same thread.

*thread.lock.locked:lock.locked()*

   Return the status of the lock: "True" if it has been acquired by some thread, "
   False" if not.

In addition to these methods, lock objects can also be used via the |:reference/compound_stmts.txt/with:with|
statement, e.g.:

```rst
import _thread

a_lock = _thread.allocate_lock()

with a_lock:
    print("a_lock is locked while this executes")
```

*Caveats:*

   *|index-2:⚓|*

* Threads interact strangely with interrupts: the |:library/exceptions.txt/KeyboardInterrupt:KeyboardInterrupt| exception
  will be received by an arbitrary thread.  (When the |:library/signal.txt/module-signal:signal| module is
  available, interrupts always go to the main thread.)

* Calling |:library/sys.txt/sys.exit:sys.exit()| or raising the |:library/exceptions.txt/SystemExit:SystemExit| exception is equivalent to
  calling |:thread.exit:_thread.exit()|.

* It is not possible to interrupt the "acquire()" method on a lock — the
  |:library/exceptions.txt/KeyboardInterrupt:KeyboardInterrupt| exception will happen after the lock has been acquired.

* When the main thread exits, it is system defined whether the other threads
  survive.  On most systems, they are killed without executing |:reference/compound_stmts.txt/try:try| … |:reference/compound_stmts.txt/finally:finally|
  clauses or executing object destructors.

* When the main thread exits, it does not do any of its usual cleanup (except that
  |:reference/compound_stmts.txt/try:try| … |:reference/compound_stmts.txt/finally:finally| clauses are honored), and the standard I/O files are not
  flushed.



