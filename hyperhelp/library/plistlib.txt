%hyperhelp title="plistlib" date="2021-07-11"
*|module-plistlib:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/plistlib.py:Lib/plistlib.py|

*|index-0:⚓|*

======================================================================

This module provides an interface for reading and writing the “property list”
files used mainly by Mac OS X and supports both binary and XML plist files.

The property list (".plist") file format is a simple serialization supporting
basic object types, like dictionaries, lists, numbers and strings.  Usually the
top level object is a dictionary.

To write out and to parse a plist file, use the |:plistlib.dump:dump()| and |:plistlib.load:load()| functions.

To work with plist data in bytes objects, use |:plistlib.dumps:dumps()| and |:plistlib.loads:loads()|.

Values can be strings, integers, floats, booleans, tuples, lists, dictionaries
(but only with string keys), |:plistlib.Data:Data|, |:library/stdtypes.txt/bytes:bytes|, "bytesarray" or
|:library/datetime.txt/datetime.datetime:datetime.datetime| objects.

Changed in version 3.4: New API, old API deprecated.  Support for binary format
plists added.

Changed in version 3.8: Support added for reading and writing |:plistlib.UID:UID| tokens in
binary plists as used by NSKeyedArchiver and NSKeyedUnarchiver.

See also:

  |:developer.apple.com/library/content/documentation/Cocoa/Conceptual/PropertyLists:PList manual page|*|plist-manual-page:⚓|*
     Apple’s documentation of the file format.

This module defines the following functions:

*plistlib.load:plistlib.load(fp, *, fmt=None, use_builtin_types=True, dict_type=dict)*

   Read a plist file. *fp* should be a readable and binary file object. Return the
   unpacked root object (which usually is a dictionary).

   The *fmt* is the format of the file and the following values are valid:

   * |:library/constants.txt/None:None|: Autodetect the file format

   * |:plistlib.FMT_XML:FMT_XML|: XML file format

   * |:plistlib.FMT_BINARY:FMT_BINARY|: Binary plist format

   If *use_builtin_types* is true (the default) binary data will be returned as
   instances of |:library/stdtypes.txt/bytes:bytes|, otherwise it is returned as instances of |:plistlib.Data:Data|.

   The *dict_type* is the type used for dictionaries that are read from the plist
   file.

   XML data for the |:plistlib.FMT_XML:FMT_XML| format is parsed using the Expat parser from
   |:library/pyexpat.txt/module-xml.parsers.expat:xml.parsers.expat| – see its documentation for possible exceptions on ill-
   formed XML.  Unknown elements will simply be ignored by the plist parser.

   The parser for the binary format raises "InvalidFileException" when the file
   cannot be parsed.

   New in version 3.4.

*plistlib.loads:plistlib.loads(data, *, fmt=None, use_builtin_types=True, dict_type=dict)*

   Load a plist from a bytes object. See |:plistlib.load:load()| for an explanation of the keyword
   arguments.

   New in version 3.4.

*plistlib.dump:plistlib.dump(value, fp, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)*

   Write *value* to a plist file. *Fp* should be a writable, binary file object.

   The *fmt* argument specifies the format of the plist file and can be one of the
   following values:

   * |:plistlib.FMT_XML:FMT_XML|: XML formatted plist file

   * |:plistlib.FMT_BINARY:FMT_BINARY|: Binary formatted plist file

   When *sort_keys* is true (the default) the keys for dictionaries will be written
   to the plist in sorted order, otherwise they will be written in the iteration
   order of the dictionary.

   When *skipkeys* is false (the default) the function raises |:library/exceptions.txt/TypeError:TypeError| when a
   key of a dictionary is not a string, otherwise such keys are skipped.

   A |:library/exceptions.txt/TypeError:TypeError| will be raised if the object is of an unsupported type or a
   container that contains objects of unsupported types.

   An |:library/exceptions.txt/OverflowError:OverflowError| will be raised for integer values that cannot be represented
   in (binary) plist files.

   New in version 3.4.

*plistlib.dumps:plistlib.dumps(value, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)*

   Return *value* as a plist-formatted bytes object. See the documentation for
   |:plistlib.dump:dump()| for an explanation of the keyword arguments of this function.

   New in version 3.4.

The following functions are deprecated:

*plistlib.readPlist:plistlib.readPlist(pathOrFile)*

   Read a plist file. *pathOrFile* may be either a file name or a (readable and
   binary) file object. Returns the unpacked root object (which usually is a
   dictionary).

   This function calls |:plistlib.load:load()| to do the actual work, see the documentation of
   |:plistlib.load:that function| for an explanation of the keyword arguments.

   Deprecated since version 3.4: Use |:plistlib.load:load()| instead.

   Changed in version 3.7: Dict values in the result are now normal dicts.  You no
   longer can use attribute access to access items of these dictionaries.

*plistlib.writePlist:plistlib.writePlist(rootObject, pathOrFile)*

   Write *rootObject* to an XML plist file. *pathOrFile* may be either a file name
   or a (writable and binary) file object

   Deprecated since version 3.4: Use |:plistlib.dump:dump()| instead.

*plistlib.readPlistFromBytes:plistlib.readPlistFromBytes(data)*

   Read a plist data from a bytes object.  Return the root object.

   See |:plistlib.load:load()| for a description of the keyword arguments.

   Deprecated since version 3.4: Use |:plistlib.loads:loads()| instead.

   Changed in version 3.7: Dict values in the result are now normal dicts.  You no
   longer can use attribute access to access items of these dictionaries.

*plistlib.writePlistToBytes:plistlib.writePlistToBytes(rootObject)*

   Return *rootObject* as an XML plist-formatted bytes object.

   Deprecated since version 3.4: Use |:plistlib.dumps:dumps()| instead.

The following classes are available:

*plistlib.Data:class plistlib.Data(data)*

   Return a “data” wrapper object around the bytes object *data*.  This is used in
   functions converting from/to plists to represent the "<data>" type available in
   plists.

   It has one attribute, "data", that can be used to retrieve the Python bytes
   object stored in it.

   Deprecated since version 3.4: Use a |:library/stdtypes.txt/bytes:bytes| object instead.

*plistlib.UID:class plistlib.UID(data)*

   Wraps an |:library/functions.txt/int:int|.  This is used when reading or writing NSKeyedArchiver encoded
   data, which contains UID (see PList manual).

   It has one attribute, "data", which can be used to retrieve the int value of the
   UID.  "data" must be in the range *0 <= data < 2**64*.

   New in version 3.8.

The following constants are available:

*plistlib.FMT_XML:plistlib.FMT_XML*

   The XML format for plist files.

   New in version 3.4.

*plistlib.FMT_BINARY:plistlib.FMT_BINARY*

   The binary format for plist files

   New in version 3.4.

# examples:Examples

Generating a plist:

```rst
pl = dict(
    aString = "Doodah",
    aList = ["A", "B", 12, 32.1, [1, 2, 3]],
    aFloat = 0.1,
    anInt = 728,
    aDict = dict(
        anotherString = "<hello & hi there!>",
        aThirdString = "M\xe4ssig, Ma\xdf",
        aTrueValue = True,
        aFalseValue = False,
    ),
    someData = b"<binary gunk>",
    someMoreData = b"<lots of binary gunk>" * 10,
    aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),
)
with open(fileName, 'wb') as fp:
    dump(pl, fp)
```

Parsing a plist:

```rst
with open(fileName, 'rb') as fp:
    pl = load(fp)
print(pl["aKey"])
```



