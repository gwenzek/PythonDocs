%hyperhelp title="xmlrpc.server" date="2021-07-11"
*|module-xmlrpc.server:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/xmlrpc/server.py:Lib/xmlrpc/server.py|

======================================================================

The |:module-xmlrpc.server:xmlrpc.server| module provides a basic server framework for XML-RPC servers
written in Python.  Servers can either be free standing, using
|:xmlrpc.server.SimpleXMLRPCServer:SimpleXMLRPCServer|, or embedded in a CGI environment, using
|:xmlrpc.server.CGIXMLRPCRequestHandler:CGIXMLRPCRequestHandler|.

Warning:

  The |:module-xmlrpc.server:xmlrpc.server| module is not secure against maliciously constructed data.
  If you need to parse untrusted or unauthenticated data see |:library/xml.txt/xml-vulnerabilities:XML vulnerabilities|
  .

*xmlrpc.server.SimpleXMLRPCServer:class xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)*

   Create a new server instance.  This class provides methods for registration of
   functions that can be called by the XML-RPC protocol.  The *requestHandler*
   parameter should be a factory for request handler instances; it defaults to
   |:xmlrpc.server.SimpleXMLRPCRequestHandler:SimpleXMLRPCRequestHandler|.  The *addr* and *requestHandler* parameters are
   passed to the |:library/socketserver.txt/socketserver.TCPServer:socketserver.TCPServer| constructor.  If *logRequests* is true
   (the default), requests will be logged; setting this parameter to false will
   turn off logging.   The *allow_none* and *encoding* parameters are passed on to
   |:library/xmlrpc.client.txt/module-xmlrpc.client:xmlrpc.client| and control the XML-RPC responses that will be returned from the
   server. The *bind_and_activate* parameter controls whether "server_bind()" and "
   server_activate()" are called immediately by the constructor; it defaults to
   true. Setting it to false allows code to manipulate the *allow_reuse_address*
   class variable before the address is bound. The *use_builtin_types* parameter is
   passed to the |:library/xmlrpc.client.txt/xmlrpc.client.loads:loads()| function and controls which types are processed when
   date/times values or binary data are received; it defaults to false.

   Changed in version 3.3: The *use_builtin_types* flag was added.

*xmlrpc.server.CGIXMLRPCRequestHandler:class xmlrpc.server.CGIXMLRPCRequestHandler(allow_none=False, encoding=None, use_builtin_types=False)*

   Create a new instance to handle XML-RPC requests in a CGI environment.  The *
   allow_none* and *encoding* parameters are passed on to |:library/xmlrpc.client.txt/module-xmlrpc.client:xmlrpc.client| and
   control the XML-RPC responses that will be returned from the server. The *
   use_builtin_types* parameter is passed to the |:library/xmlrpc.client.txt/xmlrpc.client.loads:loads()| function and controls
   which types are processed when date/times values or binary data are received; it
   defaults to false.

   Changed in version 3.3: The *use_builtin_types* flag was added.

*xmlrpc.server.SimpleXMLRPCRequestHandler:class xmlrpc.server.SimpleXMLRPCRequestHandler*

   Create a new request handler instance.  This request handler supports "POST"
   requests and modifies logging so that the *logRequests* parameter to the
   |:xmlrpc.server.SimpleXMLRPCServer:SimpleXMLRPCServer| constructor parameter is honored.

# simplexmlrpcserver-objects:SimpleXMLRPCServer Objects

The |:xmlrpc.server.SimpleXMLRPCServer:SimpleXMLRPCServer| class is based on |:library/socketserver.txt/socketserver.TCPServer:socketserver.TCPServer| and provides
a means of creating simple, stand alone XML-RPC servers.

*xmlrpc.server.SimpleXMLRPCServer.register_function:SimpleXMLRPCServer.register_function(function=None, name=None)*

   Register a function that can respond to XML-RPC requests.  If *name* is given,
   it will be the method name associated with *function*, otherwise "
   function.__name__" will be used.  *name* is a string, and may contain characters
   not legal in Python identifiers, including the period character.

   This method can also be used as a decorator.  When used as a decorator, *name*
   can only be given as a keyword argument to register *function* under *name*.  If
   no *name* is given, "function.__name__" will be used.

   Changed in version 3.7: |:xmlrpc.server.SimpleXMLRPCServer.register_function:register_function()| can be used as a decorator.

*xmlrpc.server.SimpleXMLRPCServer.register_instance:SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)*

   Register an object which is used to expose method names which have not been
   registered using |:xmlrpc.server.SimpleXMLRPCServer.register_function:register_function()|.  If *instance* contains a "_dispatch()"
   method, it is called with the requested method name and the parameters from the
   request.  Its API is "def _dispatch(self, method, params)" (note that *params*
   does not represent a variable argument list).  If it calls an underlying
   function to perform its task, that function is called as "func(*params)",
   expanding the parameter list. The return value from "_dispatch()" is returned to
   the client as the result.  If *instance* does not have a "_dispatch()" method,
   it is searched for an attribute matching the name of the requested method.

   If the optional *allow_dotted_names* argument is true and the instance does not
   have a "_dispatch()" method, then if the requested method name contains periods,
   each component of the method name is searched for individually, with the effect
   that a simple hierarchical search is performed.  The value found from this
   search is then called with the parameters from the request, and the return value
   is passed back to the client.

   Warning:

     Enabling the *allow_dotted_names* option allows intruders to access your
     module’s global variables and may allow intruders to execute arbitrary code on
     your machine.  Only use this option on a secure, closed network.

*xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions:SimpleXMLRPCServer.register_introspection_functions()*

   Registers the XML-RPC introspection functions "system.listMethods", "
   system.methodHelp" and "system.methodSignature".

*xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions:SimpleXMLRPCServer.register_multicall_functions()*

   Registers the XML-RPC multicall function system.multicall.

*xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths:SimpleXMLRPCRequestHandler.rpc_paths*

   An attribute value that must be a tuple listing valid path portions of the URL
   for receiving XML-RPC requests.  Requests posted to other paths will result in a
   404 “no such page” HTTP error.  If this tuple is empty, all paths will be
   considered valid. The default value is "('/', '/RPC2')".

## simplexmlrpcserver-example:SimpleXMLRPCServer Example

Server code:

```rst
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
with SimpleXMLRPCServer(('localhost', 8000),
                        requestHandler=RequestHandler) as server:
    server.register_introspection_functions()

    # Register pow() function; this will use the value of
    # pow.__name__ as the name, which is just 'pow'.
    server.register_function(pow)

    # Register a function under a different name
    def adder_function(x, y):
        return x + y
    server.register_function(adder_function, 'add')

    # Register an instance; all the methods of the instance are
    # published as XML-RPC methods (in this case, just 'mul').
    class MyFuncs:
        def mul(self, x, y):
            return x * y

    server.register_instance(MyFuncs())

    # Run the server's main loop
    server.serve_forever()
```

The following client code will call the methods made available by the preceding
server:

```rst
import xmlrpc.client

s = xmlrpc.client.ServerProxy('http://localhost:8000')
print(s.pow(2,3))  # Returns 2**3 = 8
print(s.add(2,3))  # Returns 5
print(s.mul(5,2))  # Returns 5*2 = 10

# Print list of available methods
print(s.system.listMethods())
```

"register_function()" can also be used as a decorator. The previous server
example can register functions in a decorator way:

```rst
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler

class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

with SimpleXMLRPCServer(('localhost', 8000),
                        requestHandler=RequestHandler) as server:
    server.register_introspection_functions()

    # Register pow() function; this will use the value of
    # pow.__name__ as the name, which is just 'pow'.
    server.register_function(pow)

    # Register a function under a different name, using
    # register_function as a decorator. *name* can only be given
    # as a keyword argument.
    @server.register_function(name='add')
    def adder_function(x, y):
        return x + y

    # Register a function under function.__name__.
    @server.register_function
    def mul(x, y):
        return x * y

    server.serve_forever()
```

The following example included in the "Lib/xmlrpc/server.py" module shows a
server allowing dotted names and registering a multicall function.

Warning:

  Enabling the *allow_dotted_names* option allows intruders to access your
  module’s global variables and may allow intruders to execute arbitrary code on
  your machine.  Only use this example only within a secure, closed network.

```rst
import datetime

class ExampleService:
    def getData(self):
        return '42'

    class currentTime:
        @staticmethod
        def getCurrentTime():
            return datetime.datetime.now()

with SimpleXMLRPCServer(("localhost", 8000)) as server:
    server.register_function(pow)
    server.register_function(lambda x,y: x+y, 'add')
    server.register_instance(ExampleService(), allow_dotted_names=True)
    server.register_multicall_functions()
    print('Serving XML-RPC on localhost port 8000')
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nKeyboard interrupt received, exiting.")
        sys.exit(0)
```

This ExampleService demo can be invoked from the command line:

```rst
python -m xmlrpc.server
```

The client that interacts with the above server is included in *
Lib/xmlrpc/client.py*:

```rst
server = ServerProxy("http://localhost:8000")

try:
    print(server.currentTime.getCurrentTime())
except Error as v:
    print("ERROR", v)

multi = MultiCall(server)
multi.getData()
multi.pow(2,9)
multi.add(1,2)
try:
    for response in multi():
        print(response)
except Error as v:
    print("ERROR", v)
```

This client which interacts with the demo XMLRPC server can be invoked as:

```rst
python -m xmlrpc.client
```

# cgixmlrpcrequesthandler:CGIXMLRPCRequestHandler

The |:xmlrpc.server.CGIXMLRPCRequestHandler:CGIXMLRPCRequestHandler| class can be used to handle XML-RPC requests sent
to Python CGI scripts.

*xmlrpc.server.CGIXMLRPCRequestHandler.register_function:CGIXMLRPCRequestHandler.register_function(function=None, name=None)*

   Register a function that can respond to XML-RPC requests.  If *name* is given,
   it will be the method name associated with *function*, otherwise "
   function.__name__" will be used.  *name* is a string, and may contain characters
   not legal in Python identifiers, including the period character.

   This method can also be used as a decorator.  When used as a decorator, *name*
   can only be given as a keyword argument to register *function* under *name*.  If
   no *name* is given, "function.__name__" will be used.

   Changed in version 3.7: |:xmlrpc.server.CGIXMLRPCRequestHandler.register_function:register_function()| can be used as a decorator.

*xmlrpc.server.CGIXMLRPCRequestHandler.register_instance:CGIXMLRPCRequestHandler.register_instance(instance)*

   Register an object which is used to expose method names  which have not been
   registered using |:xmlrpc.server.CGIXMLRPCRequestHandler.register_function:register_function()|. If  instance contains a "_dispatch()"
   method, it is called with the  requested method name and the parameters from the
   request; the return value is returned to the client as the result. If instance
   does not have a "_dispatch()" method, it is searched for an attribute matching
   the name of the requested method; if  the requested method name contains
   periods, each  component of the method name is searched for individually,  with
   the effect that a simple hierarchical search is performed. The value found from
   this search is then called with the  parameters from the request, and the return
   value is passed  back to the client.

*xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions:CGIXMLRPCRequestHandler.register_introspection_functions()*

   Register the XML-RPC introspection functions  "system.listMethods", "
   system.methodHelp" and  "system.methodSignature".

*xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions:CGIXMLRPCRequestHandler.register_multicall_functions()*

   Register the XML-RPC multicall function "system.multicall".

*xmlrpc.server.CGIXMLRPCRequestHandler.handle_request:CGIXMLRPCRequestHandler.handle_request(request_text=None)*

   Handle an XML-RPC request. If *request_text* is given, it should be the POST
   data provided by the HTTP server,  otherwise the contents of stdin will be used.

Example:

```rst
class MyFuncs:
    def mul(self, x, y):
        return x * y


handler = CGIXMLRPCRequestHandler()
handler.register_function(pow)
handler.register_function(lambda x,y: x+y, 'add')
handler.register_introspection_functions()
handler.register_instance(MyFuncs())
handler.handle_request()
```

# documenting-xmlrpc-server:Documenting XMLRPC server

These classes extend the above classes to serve HTML documentation in response
to HTTP GET requests.  Servers can either be free standing, using
|:xmlrpc.server.DocXMLRPCServer:DocXMLRPCServer|, or embedded in a CGI environment, using
|:xmlrpc.server.DocCGIXMLRPCRequestHandler:DocCGIXMLRPCRequestHandler|.

*xmlrpc.server.DocXMLRPCServer:class xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=True)*

   Create a new server instance. All parameters have the same meaning as for
   |:xmlrpc.server.SimpleXMLRPCServer:SimpleXMLRPCServer|; *requestHandler* defaults to |:xmlrpc.server.DocXMLRPCRequestHandler:DocXMLRPCRequestHandler|.

   Changed in version 3.3: The *use_builtin_types* flag was added.

*xmlrpc.server.DocCGIXMLRPCRequestHandler:class xmlrpc.server.DocCGIXMLRPCRequestHandler*

   Create a new instance to handle XML-RPC requests in a CGI environment.

*xmlrpc.server.DocXMLRPCRequestHandler:class xmlrpc.server.DocXMLRPCRequestHandler*

   Create a new request handler instance. This request handler supports XML-RPC
   POST requests, documentation GET requests, and modifies logging so that the *
   logRequests* parameter to the |:xmlrpc.server.DocXMLRPCServer:DocXMLRPCServer| constructor parameter is
   honored.

*|doc-xmlrpc-servers:⚓|* # docxmlrpcserver-objects:DocXMLRPCServer Objects

The |:xmlrpc.server.DocXMLRPCServer:DocXMLRPCServer| class is derived from |:xmlrpc.server.SimpleXMLRPCServer:SimpleXMLRPCServer| and provides a
means of creating self-documenting, stand alone XML-RPC servers. HTTP POST
requests are handled as XML-RPC method calls. HTTP GET requests are handled by
generating pydoc-style HTML documentation. This allows a server to provide its
own web-based documentation.

*xmlrpc.server.DocXMLRPCServer.set_server_title:DocXMLRPCServer.set_server_title(server_title)*

   Set the title used in the generated HTML documentation. This title will be used
   inside the HTML “title” element.

*xmlrpc.server.DocXMLRPCServer.set_server_name:DocXMLRPCServer.set_server_name(server_name)*

   Set the name used in the generated HTML documentation. This name will appear at
   the top of the generated documentation inside a “h1” element.

*xmlrpc.server.DocXMLRPCServer.set_server_documentation:DocXMLRPCServer.set_server_documentation(server_documentation)*

   Set the description used in the generated HTML documentation. This description
   will appear as a paragraph, below the server name, in the documentation.

# doccgixmlrpcrequesthandler:DocCGIXMLRPCRequestHandler

The |:xmlrpc.server.DocCGIXMLRPCRequestHandler:DocCGIXMLRPCRequestHandler| class is derived from |:xmlrpc.server.CGIXMLRPCRequestHandler:CGIXMLRPCRequestHandler|
and provides a means of creating self-documenting, XML-RPC CGI scripts. HTTP
POST requests are handled as XML-RPC method calls. HTTP GET requests are handled
by generating pydoc-style HTML documentation. This allows a server to provide
its own web-based documentation.

*xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title:DocCGIXMLRPCRequestHandler.set_server_title(server_title)*

   Set the title used in the generated HTML documentation. This title will be used
   inside the HTML “title” element.

*xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name:DocCGIXMLRPCRequestHandler.set_server_name(server_name)*

   Set the name used in the generated HTML documentation. This name will appear at
   the top of the generated documentation inside a “h1” element.

*xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation:DocCGIXMLRPCRequestHandler.set_server_documentation(server_documentation)*

   Set the description used in the generated HTML documentation. This description
   will appear as a paragraph, below the server name, in the documentation.



