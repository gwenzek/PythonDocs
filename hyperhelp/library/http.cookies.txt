%hyperhelp title="http.cookies" date="2021-07-11"
*|module-http.cookies:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/http/cookies.py:Lib/http/cookies.py|

======================================================================

The |:module-http.cookies:http.cookies| module defines classes for abstracting the concept of
cookies, an HTTP state management mechanism. It supports both simple string-only
cookies, and provides an abstraction for having any serializable data-type as
cookie value.

The module formerly strictly applied the parsing rules described in the
*|index-0:⚓|* |:tools.ietf.org/html/rfc2109.html:RFC 2109| and *|index-1:⚓|* |:tools.ietf.org/html/rfc2068.html:RFC 2068| specifications.  It has
since been discovered that MSIE 3.0x doesn’t follow the character rules outlined
in those specs and also many current day browsers and servers have relaxed
parsing rules when comes to Cookie handling.  As a result, the parsing rules
used are a bit less strict.

The character set, |:library/string.txt/string.ascii_letters:string.ascii_letters|, |:library/string.txt/string.digits:string.digits| and "!#$%&'*+-.^_`|~:
" denote the set of valid characters allowed by this module in Cookie name (as
|:http.cookies.Morsel.key:key|).

Changed in version 3.3: Allowed ‘:’ as a valid Cookie name character.

Note:

  On encountering an invalid cookie, |:http.cookies.CookieError:CookieError| is raised, so if your cookie
  data comes from a browser you should always prepare for invalid data and catch
  |:http.cookies.CookieError:CookieError| on parsing.

*http.cookies.CookieError:exception http.cookies.CookieError*

   Exception failing because of *|index-2:⚓|* |:tools.ietf.org/html/rfc2109.html:RFC 2109| invalidity: incorrect
   attributes, incorrect *Set-Cookie* header, etc.

*http.cookies.BaseCookie:class http.cookies.BaseCookie([input])*

   This class is a dictionary-like object whose keys are strings and whose values
   are |:http.cookies.Morsel:Morsel| instances. Note that upon setting a key to a value, the value is
   first converted to a |:http.cookies.Morsel:Morsel| containing the key and the value.

   If *input* is given, it is passed to the |:http.cookies.BaseCookie.load:load()| method.

*http.cookies.SimpleCookie:class http.cookies.SimpleCookie([input])*

   This class derives from |:http.cookies.BaseCookie:BaseCookie| and overrides "value_decode()" and "
   value_encode()". SimpleCookie supports strings as cookie values. When setting
   the value, SimpleCookie calls the builtin |:library/stdtypes.txt/str:str()| to convert the value to a
   string. Values received from HTTP are kept as strings.

See also:

  Module |:library/http.cookiejar.txt/module-http.cookiejar:http.cookiejar|
     HTTP cookie handling for web *clients*.  The |:library/http.cookiejar.txt/module-http.cookiejar:http.cookiejar| and |:module-http.cookies:http.cookies|
     modules do not depend on each other.

  *|index-3:⚓|*
  |:tools.ietf.org/html/rfc2109.html:RFC 2109| - HTTP State Management Mechanism
     This is the state management specification implemented by this module.

# cookie-objects:Cookie Objects

*http.cookies.BaseCookie.value_decode:BaseCookie.value_decode(val)*

   Return a tuple "(real_value, coded_value)" from a string representation. "
   real_value" can be any type. This method does no decoding in |:http.cookies.BaseCookie:BaseCookie| — it
   exists so it can be overridden.

*http.cookies.BaseCookie.value_encode:BaseCookie.value_encode(val)*

   Return a tuple "(real_value, coded_value)". *val* can be any type, but "
   coded_value" will always be converted to a string. This method does no encoding
   in |:http.cookies.BaseCookie:BaseCookie| — it exists so it can be overridden.

   In general, it should be the case that |:http.cookies.BaseCookie.value_encode:value_encode()| and |:http.cookies.BaseCookie.value_decode:value_decode()| are
   inverses on the range of *value_decode*.

*http.cookies.BaseCookie.output:BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')*

   Return a string representation suitable to be sent as HTTP headers. *attrs* and
   *header* are sent to each |:http.cookies.Morsel:Morsel|’s |:http.cookies.BaseCookie.output:output()| method. *sep* is used to join
   the headers together, and is by default the combination "'\r\n'" (CRLF).

*http.cookies.BaseCookie.js_output:BaseCookie.js_output(attrs=None)*

   Return an embeddable JavaScript snippet, which, if run on a browser which
   supports JavaScript, will act the same as if the HTTP headers was sent.

   The meaning for *attrs* is the same as in |:http.cookies.BaseCookie.output:output()|.

*http.cookies.BaseCookie.load:BaseCookie.load(rawdata)*

   If *rawdata* is a string, parse it as an "HTTP_COOKIE" and add the values found
   there as |:http.cookies.Morsel:Morsel|s. If it is a dictionary, it is equivalent to:

```rst
for k, v in rawdata.items():
    cookie[k] = v
```

*|morsel-objects:⚓|* # morsel-objects:Morsel Objects

*http.cookies.Morsel:class http.cookies.Morsel*

   Abstract a key/value pair, which has some *|index-4:⚓|* |:tools.ietf.org/html/rfc2109.html:RFC 2109| attributes.

   Morsels are dictionary-like objects, whose set of keys is constant — the valid
   *|index-5:⚓|* |:tools.ietf.org/html/rfc2109.html:RFC 2109| attributes, which are

   * "expires"

   * "path"

   * "comment"

   * "domain"

   * "max-age"

   * "secure"

   * "version"

   * "httponly"

   * "samesite"

   The attribute "httponly" specifies that the cookie is only transferred in HTTP
   requests, and is not accessible through JavaScript. This is intended to mitigate
   some forms of cross-site scripting.

   The attribute "samesite" specifies that the browser is not allowed to send the
   cookie along with cross-site requests. This helps to mitigate CSRF attacks.
   Valid values for this attribute are “Strict” and “Lax”.

   The keys are case-insensitive and their default value is "''".

   Changed in version 3.5: "__eq__()" now takes |:http.cookies.Morsel.key:key| and |:http.cookies.Morsel.value:value| into account.

   Changed in version 3.7: Attributes |:http.cookies.Morsel.key:key|, |:http.cookies.Morsel.value:value| and |:http.cookies.Morsel.coded_value:coded_value| are read-
   only.  Use |:http.cookies.Morsel.set:set()| for setting them.

   Changed in version 3.8: Added support for the "samesite" attribute.

*http.cookies.Morsel.value:Morsel.value*

   The value of the cookie.

*http.cookies.Morsel.coded_value:Morsel.coded_value*

   The encoded value of the cookie — this is what should be sent.

*http.cookies.Morsel.key:Morsel.key*

   The name of the cookie.

*http.cookies.Morsel.set:Morsel.set(key, value, coded_value)*

   Set the *key*, *value* and *coded_value* attributes.

*http.cookies.Morsel.isReservedKey:Morsel.isReservedKey(K)*

   Whether *K* is a member of the set of keys of a |:http.cookies.Morsel:Morsel|.

*http.cookies.Morsel.output:Morsel.output(attrs=None, header='Set-Cookie:')*

   Return a string representation of the Morsel, suitable to be sent as an HTTP
   header. By default, all the attributes are included, unless *attrs* is given, in
   which case it should be a list of attributes to use. *header* is by default "
   "Set-Cookie:"".

*http.cookies.Morsel.js_output:Morsel.js_output(attrs=None)*

   Return an embeddable JavaScript snippet, which, if run on a browser which
   supports JavaScript, will act the same as if the HTTP header was sent.

   The meaning for *attrs* is the same as in |:http.cookies.Morsel.output:output()|.

*http.cookies.Morsel.OutputString:Morsel.OutputString(attrs=None)*

   Return a string representing the Morsel, without any surrounding HTTP or
   JavaScript.

   The meaning for *attrs* is the same as in |:http.cookies.Morsel.output:output()|.

*http.cookies.Morsel.update:Morsel.update(values)*

   Update the values in the Morsel dictionary with the values in the dictionary *
   values*.  Raise an error if any of the keys in the *values* dict is not a valid
   *|index-6:⚓|* |:tools.ietf.org/html/rfc2109.html:RFC 2109| attribute.

   Changed in version 3.5: an error is raised for invalid keys.

*http.cookies.Morsel.copy:Morsel.copy(value)*

   Return a shallow copy of the Morsel object.

   Changed in version 3.5: return a Morsel object instead of a dict.

*http.cookies.Morsel.setdefault:Morsel.setdefault(key, value=None)*

   Raise an error if key is not a valid *|index-7:⚓|* |:tools.ietf.org/html/rfc2109.html:RFC 2109| attribute,
   otherwise behave the same as |:library/stdtypes.txt/dict.setdefault:dict.setdefault()|.

*|cookie-example:⚓|* # example:Example

The following example demonstrates how to use the |:module-http.cookies:http.cookies| module.

```rst
>>> from http import cookies
>>> C = cookies.SimpleCookie()
>>> C["fig"] = "newton"
>>> C["sugar"] = "wafer"
>>> print(C) # generate HTTP headers
Set-Cookie: fig=newton
Set-Cookie: sugar=wafer
>>> print(C.output()) # same thing
Set-Cookie: fig=newton
Set-Cookie: sugar=wafer
>>> C = cookies.SimpleCookie()
>>> C["rocky"] = "road"
>>> C["rocky"]["path"] = "/cookie"
>>> print(C.output(header="Cookie:"))
Cookie: rocky=road; Path=/cookie
>>> print(C.output(attrs=[], header="Cookie:"))
Cookie: rocky=road
>>> C = cookies.SimpleCookie()
>>> C.load("chips=ahoy; vienna=finger") # load from a string (HTTP header)
>>> print(C)
Set-Cookie: chips=ahoy
Set-Cookie: vienna=finger
>>> C = cookies.SimpleCookie()
>>> C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
>>> print(C)
Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"
>>> C = cookies.SimpleCookie()
>>> C["oreo"] = "doublestuff"
>>> C["oreo"]["path"] = "/"
>>> print(C)
Set-Cookie: oreo=doublestuff; Path=/
>>> C = cookies.SimpleCookie()
>>> C["twix"] = "none for you"
>>> C["twix"].value
'none for you'
>>> C = cookies.SimpleCookie()
>>> C["number"] = 7 # equivalent to C["number"] = str(7)
>>> C["string"] = "seven"
>>> C["number"].value
'7'
>>> C["string"].value
'seven'
>>> print(C)
Set-Cookie: number=7
Set-Cookie: string=seven
```



