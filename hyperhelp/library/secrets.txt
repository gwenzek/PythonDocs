%hyperhelp title="secrets" date="2021-07-11"
*|module-secrets:⚓|*

New in version 3.6.

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/secrets.py:Lib/secrets.py|

======================================================================

The |:module-secrets:secrets| module is used for generating cryptographically strong random
numbers suitable for managing data such as passwords, account authentication,
security tokens, and related secrets.

In particular, |:module-secrets:secrets| should be used in preference to the default pseudo-
random number generator in the |:library/random.txt/module-random:random| module, which is designed for modelling
and simulation, not security or cryptography.

See also: *|index-0:⚓|* |:www.python.org/dev/peps/pep-0506:PEP 506|

# random-numbers:Random numbers

The |:module-secrets:secrets| module provides access to the most secure source of randomness
that your operating system provides.

*secrets.SystemRandom:class secrets.SystemRandom*

   A class for generating random numbers using the highest-quality sources provided
   by the operating system.  See |:library/random.txt/random.SystemRandom:random.SystemRandom| for additional details.

*secrets.choice:secrets.choice(sequence)*

   Return a randomly-chosen element from a non-empty sequence.

*secrets.randbelow:secrets.randbelow(n)*

   Return a random int in the range [0, *n*).

*secrets.randbits:secrets.randbits(k)*

   Return an int with *k* random bits.

# generating-tokens:Generating tokens

The |:module-secrets:secrets| module provides functions for generating secure tokens, suitable
for applications such as password resets, hard-to-guess URLs, and similar.

*secrets.token_bytes:secrets.token_bytes([nbytes=None])*

   Return a random byte string containing *nbytes* number of bytes. If *nbytes* is
   "None" or not supplied, a reasonable default is used.

```rst
>>> token_bytes(16)  
b'\xebr\x17D*t\xae\xd4\xe3S\xb6\xe2\xebP1\x8b'
```

*secrets.token_hex:secrets.token_hex([nbytes=None])*

   Return a random text string, in hexadecimal.  The string has *nbytes* random
   bytes, each byte converted to two hex digits.  If *nbytes* is "None" or not
   supplied, a reasonable default is used.

```rst
>>> token_hex(16)  
'f9bf78b9a18ce6d46a0cd2b0b86df9da'
```

*secrets.token_urlsafe:secrets.token_urlsafe([nbytes=None])*

   Return a random URL-safe text string, containing *nbytes* random bytes.  The
   text is Base64 encoded, so on average each byte results in approximately 1.3
   characters.  If *nbytes* is "None" or not supplied, a reasonable default is
   used.

```rst
>>> token_urlsafe(16)  
'Drmhze6EPcv0fN_81Bj-nA'
```

## how-many-bytes-should-tokens-use:How many bytes should tokens use?

To be secure against |:en.wikipedia.org/wiki/Brute-force_attack:brute-force attacks|*|brute-force-attacks:⚓|* , tokens
need to have sufficient randomness.  Unfortunately, what is considered
sufficient will necessarily increase as computers get more powerful and able to
make more guesses in a shorter period.  As of 2015, it is believed that 32 bytes
(256 bits) of randomness is sufficient for the typical use-case expected for the
|:module-secrets:secrets| module.

For those who want to manage their own token length, you can explicitly specify
how much randomness is used for tokens by giving an |:library/functions.txt/int:int| argument to the
various "token_*" functions.  That argument is taken as the number of bytes of
randomness to use.

Otherwise, if no argument is provided, or if the argument is "None", the "
token_*" functions will use a reasonable default instead.

Note:

  That default is subject to change at any time, including during maintenance
  releases.

# other-functions:Other functions

*secrets.compare_digest:secrets.compare_digest(a, b)*

   Return "True" if strings *a* and *b* are equal, otherwise "False", in such a way
   as to reduce the risk of |:codahale.com/a-lesson-in-timing-attacks:timing attacks|*|timing-attacks:⚓|* . See
   |:library/hmac.txt/hmac.compare_digest:hmac.compare_digest()| for additional details.

# recipes-and-best-practices:Recipes and best practices

This section shows recipes and best practices for using |:module-secrets:secrets| to manage a
basic level of security.

Generate an eight-character alphanumeric password:

```rst
import string
import secrets
alphabet = string.ascii_letters + string.digits
password = ''.join(secrets.choice(alphabet) for i in range(8))
```

Note:

  Applications should not |:cwe.mitre.org/data/definitions/257.html:store passwords in a recoverable format|*|store-
  passwords-in-a-recoverable-format:⚓|* , whether plain text or encrypted.  They
  should be salted and hashed using a cryptographically-strong one-way
  (irreversible) hash function.

Generate a ten-character alphanumeric password with at least one lowercase
character, at least one uppercase character, and at least three digits:

```rst
import string
import secrets
alphabet = string.ascii_letters + string.digits
while True:
    password = ''.join(secrets.choice(alphabet) for i in range(10))
    if (any(c.islower() for c in password)
            and any(c.isupper() for c in password)
            and sum(c.isdigit() for c in password) >= 3):
        break
```

Generate an |:xkcd.com/936:XKCD-style passphrase|*|xkcd-style-passphrase:⚓|* :

```rst
import secrets
# On standard Linux systems, use a convenient dictionary file.
# Other platforms may need to provide their own word-list.
with open('/usr/share/dict/words') as f:
    words = [word.strip() for word in f]
    password = ' '.join(secrets.choice(words) for i in range(4))
```

Generate a hard-to-guess temporary URL containing a security token suitable for
password recovery applications:

```rst
import secrets
url = 'https://mydomain.com/reset=' + secrets.token_urlsafe()
```



