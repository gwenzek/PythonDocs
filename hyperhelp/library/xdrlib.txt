%hyperhelp title="xdrlib" date="2021-07-11"
*|module-xdrlib:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/xdrlib.py:Lib/xdrlib.py|

*|index-0:⚓|*

======================================================================

The |:module-xdrlib:xdrlib| module supports the External Data Representation Standard as
described in *|index-1:⚓|* |:tools.ietf.org/html/rfc1014.html:RFC 1014|, written by Sun Microsystems, Inc. June
1987.  It supports most of the data types described in the RFC.

The |:module-xdrlib:xdrlib| module defines two classes, one for packing variables into XDR
representation, and another for unpacking from XDR representation.  There are
also two exception classes.

*xdrlib.Packer:class xdrlib.Packer*

   |:xdrlib.Packer:Packer| is the class for packing data into XDR representation. The |:xdrlib.Packer:Packer|
   class is instantiated with no arguments.

*xdrlib.Unpacker:class xdrlib.Unpacker(data)*

   "Unpacker" is the complementary class which unpacks XDR data values from a
   string buffer.  The input buffer is given as *data*.

See also:

  *|index-2:⚓|*
  |:tools.ietf.org/html/rfc1014.html:RFC 1014| - XDR: External Data Representation Standard
     This RFC defined the encoding of data which was XDR at the time this module was
     originally written.  It has apparently been obsoleted by *|index-3:⚓|*
     |:tools.ietf.org/html/rfc1832.html:RFC 1832|.

  *|index-4:⚓|*
  |:tools.ietf.org/html/rfc1832.html:RFC 1832| - XDR: External Data Representation Standard
     Newer RFC that provides a revised definition of XDR.

# packer-objects:Packer Objects

|:xdrlib.Packer:Packer| instances have the following methods:

*xdrlib.Packer.get_buffer:Packer.get_buffer()*

   Returns the current pack buffer as a string.

*xdrlib.Packer.reset:Packer.reset()*

   Resets the pack buffer to the empty string.

In general, you can pack any of the most common XDR data types by calling the
appropriate "pack_type()" method.  Each method takes a single argument, the
value to pack.  The following simple data type packing methods are supported: "
pack_uint()", "pack_int()", "pack_enum()", "pack_bool()", "pack_uhyper()", and "
pack_hyper()".

*xdrlib.Packer.pack_float:Packer.pack_float(value)*

   Packs the single-precision floating point number *value*.

*xdrlib.Packer.pack_double:Packer.pack_double(value)*

   Packs the double-precision floating point number *value*.

The following methods support packing strings, bytes, and opaque data:

*xdrlib.Packer.pack_fstring:Packer.pack_fstring(n, s)*

   Packs a fixed length string, *s*.  *n* is the length of the string but it is *
   not* packed into the data buffer.  The string is padded with null bytes if
   necessary to guaranteed 4 byte alignment.

*xdrlib.Packer.pack_fopaque:Packer.pack_fopaque(n, data)*

   Packs a fixed length opaque data stream, similarly to |:xdrlib.Packer.pack_fstring:pack_fstring()|.

*xdrlib.Packer.pack_string:Packer.pack_string(s)*

   Packs a variable length string, *s*.  The length of the string is first packed
   as an unsigned integer, then the string data is packed with |:xdrlib.Packer.pack_fstring:pack_fstring()|.

*xdrlib.Packer.pack_opaque:Packer.pack_opaque(data)*

   Packs a variable length opaque data string, similarly to |:xdrlib.Packer.pack_string:pack_string()|.

*xdrlib.Packer.pack_bytes:Packer.pack_bytes(bytes)*

   Packs a variable length byte stream, similarly to |:xdrlib.Packer.pack_string:pack_string()|.

The following methods support packing arrays and lists:

*xdrlib.Packer.pack_list:Packer.pack_list(list, pack_item)*

   Packs a *list* of homogeneous items.  This method is useful for lists with an
   indeterminate size; i.e. the size is not available until the entire list has
   been walked.  For each item in the list, an unsigned integer "1" is packed
   first, followed by the data value from the list.  *pack_item* is the function
   that is called to pack the individual item.  At the end of the list, an unsigned
   integer "0" is packed.

   For example, to pack a list of integers, the code might appear like this:

```rst
import xdrlib
p = xdrlib.Packer()
p.pack_list([1, 2, 3], p.pack_int)
```

*xdrlib.Packer.pack_farray:Packer.pack_farray(n, array, pack_item)*

   Packs a fixed length list (*array*) of homogeneous items.  *n* is the length of
   the list; it is *not* packed into the buffer, but a |:library/exceptions.txt/ValueError:ValueError| exception is
   raised if "len(array)" is not equal to *n*.  As above, *pack_item* is the
   function used to pack each element.

*xdrlib.Packer.pack_array:Packer.pack_array(list, pack_item)*

   Packs a variable length *list* of homogeneous items.  First, the length of the
   list is packed as an unsigned integer, then each element is packed as in
   |:xdrlib.Packer.pack_farray:pack_farray()| above.

*|xdr-unpacker-objects:⚓|* # unpacker-objects:Unpacker Objects

The |:xdrlib.Unpacker:Unpacker| class offers the following methods:

*xdrlib.Unpacker.reset:Unpacker.reset(data)*

   Resets the string buffer with the given *data*.

*xdrlib.Unpacker.get_position:Unpacker.get_position()*

   Returns the current unpack position in the data buffer.

*xdrlib.Unpacker.set_position:Unpacker.set_position(position)*

   Sets the data buffer unpack position to *position*.  You should be careful about
   using |:xdrlib.Unpacker.get_position:get_position()| and |:xdrlib.Unpacker.set_position:set_position()|.

*xdrlib.Unpacker.get_buffer:Unpacker.get_buffer()*

   Returns the current unpack data buffer as a string.

*xdrlib.Unpacker.done:Unpacker.done()*

   Indicates unpack completion.  Raises an |:xdrlib.Error:Error| exception if all of the data has
   not been unpacked.

In addition, every data type that can be packed with a |:xdrlib.Packer:Packer|, can be unpacked
with an |:xdrlib.Unpacker:Unpacker|.  Unpacking methods are of the form "unpack_type()", and take
no arguments.  They return the unpacked object.

*xdrlib.Unpacker.unpack_float:Unpacker.unpack_float()*

   Unpacks a single-precision floating point number.

*xdrlib.Unpacker.unpack_double:Unpacker.unpack_double()*

   Unpacks a double-precision floating point number, similarly to |:xdrlib.Unpacker.unpack_float:unpack_float()|.

In addition, the following methods unpack strings, bytes, and opaque data:

*xdrlib.Unpacker.unpack_fstring:Unpacker.unpack_fstring(n)*

   Unpacks and returns a fixed length string.  *n* is the number of characters
   expected.  Padding with null bytes to guaranteed 4 byte alignment is assumed.

*xdrlib.Unpacker.unpack_fopaque:Unpacker.unpack_fopaque(n)*

   Unpacks and returns a fixed length opaque data stream, similarly to
   |:xdrlib.Unpacker.unpack_fstring:unpack_fstring()|.

*xdrlib.Unpacker.unpack_string:Unpacker.unpack_string()*

   Unpacks and returns a variable length string.  The length of the string is first
   unpacked as an unsigned integer, then the string data is unpacked with
   |:xdrlib.Unpacker.unpack_fstring:unpack_fstring()|.

*xdrlib.Unpacker.unpack_opaque:Unpacker.unpack_opaque()*

   Unpacks and returns a variable length opaque data string, similarly to
   |:xdrlib.Unpacker.unpack_string:unpack_string()|.

*xdrlib.Unpacker.unpack_bytes:Unpacker.unpack_bytes()*

   Unpacks and returns a variable length byte stream, similarly to
   |:xdrlib.Unpacker.unpack_string:unpack_string()|.

The following methods support unpacking arrays and lists:

*xdrlib.Unpacker.unpack_list:Unpacker.unpack_list(unpack_item)*

   Unpacks and returns a list of homogeneous items.  The list is unpacked one
   element at a time by first unpacking an unsigned integer flag.  If the flag is "
   1", then the item is unpacked and appended to the list.  A flag of "0" indicates
   the end of the list.  *unpack_item* is the function that is called to unpack the
   items.

*xdrlib.Unpacker.unpack_farray:Unpacker.unpack_farray(n, unpack_item)*

   Unpacks and returns (as a list) a fixed length array of homogeneous items.  *n*
   is number of list elements to expect in the buffer. As above, *unpack_item* is
   the function used to unpack each element.

*xdrlib.Unpacker.unpack_array:Unpacker.unpack_array(unpack_item)*

   Unpacks and returns a variable length *list* of homogeneous items. First, the
   length of the list is unpacked as an unsigned integer, then each element is
   unpacked as in |:xdrlib.Unpacker.unpack_farray:unpack_farray()| above.

*|xdr-exceptions:⚓|* # exceptions:Exceptions

Exceptions in this module are coded as class instances:

*xdrlib.Error:exception xdrlib.Error*

   The base exception class.  |:xdrlib.Error:Error| has a single public attribute "msg"
   containing the description of the error.

*xdrlib.ConversionError:exception xdrlib.ConversionError*

   Class derived from |:xdrlib.Error:Error|.  Contains no additional instance variables.

Here is an example of how you would catch one of these exceptions:

```rst
import xdrlib
p = xdrlib.Packer()
try:
    p.pack_double(8.01)
except xdrlib.ConversionError as instance:
    print('packing the double failed:', instance.msg)
```



