%hyperhelp title="Using " date="2021-07-11"
*|using-importlib-metadata:⚓|*

Note:

  This functionality is provisional and may deviate from the usual version
  semantics of the standard library.

"importlib.metadata" is a library that provides for access to installed package
metadata.  Built in part on Python’s import system, this library intends to
replace similar functionality in the |:setuptools.readthedocs.io/en/latest/pkg_resources.html#entry-points:entry point
API| and |:setuptools.readthedocs.io/en/latest/pkg_resources.html#metadata-api:metadata API| of "
pkg_resources".  Along with |:library/importlib.txt/module-importlib.resources:importlib.resources| in Python 3.7 and newer
(backported as |:importlib-resources.readthedocs.io/en/latest/index.html:importlib_resources| for older versions of Python), this can
eliminate the need to use the older and less efficient "pkg_resources" package.

By “installed package” we generally mean a third-party package installed into
Python’s "site-packages" directory via tools such as |:pypi.org/project/pip:pip|*|pip:⚓|* .
Specifically, it means a package with either a discoverable "dist-info" or "egg-
info" directory, and metadata defined by *|index-0:⚓|* |:www.python.org/dev/peps/pep-0566:PEP 566| or its older
specifications. By default, package metadata can live on the file system or in
zip archives on |:library/sys.txt/sys.path:sys.path|.  Through an extension mechanism, the metadata can
live almost anywhere.

# overview:Overview

Let’s say you wanted to get the version string for a package you’ve installed
using "pip".  We start by creating a virtual environment and installing
something into it:

```rst
$ python3 -m venv example
$ source example/bin/activate
(example) $ pip install wheel
```

You can get the version string for "wheel" by running the following:

```rst
(example) $ python
>>> from importlib.metadata import version  
>>> version('wheel')  
'0.32.3'
```

You can also get the set of entry points keyed by group, such as "
console_scripts", "distutils.commands" and others.  Each group contains a
sequence of |:entry-points:EntryPoint| objects.

You can get the |:metadata:metadata for a distribution|:

```rst
>>> list(metadata('wheel'))  
['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', 'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', 'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', 'Requires-Dist']
```

You can also get a |:version:distribution’s version number|, list its |:files:constituent files|
, and get a list of the distribution’s |:requirements:Distribution requirements|.

# functional-api:Functional API

This package provides the following functionality via its public API.

## entry-points:Entry points

The "entry_points()" function returns a dictionary of all entry points, keyed by
group.  Entry points are represented by "EntryPoint" instances; each "EntryPoint
" has a ".name", ".group", and ".value" attributes and a ".load()" method to
resolve the value.

```python
>>> eps = entry_points()  
>>> list(eps)  
['console_scripts', 'distutils.commands', 'distutils.setup_keywords', 'egg_info.writers', 'setuptools.installation']
>>> scripts = eps['console_scripts']  
>>> wheel = [ep for ep in scripts if ep.name == 'wheel'][0]  
>>> wheel  
EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')
>>> main = wheel.load()  
>>> main  
<function main at 0x103528488>
```

The "group" and "name" are arbitrary values defined by the package author and
usually a client will wish to resolve all entry points for a particular group.
Read |:setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins:the setuptools docs|*|the-setuptools-docs:⚓|*  for more information on
entrypoints, their definition, and usage.

*|metadata:⚓|* ## distribution-metadata:Distribution metadata

Every distribution includes some metadata, which you can extract using the "
metadata()" function:

```rst
>>> wheel_metadata = metadata('wheel')  
```

The keys of the returned data structure [1] name the metadata keywords, and
their values are returned unparsed from the distribution metadata:

```rst
>>> wheel_metadata['Requires-Python']  
'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
```

*|version:⚓|* ## distribution-versions:Distribution versions

The "version()" function is the quickest way to get a distribution’s version
number, as a string:

```rst
>>> version('wheel')  
'0.32.3'
```

*|files:⚓|* ## distribution-files:Distribution files

You can also get the full set of files contained within a distribution.  The "
files()" function takes a distribution package name and returns all of the files
installed by this distribution.  Each file object returned is a "PackagePath", a
|:library/pathlib.txt/pathlib.Path:pathlib.Path| derived object with additional "dist", "size", and "hash"
properties as indicated by the metadata.  For example:

```rst
>>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  
>>> util  
PackagePath('wheel/util.py')
>>> util.size  
859
>>> util.dist  
<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>
>>> util.hash  
<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>
```

Once you have the file, you can also read its contents:

```rst
>>> print(util.read_text())  
import base64
import sys
...
def as_bytes(s):
    if isinstance(s, text_type):
        return s.encode('utf-8')
    return s
```

In the case where the metadata file listing files (RECORD or SOURCES.txt) is
missing, "files()" will return "None". The caller may wish to wrap calls to "
files()" in |:more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable:always_iterable|*|always-iterable:⚓|*  or otherwise guard against
this condition if the target distribution is not known to have the metadata
present.

*|requirements:⚓|* ## distribution-requirements:Distribution requirements

To get the full set of requirements for a distribution, use the "requires()"
function:

```rst
>>> requires('wheel')  
["pytest (>=3.0.0) ; extra == 'test'", "pytest-cov ; extra == 'test'"]
```

# distributions:Distributions

While the above API is the most common and convenient usage, you can get all of
that information from the "Distribution" class.  A "Distribution" is an abstract
object that represents the metadata for a Python package.  You can get the "
Distribution" instance:

```rst
>>> from importlib.metadata import distribution  
>>> dist = distribution('wheel')  
```

Thus, an alternative way to get the version number is through the "Distribution"
instance:

```rst
>>> dist.version  
'0.32.3'
```

There are all kinds of additional metadata available on the "Distribution"
instance:

```rst
>>> dist.metadata['Requires-Python']  
'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
>>> dist.metadata['License']  
'MIT'
```

The full set of available metadata is not described here.  See *|index-1:⚓|*
|:www.python.org/dev/peps/pep-0566:PEP 566| for additional details.

# extending-the-search-algorithm:Extending the search algorithm

Because package metadata is not available through |:library/sys.txt/sys.path:sys.path| searches, or
package loaders directly, the metadata for a package is found through import
system |:reference/import.txt/finders-and-loaders:finders|.  To find a distribution package’s metadata, "
importlib.metadata" queries the list of |:glossary.txt/term-meta-path-finder:meta path finders| on |:library/sys.txt/sys.meta_path:sys.meta_path|.

The default "PathFinder" for Python includes a hook that calls into "
importlib.metadata.MetadataPathFinder" for finding distributions loaded from
typical file-system-based paths.

The abstract class |:library/importlib.txt/importlib.abc.MetaPathFinder:importlib.abc.MetaPathFinder| defines the interface expected
of finders by Python’s import system. "importlib.metadata" extends this protocol
by looking for an optional "find_distributions" callable on the finders from
|:library/sys.txt/sys.meta_path:sys.meta_path| and presents this extended interface as the "DistributionFinder"
abstract base class, which defines this abstract method:

```rst
@abc.abstractmethod
def find_distributions(context=DistributionFinder.Context()):
    """Return an iterable of all Distribution instances capable of
    loading the metadata for packages for the indicated ``context``.
    """
```

The "DistributionFinder.Context" object provides ".path" and ".name" properties
indicating the path to search and names to match and may supply other relevant
context.

What this means in practice is that to support finding distribution package
metadata in locations other than the file system, subclass "Distribution" and
implement the abstract methods. Then from a custom finder, return instances of
this derived "Distribution" in the "find_distributions()" method.

*|entry-point-api:⚓|* *|metadata-api:⚓|* *|importlib-resources:⚓|*

-[ Footnotes ]-

[1] Technically, the returned distribution metadata object is an
    |:library/email.message.txt/email.message.EmailMessage:email.message.EmailMessage| instance, but this is an implementation detail, and
    not part of the stable API.  You should only use dictionary-like methods and
    syntax to access the metadata contents.



