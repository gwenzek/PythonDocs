%hyperhelp title="email" date="2021-07-11"
*|module-email:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/email/__init__.py:Lib/email/__init__.py|

======================================================================

The |:module-email:email| package is a library for managing email messages.  It is
specifically *not* designed to do any sending of email messages to SMTP (
*|index-0:⚓|* |:tools.ietf.org/html/rfc2821.html:RFC 2821|), NNTP, or other servers; those are functions of
modules such as |:library/smtplib.txt/module-smtplib:smtplib| and |:library/nntplib.txt/module-nntplib:nntplib|.  The |:module-email:email| package attempts to be as
RFC-compliant as possible, supporting *|index-1:⚓|* |:tools.ietf.org/html/rfc5233.html:RFC 5233| and *|index-2:⚓|*
|:tools.ietf.org/html/rfc6532.html:RFC 6532|, as well as such MIME-related RFCs as *|index-3:⚓|* |:tools.ietf.org/html/rfc2045.html:RFC 2045|,
*|index-4:⚓|* |:tools.ietf.org/html/rfc2046.html:RFC 2046|, *|index-5:⚓|* |:tools.ietf.org/html/rfc2047.html:RFC 2047|, *|index-6:⚓|* |:tools.ietf.org/html/rfc2183.html:RFC 2183|,
and *|index-7:⚓|* |:tools.ietf.org/html/rfc2231.html:RFC 2231|.

The overall structure of the email package can be divided into three major
components, plus a fourth component that controls the behavior of the other
components.

The central component of the package is an “object model” that represents email
messages.  An application interacts with the package primarily through the
object model interface defined in the |:library/email.message.txt/module-email.message:message| sub-module.  The application can
use this API to ask questions about an existing email, to construct a new email,
or to add or remove email subcomponents that themselves use the same object
model interface.  That is, following the nature of email messages and their MIME
subcomponents, the email object model is a tree structure of objects that all
provide the |:library/email.message.txt/email.message.EmailMessage:EmailMessage| API.

The other two major components of the package are the |:library/email.parser.txt/module-email.parser:parser| and the
|:library/email.generator.txt/module-email.generator:generator|.  The parser takes the serialized version of an email message (a
stream of bytes) and converts it into a tree of |:library/email.message.txt/email.message.EmailMessage:EmailMessage| objects.  The
generator takes an |:library/email.message.txt/email.message.EmailMessage:EmailMessage| and turns it back into a serialized byte
stream.  (The parser and generator also handle streams of text characters, but
this usage is discouraged as it is too easy to end up with messages that are not
valid in one way or another.)

The control component is the |:library/email.policy.txt/module-email.policy:policy| module.  Every |:library/email.message.txt/email.message.EmailMessage:EmailMessage|, every
|:library/email.generator.txt/module-email.generator:generator|, and every |:library/email.parser.txt/module-email.parser:parser| has an associated |:library/email.policy.txt/module-email.policy:policy| object that controls
its behavior.  Usually an application only needs to specify the policy when an
|:library/email.message.txt/email.message.EmailMessage:EmailMessage| is created, either by directly instantiating an |:library/email.message.txt/email.message.EmailMessage:EmailMessage|
to create a new email, or by parsing an input stream using a |:library/email.parser.txt/module-email.parser:parser|.  But the
policy can be changed when the message is serialized using a |:library/email.generator.txt/module-email.generator:generator|. This
allows, for example, a generic email message to be parsed from disk, but to
serialize it using standard SMTP settings when sending it to an email server.

The email package does its best to hide the details of the various governing
RFCs from the application.  Conceptually the application should be able to treat
the email message as a structured tree of unicode text and binary attachments,
without having to worry about how these are represented when serialized.  In
practice, however, it is often necessary to be aware of at least some of the
rules governing MIME messages and their structure, specifically the names and
nature of the MIME “content types” and how they identify multipart documents.
For the most part this knowledge should only be required for more complex
applications, and even then it should only be the high level structure in
question, and not the details of how those structures are represented.  Since
MIME content types are used widely in modern internet software (not just email),
this will be a familiar concept to many programmers.

The following sections describe the functionality of the |:module-email:email| package. We
start with the |:library/email.message.txt/module-email.message:message| object model, which is the primary interface an
application will use, and follow that with the |:library/email.parser.txt/module-email.parser:parser| and |:library/email.generator.txt/module-email.generator:generator|
components.  Then we cover the |:library/email.policy.txt/module-email.policy:policy| controls, which completes the treatment
of the main components of the library.

The next three sections cover the exceptions the package may raise and the
defects (non-compliance with the RFCs) that the |:library/email.parser.txt/module-email.parser:parser| may detect.  Then we
cover the |:library/email.headerregistry.txt/module-email.headerregistry:headerregistry| and the |:library/email.contentmanager.txt/module-email.contentmanager:contentmanager| sub-components, which
provide tools for doing more detailed manipulation of headers and payloads,
respectively.  Both of these components contain features relevant to consuming
and producing non-trivial messages, but also document their extensibility APIs,
which will be of interest to advanced applications.

Following those is a set of examples of using the fundamental parts of the APIs
covered in the preceding sections.

The foregoing represent the modern (unicode friendly) API of the email package.
The remaining sections, starting with the |:library/email.compat32-message.txt/email.message.Message:Message| class, cover the legacy
|:library/email.policy.txt/email.policy.compat32:compat32| API that deals much more directly with the details of how email
messages are represented.  The |:library/email.policy.txt/email.policy.compat32:compat32| API does *not* hide the details of the
RFCs from the application, but for applications that need to operate at that
level, they can be useful tools.  This documentation is also relevant for
applications that are still using the |:library/email.policy.txt/email.policy.compat32:compat32| API for backward compatibility
reasons.

Changed in version 3.6: Docs reorganized and rewritten to promote the new
|:library/email.message.txt/email.message.EmailMessage:EmailMessage|/|:library/email.policy.txt/email.policy.EmailPolicy:EmailPolicy| API.

Contents of the |:module-email:email| package documentation:

* |:library/email.message.txt:email.message: Representing an email message|

* |:library/email.parser.txt:email.parser: Parsing email messages|

  * |:library/email.parser.txt/feedparser-api:FeedParser API|

  * |:library/email.parser.txt/parser-api:Parser API|

  * |:library/email.parser.txt/additional-notes:Additional notes|

* |:library/email.generator.txt:email.generator: Generating MIME documents|

* |:library/email.policy.txt:email.policy: Policy Objects|

* |:library/email.errors.txt:email.errors: Exception and Defect classes|

* |:library/email.headerregistry.txt:email.headerregistry: Custom Header Objects|

* |:library/email.contentmanager.txt:email.contentmanager: Managing MIME Content|

  * |:library/email.contentmanager.txt/content-manager-instances:Content Manager Instances|

* |:library/email.examples.txt:email: Examples|

Legacy API:

* |:library/email.compat32-message.txt:email.message.Message: Representing an email message using the compat32 API|

* |:library/email.mime.txt:email.mime: Creating email and MIME objects from scratch|

* |:library/email.header.txt:email.header: Internationalized headers|

* |:library/email.charset.txt:email.charset: Representing character sets|

* |:library/email.encoders.txt:email.encoders: Encoders|

* |:library/email.utils.txt:email.utils: Miscellaneous utilities|

* |:library/email.iterators.txt:email.iterators: Iterators|

See also:

  Module |:library/smtplib.txt/module-smtplib:smtplib|
     SMTP (Simple Mail Transport Protocol) client

  Module |:library/poplib.txt/module-poplib:poplib|
     POP (Post Office Protocol) client

  Module |:library/imaplib.txt/module-imaplib:imaplib|
     IMAP (Internet Message Access Protocol) client

  Module |:library/nntplib.txt/module-nntplib:nntplib|
     NNTP (Net News Transport Protocol) client

  Module |:library/mailbox.txt/module-mailbox:mailbox|
     Tools for creating, reading, and managing collections of messages on disk using
     a variety standard formats.

  Module |:library/smtpd.txt/module-smtpd:smtpd|
     SMTP server framework (primarily useful for testing)



