%hyperhelp title="Built-in Exceptions" date="2021-07-11"
*|built-in-exceptions:⚓|*

*|index-0:⚓|*

In Python, all exceptions must be instances of a class that derives from
|:BaseException:BaseException|.  In a |:reference/compound_stmts.txt/try:try| statement with an |:reference/compound_stmts.txt/except:except| clause that mentions a
particular class, that clause also handles any exception classes derived from
that class (but not exception classes from which *it* is derived).  Two
exception classes that are not related via subclassing are never equivalent,
even if they have the same name.

*|index-1:⚓|*

The built-in exceptions listed below can be generated by the interpreter or
built-in functions.  Except where mentioned, they have an “associated value”
indicating the detailed cause of the error.  This may be a string or a tuple of
several items of information (e.g., an error code and a string explaining the
code).  The associated value is usually passed as arguments to the exception
class’s constructor.

User code can raise built-in exceptions.  This can be used to test an exception
handler or to report an error condition “just like” the situation in which the
interpreter raises the same exception; but beware that there is nothing to
prevent user code from raising an inappropriate error.

The built-in exception classes can be subclassed to define new exceptions;
programmers are encouraged to derive new exceptions from the |:Exception:Exception| class
or one of its subclasses, and not from |:BaseException:BaseException|.  More information on
defining exceptions is available in the Python Tutorial under
|:tutorial/errors.txt/tut-userexceptions:User-defined Exceptions|.

When raising (or re-raising) an exception in an |:reference/compound_stmts.txt/except:except| or |:reference/compound_stmts.txt/finally:finally| clause "
__context__" is automatically set to the last exception caught; if the new
exception is not handled the traceback that is eventually displayed will include
the originating exception(s) and the final exception.

When raising a new exception (rather than using a bare "raise" to re-raise the
exception currently being handled), the implicit exception context can be
supplemented with an explicit cause by using |:reference/simple_stmts.txt/from:from| with |:reference/simple_stmts.txt/raise:raise|:

```rst
raise new_exc from original_exc
```

The expression following |:reference/simple_stmts.txt/from:from| must be an exception or "None". It will be set
as "__cause__" on the raised exception. Setting "__cause__" also implicitly sets
the "__suppress_context__" attribute to "True", so that using "raise new_exc
from None" effectively replaces the old exception with the new one for display
purposes (e.g. converting |:KeyError:KeyError| to |:AttributeError:AttributeError|), while leaving the old
exception available in "__context__" for introspection when debugging.

The default traceback display code shows these chained exceptions in addition to
the traceback for the exception itself. An explicitly chained exception in "
__cause__" is always shown when present. An implicitly chained exception in "
__context__" is shown only if "__cause__" is |:library/constants.txt/None:None| and "__suppress_context__"
is false.

In either case, the exception itself is always shown after any chained
exceptions so that the final line of the traceback always shows the last
exception that was raised.

# base-classes:Base classes

The following exceptions are used mostly as base classes for other exceptions.

*BaseException:exception BaseException*

   The base class for all built-in exceptions.  It is not meant to be directly
   inherited by user-defined classes (for that, use |:Exception:Exception|).  If |:library/stdtypes.txt/str:str()| is
   called on an instance of this class, the representation of the argument(s) to
   the instance are returned, or the empty string when there were no arguments.

   *BaseException.args:args*

      The tuple of arguments given to the exception constructor.  Some built-in
      exceptions (like |:OSError:OSError|) expect a certain number of arguments and assign a
      special meaning to the elements of this tuple, while others are usually called
      only with a single string giving an error message.

   *BaseException.with_traceback:with_traceback(tb)*

      This method sets *tb* as the new traceback for the exception and returns the
      exception object.  It is usually used in exception handling code like this:

```rst
try:
    ...
except SomeException:
    tb = sys.exc_info()[2]
    raise OtherException(...).with_traceback(tb)
```

*Exception:exception Exception*

   All built-in, non-system-exiting exceptions are derived from this class.  All
   user-defined exceptions should also be derived from this class.

*ArithmeticError:exception ArithmeticError*

   The base class for those built-in exceptions that are raised for various
   arithmetic errors: |:OverflowError:OverflowError|, |:ZeroDivisionError:ZeroDivisionError|, |:FloatingPointError:FloatingPointError|.

*BufferError:exception BufferError*

   Raised when a |:c-api/buffer.txt/bufferobjects:buffer| related operation cannot be performed.

*LookupError:exception LookupError*

   The base class for the exceptions that are raised when a key or index used on a
   mapping or sequence is invalid: |:IndexError:IndexError|, |:KeyError:KeyError|.  This can be raised
   directly by |:library/codecs.txt/codecs.lookup:codecs.lookup()|.

# concrete-exceptions:Concrete exceptions

The following exceptions are the exceptions that are usually raised.

*AssertionError:exception AssertionError*
    *|index-2:⚓|*

   Raised when an |:reference/simple_stmts.txt/assert:assert| statement fails.

*AttributeError:exception AttributeError*

   Raised when an attribute reference (see |:reference/expressions.txt/attribute-references:Attribute references|) or assignment
   fails.  (When an object does not support attribute references or attribute
   assignments at all, |:TypeError:TypeError| is raised.)

*EOFError:exception EOFError*

   Raised when the |:library/functions.txt/input:input()| function hits an end-of-file condition (EOF) without
   reading any data. (N.B.: the "io.IOBase.read()" and |:library/io.txt/io.IOBase.readline:io.IOBase.readline()|
   methods return an empty string when they hit EOF.)

*FloatingPointError:exception FloatingPointError*

   Not currently used.

*GeneratorExit:exception GeneratorExit*

   Raised when a |:glossary.txt/term-generator:generator| or |:glossary.txt/term-coroutine:coroutine| is closed; see |:reference/expressions.txt/generator.close:generator.close()| and
   |:reference/datamodel.txt/coroutine.close:coroutine.close()|.  It directly inherits from |:BaseException:BaseException| instead of
   |:Exception:Exception| since it is technically not an error.

*ImportError:exception ImportError*

   Raised when the |:reference/simple_stmts.txt/import:import| statement has troubles trying to load a module.  Also
   raised when the “from list” in "from ... import" has a name that cannot be
   found.

   The "name" and "path" attributes can be set using keyword-only arguments to the
   constructor. When set they represent the name of the module that was attempted
   to be imported and the path to any file which triggered the exception,
   respectively.

   Changed in version 3.3: Added the "name" and "path" attributes.

*ModuleNotFoundError:exception ModuleNotFoundError*

   A subclass of |:ImportError:ImportError| which is raised by |:reference/simple_stmts.txt/import:import| when a module could not
   be located.  It is also raised when "None" is found in |:library/sys.txt/sys.modules:sys.modules|.

   New in version 3.6.

*IndexError:exception IndexError*

   Raised when a sequence subscript is out of range.  (Slice indices are silently
   truncated to fall in the allowed range; if an index is not an integer,
   |:TypeError:TypeError| is raised.)

*KeyError:exception KeyError*

   Raised when a mapping (dictionary) key is not found in the set of existing keys.

*KeyboardInterrupt:exception KeyboardInterrupt*

   Raised when the user hits the interrupt key (normally "Control-C" or "Delete").
   During execution, a check for interrupts is made regularly. The exception
   inherits from |:BaseException:BaseException| so as to not be accidentally caught by code that
   catches |:Exception:Exception| and thus prevent the interpreter from exiting.

*MemoryError:exception MemoryError*

   Raised when an operation runs out of memory but the situation may still be
   rescued (by deleting some objects).  The associated value is a string indicating
   what kind of (internal) operation ran out of memory. Note that because of the
   underlying memory management architecture (C’s "malloc()" function), the
   interpreter may not always be able to completely recover from this situation; it
   nevertheless raises an exception so that a stack traceback can be printed, in
   case a run-away program was the cause.

*NameError:exception NameError*

   Raised when a local or global name is not found.  This applies only to
   unqualified names.  The associated value is an error message that includes the
   name that could not be found.

*NotImplementedError:exception NotImplementedError*

   This exception is derived from |:RuntimeError:RuntimeError|.  In user defined base classes,
   abstract methods should raise this exception when they require derived classes
   to override the method, or while the class is being developed to indicate that
   the real implementation still needs to be added.

   Note:

     It should not be used to indicate that an operator or method is not meant to be
     supported at all – in that case either leave the operator / method undefined or,
     if a subclass, set it to |:library/constants.txt/None:None|.

   Note:

     "NotImplementedError" and "NotImplemented" are not interchangeable, even though
     they have similar names and purposes.  See |:library/constants.txt/NotImplemented:NotImplemented| for details on when
     to use it.

*OSError:exception OSError([arg])*
exception OSError(errno, strerror[, filename[, winerror[, filename2]]])
    *|index-3:⚓|*

   This exception is raised when a system function returns a system-related error,
   including I/O failures such as “file not found” or “disk full” (not for illegal
   argument types or other incidental errors).

   The second form of the constructor sets the corresponding attributes, described
   below.  The attributes default to |:library/constants.txt/None:None| if not specified.  For backwards
   compatibility, if three arguments are passed, the |:BaseException.args:args| attribute contains only
   a 2-tuple of the first two constructor arguments.

   The constructor often actually returns a subclass of |:OSError:OSError|, as described in
   |:os-exceptions:OS exceptions| below.  The particular subclass depends on the final |:OSError.errno:errno|
   value.  This behaviour only occurs when constructing |:OSError:OSError| directly or via
   an alias, and is not inherited when subclassing.

   *OSError.errno:errno*

      A numeric error code from the C variable "errno".

   *OSError.winerror:winerror*

      Under Windows, this gives you the native Windows error code.  The |:OSError.errno:errno|
      attribute is then an approximate translation, in POSIX terms, of that native
      error code.

      Under Windows, if the *winerror* constructor argument is an integer, the |:OSError.errno:errno|
      attribute is determined from the Windows error code, and the *errno* argument is
      ignored.  On other platforms, the *winerror* argument is ignored, and the
      |:OSError.winerror:winerror| attribute does not exist.

   *OSError.strerror:strerror*

      The corresponding error message, as provided by the operating system.  It is
      formatted by the C functions "perror()" under POSIX, and "FormatMessage()" under
      Windows.

   *OSError.filename:filename*
   *OSError.filename2:filename2*

      For exceptions that involve a file system path (such as |:library/functions.txt/open:open()| or
      |:library/os.txt/os.unlink:os.unlink()|), |:OSError.filename:filename| is the file name passed to the function. For
      functions that involve two file system paths (such as |:library/os.txt/os.rename:os.rename()|),
      |:OSError.filename2:filename2| corresponds to the second file name passed to the function.

   Changed in version 3.3: |:EnvironmentError:EnvironmentError|, |:IOError:IOError|, |:WindowsError:WindowsError|,
   |:library/socket.txt/socket.error:socket.error|, |:library/select.txt/select.error:select.error| and "mmap.error" have been merged into |:OSError:OSError|,
   and the constructor may return a subclass.

   Changed in version 3.4: The |:OSError.filename:filename| attribute is now the original file name
   passed to the function, instead of the name encoded to or decoded from the
   filesystem encoding.  Also, the *filename2* constructor argument and attribute
   was added.

*OverflowError:exception OverflowError*

   Raised when the result of an arithmetic operation is too large to be
   represented.  This cannot occur for integers (which would rather raise
   |:MemoryError:MemoryError| than give up).  However, for historical reasons, OverflowError is
   sometimes raised for integers that are outside a required range.   Because of
   the lack of standardization of floating point exception handling in C, most
   floating point operations are not checked.

*RecursionError:exception RecursionError*

   This exception is derived from |:RuntimeError:RuntimeError|.  It is raised when the
   interpreter detects that the maximum recursion depth (see
   |:library/sys.txt/sys.getrecursionlimit:sys.getrecursionlimit()|) is exceeded.

   New in version 3.5: Previously, a plain |:RuntimeError:RuntimeError| was raised.

*ReferenceError:exception ReferenceError*

   This exception is raised when a weak reference proxy, created by the
   |:library/weakref.txt/weakref.proxy:weakref.proxy()| function, is used to access an attribute of the referent after
   it has been garbage collected. For more information on weak references, see the
   |:library/weakref.txt/module-weakref:weakref| module.

*RuntimeError:exception RuntimeError*

   Raised when an error is detected that doesn’t fall in any of the other
   categories.  The associated value is a string indicating what precisely went
   wrong.

*StopIteration:exception StopIteration*

   Raised by built-in function |:library/functions.txt/next:next()| and an |:glossary.txt/term-iterator:iterator|'s |:library/stdtypes.txt/iterator.__next__:__next__()| method to
   signal that there are no further items produced by the iterator.

   The exception object has a single attribute "value", which is given as an
   argument when constructing the exception, and defaults to |:library/constants.txt/None:None|.

   When a |:glossary.txt/term-generator:generator| or |:glossary.txt/term-coroutine:coroutine| function returns, a new |:StopIteration:StopIteration|
   instance is raised, and the value returned by the function is used as the "value
   " parameter to the constructor of the exception.

   If a generator code directly or indirectly raises |:StopIteration:StopIteration|, it is
   converted into a |:RuntimeError:RuntimeError| (retaining the |:StopIteration:StopIteration| as the new
   exception’s cause).

   Changed in version 3.3: Added "value" attribute and the ability for generator
   functions to use it to return a value.

   Changed in version 3.5: Introduced the RuntimeError transformation via "from
   __future__ import generator_stop", see *|index-4:⚓|* |:www.python.org/dev/peps/pep-0479:PEP 479|.

   Changed in version 3.7: Enable *|index-5:⚓|* |:www.python.org/dev/peps/pep-0479:PEP 479| for all code by default:
   a |:StopIteration:StopIteration| error raised in a generator is transformed into a
   |:RuntimeError:RuntimeError|.

*StopAsyncIteration:exception StopAsyncIteration*

   Must be raised by "__anext__()" method of an |:glossary.txt/term-asynchronous-iterator:asynchronous iterator| object to
   stop the iteration.

   New in version 3.5.

*SyntaxError:exception SyntaxError*

   Raised when the parser encounters a syntax error.  This may occur in an |:reference/simple_stmts.txt/import:import|
   statement, in a call to the built-in functions |:library/functions.txt/exec:exec()| or |:library/functions.txt/eval:eval()|, or when
   reading the initial script or standard input (also interactively).

   Instances of this class have attributes "filename", "lineno", "offset" and "text
   " for easier access to the details.  |:library/stdtypes.txt/str:str()| of the exception instance returns
   only the message.

*IndentationError:exception IndentationError*

   Base class for syntax errors related to incorrect indentation.  This is a
   subclass of |:SyntaxError:SyntaxError|.

*TabError:exception TabError*

   Raised when indentation contains an inconsistent use of tabs and spaces. This is
   a subclass of |:IndentationError:IndentationError|.

*SystemError:exception SystemError*

   Raised when the interpreter finds an internal error, but the situation does not
   look so serious to cause it to abandon all hope. The associated value is a
   string indicating what went wrong (in low-level terms).

   You should report this to the author or maintainer of your Python interpreter.
   Be sure to report the version of the Python interpreter ("sys.version"; it is
   also printed at the start of an interactive Python session), the exact error
   message (the exception’s associated value) and if possible the source of the
   program that triggered the error.

*SystemExit:exception SystemExit*

   This exception is raised by the |:library/sys.txt/sys.exit:sys.exit()| function.  It inherits from
   |:BaseException:BaseException| instead of |:Exception:Exception| so that it is not accidentally caught by
   code that catches |:Exception:Exception|.  This allows the exception to properly propagate
   up and cause the interpreter to exit.  When it is not handled, the Python
   interpreter exits; no stack traceback is printed.  The constructor accepts the
   same optional argument passed to |:library/sys.txt/sys.exit:sys.exit()|. If the value is an integer, it
   specifies the system exit status (passed to C’s "exit()" function); if it is "
   None", the exit status is zero; if it has another type (such as a string), the
   object’s value is printed and the exit status is one.

   A call to |:library/sys.txt/sys.exit:sys.exit()| is translated into an exception so that clean-up handlers
   (|:reference/compound_stmts.txt/finally:finally| clauses of |:reference/compound_stmts.txt/try:try| statements) can be executed, and so that a debugger
   can execute a script without running the risk of losing control.  The
   |:library/os.txt/os._exit:os._exit()| function can be used if it is absolutely positively necessary to
   exit immediately (for example, in the child process after a call to |:library/os.txt/os.fork:os.fork()|
   ).

   *SystemExit.code:code*

      The exit status or error message that is passed to the constructor. (Defaults to
      "None".)

*TypeError:exception TypeError*

   Raised when an operation or function is applied to an object of inappropriate
   type.  The associated value is a string giving details about the type mismatch.

   This exception may be raised by user code to indicate that an attempted
   operation on an object is not supported, and is not meant to be. If an object is
   meant to support a given operation but has not yet provided an implementation,
   |:NotImplementedError:NotImplementedError| is the proper exception to raise.

   Passing arguments of the wrong type (e.g. passing a |:library/stdtypes.txt/list:list| when an |:library/functions.txt/int:int| is
   expected) should result in a |:TypeError:TypeError|, but passing arguments with the wrong
   value (e.g. a number outside expected boundaries) should result in a
   |:ValueError:ValueError|.

*UnboundLocalError:exception UnboundLocalError*

   Raised when a reference is made to a local variable in a function or method, but
   no value has been bound to that variable.  This is a subclass of |:NameError:NameError|.

*UnicodeError:exception UnicodeError*

   Raised when a Unicode-related encoding or decoding error occurs.  It is a
   subclass of |:ValueError:ValueError|.

   |:UnicodeError:UnicodeError| has attributes that describe the encoding or decoding error.  For
   example, "err.object[err.start:err.end]" gives the particular invalid input that
   the codec failed on.

   *UnicodeError.encoding:encoding*

      The name of the encoding that raised the error.

   *UnicodeError.reason:reason*

      A string describing the specific codec error.

   *UnicodeError.object:object*

      The object the codec was attempting to encode or decode.

   *UnicodeError.start:start*

      The first index of invalid data in |:library/functions.txt/object:object|.

   *UnicodeError.end:end*

      The index after the last invalid data in |:library/functions.txt/object:object|.

*UnicodeEncodeError:exception UnicodeEncodeError*

   Raised when a Unicode-related error occurs during encoding.  It is a subclass of
   |:UnicodeError:UnicodeError|.

*UnicodeDecodeError:exception UnicodeDecodeError*

   Raised when a Unicode-related error occurs during decoding.  It is a subclass of
   |:UnicodeError:UnicodeError|.

*UnicodeTranslateError:exception UnicodeTranslateError*

   Raised when a Unicode-related error occurs during translating.  It is a subclass
   of |:UnicodeError:UnicodeError|.

*ValueError:exception ValueError*

   Raised when an operation or function receives an argument that has the right
   type but an inappropriate value, and the situation is not described by a more
   precise exception such as |:IndexError:IndexError|.

*ZeroDivisionError:exception ZeroDivisionError*

   Raised when the second argument of a division or modulo operation is zero.  The
   associated value is a string indicating the type of the operands and the
   operation.

The following exceptions are kept for compatibility with previous versions;
starting from Python 3.3, they are aliases of |:OSError:OSError|.

*EnvironmentError:exception EnvironmentError*

*IOError:exception IOError*

*WindowsError:exception WindowsError*

   Only available on Windows.

## os-exceptions:OS exceptions

The following exceptions are subclasses of |:OSError:OSError|, they get raised depending
on the system error code.

*BlockingIOError:exception BlockingIOError*

   Raised when an operation would block on an object (e.g. socket) set for non-
   blocking operation. Corresponds to "errno" "EAGAIN", "EALREADY", "EWOULDBLOCK"
   and "EINPROGRESS".

   In addition to those of |:OSError:OSError|, |:BlockingIOError:BlockingIOError| can have one more
   attribute:

   *BlockingIOError.characters_written:characters_written*

      An integer containing the number of characters written to the stream before it
      blocked.  This attribute is available when using the buffered I/O classes from
      the |:library/io.txt/module-io:io| module.

*ChildProcessError:exception ChildProcessError*

   Raised when an operation on a child process failed. Corresponds to "errno" "
   ECHILD".

*ConnectionError:exception ConnectionError*

   A base class for connection-related issues.

   Subclasses are |:BrokenPipeError:BrokenPipeError|, |:ConnectionAbortedError:ConnectionAbortedError|,
   |:ConnectionRefusedError:ConnectionRefusedError| and |:ConnectionResetError:ConnectionResetError|.

*BrokenPipeError:exception BrokenPipeError*

   A subclass of |:ConnectionError:ConnectionError|, raised when trying to write on a pipe while the
   other end has been closed, or trying to write on a socket which has been
   shutdown for writing. Corresponds to "errno" "EPIPE" and "ESHUTDOWN".

*ConnectionAbortedError:exception ConnectionAbortedError*

   A subclass of |:ConnectionError:ConnectionError|, raised when a connection attempt is aborted by
   the peer. Corresponds to "errno" "ECONNABORTED".

*ConnectionRefusedError:exception ConnectionRefusedError*

   A subclass of |:ConnectionError:ConnectionError|, raised when a connection attempt is refused by
   the peer. Corresponds to "errno" "ECONNREFUSED".

*ConnectionResetError:exception ConnectionResetError*

   A subclass of |:ConnectionError:ConnectionError|, raised when a connection is reset by the peer.
   Corresponds to "errno" "ECONNRESET".

*FileExistsError:exception FileExistsError*

   Raised when trying to create a file or directory which already exists.
   Corresponds to "errno" "EEXIST".

*FileNotFoundError:exception FileNotFoundError*

   Raised when a file or directory is requested but doesn’t exist. Corresponds to "
   errno" "ENOENT".

*InterruptedError:exception InterruptedError*

   Raised when a system call is interrupted by an incoming signal. Corresponds to "
   errno" |:library/errno.txt/errno.EINTR:EINTR|.

   Changed in version 3.5: Python now retries system calls when a syscall is
   interrupted by a signal, except if the signal handler raises an exception (see
   *|index-6:⚓|* |:www.python.org/dev/peps/pep-0475:PEP 475| for the rationale), instead of raising
   |:InterruptedError:InterruptedError|.

*IsADirectoryError:exception IsADirectoryError*

   Raised when a file operation (such as |:library/os.txt/os.remove:os.remove()|) is requested on a
   directory. Corresponds to "errno" "EISDIR".

*NotADirectoryError:exception NotADirectoryError*

   Raised when a directory operation (such as |:library/os.txt/os.listdir:os.listdir()|) is requested on
   something which is not a directory. Corresponds to "errno" "ENOTDIR".

*PermissionError:exception PermissionError*

   Raised when trying to run an operation without the adequate access rights - for
   example filesystem permissions. Corresponds to "errno" "EACCES" and "EPERM".

*ProcessLookupError:exception ProcessLookupError*

   Raised when a given process doesn’t exist. Corresponds to "errno" "ESRCH".

*TimeoutError:exception TimeoutError*

   Raised when a system function timed out at the system level. Corresponds to "
   errno" "ETIMEDOUT".

New in version 3.3: All the above |:OSError:OSError| subclasses were added.

See also:

  *|index-7:⚓|* |:www.python.org/dev/peps/pep-3151:PEP 3151| - Reworking the OS and IO exception hierarchy

*|warning-categories-as-exceptions:⚓|* # warnings:Warnings

The following exceptions are used as warning categories; see the
|:library/warnings.txt/warning-categories:Warning Categories| documentation for more details.

*Warning:exception Warning*

   Base class for warning categories.

*UserWarning:exception UserWarning*

   Base class for warnings generated by user code.

*DeprecationWarning:exception DeprecationWarning*

   Base class for warnings about deprecated features when those warnings are
   intended for other Python developers.

*PendingDeprecationWarning:exception PendingDeprecationWarning*

   Base class for warnings about features which are obsolete and expected to be
   deprecated in the future, but are not deprecated at the moment.

   This class is rarely used as emitting a warning about a possible upcoming
   deprecation is unusual, and |:DeprecationWarning:DeprecationWarning| is preferred for already active
   deprecations.

*SyntaxWarning:exception SyntaxWarning*

   Base class for warnings about dubious syntax.

*RuntimeWarning:exception RuntimeWarning*

   Base class for warnings about dubious runtime behavior.

*FutureWarning:exception FutureWarning*

   Base class for warnings about deprecated features when those warnings are
   intended for end users of applications that are written in Python.

*ImportWarning:exception ImportWarning*

   Base class for warnings about probable mistakes in module imports.

*UnicodeWarning:exception UnicodeWarning*

   Base class for warnings related to Unicode.

*BytesWarning:exception BytesWarning*

   Base class for warnings related to |:library/stdtypes.txt/bytes:bytes| and |:library/stdtypes.txt/bytearray:bytearray|.

*ResourceWarning:exception ResourceWarning*

   Base class for warnings related to resource usage. Ignored by the default
   warning filters.

   New in version 3.2.

# exception-hierarchy:Exception hierarchy

The class hierarchy for built-in exceptions is:

```rst
BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StopAsyncIteration
      +-- ArithmeticError
      |    +-- FloatingPointError
      |    +-- OverflowError
      |    +-- ZeroDivisionError
      +-- AssertionError
      +-- AttributeError
      +-- BufferError
      +-- EOFError
      +-- ImportError
      |    +-- ModuleNotFoundError
      +-- LookupError
      |    +-- IndexError
      |    +-- KeyError
      +-- MemoryError
      +-- NameError
      |    +-- UnboundLocalError
      +-- OSError
      |    +-- BlockingIOError
      |    +-- ChildProcessError
      |    +-- ConnectionError
      |    |    +-- BrokenPipeError
      |    |    +-- ConnectionAbortedError
      |    |    +-- ConnectionRefusedError
      |    |    +-- ConnectionResetError
      |    +-- FileExistsError
      |    +-- FileNotFoundError
      |    +-- InterruptedError
      |    +-- IsADirectoryError
      |    +-- NotADirectoryError
      |    +-- PermissionError
      |    +-- ProcessLookupError
      |    +-- TimeoutError
      +-- ReferenceError
      +-- RuntimeError
      |    +-- NotImplementedError
      |    +-- RecursionError
      +-- SyntaxError
      |    +-- IndentationError
      |         +-- TabError
      +-- SystemError
      +-- TypeError
      +-- ValueError
      |    +-- UnicodeError
      |         +-- UnicodeDecodeError
      |         +-- UnicodeEncodeError
      |         +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
           +-- ImportWarning
           +-- UnicodeWarning
           +-- BytesWarning
           +-- ResourceWarning

```



