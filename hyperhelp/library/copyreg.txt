%hyperhelp title="copyreg" date="2021-07-11"
*|module-copyreg:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/copyreg.py:Lib/copyreg.py|

*|index-0:⚓|*

======================================================================

The |:module-copyreg:copyreg| module offers a way to define functions used while pickling
specific objects.  The |:library/pickle.txt/module-pickle:pickle| and |:library/copy.txt/module-copy:copy| modules use those functions when
pickling/copying those objects.  The module provides configuration information
about object constructors which are not classes. Such constructors may be
factory functions or class instances.

*copyreg.constructor:copyreg.constructor(object)*

   Declares *object* to be a valid constructor.  If *object* is not callable (and
   hence not valid as a constructor), raises |:library/exceptions.txt/TypeError:TypeError|.

*copyreg.pickle:copyreg.pickle(type, function, constructor=None)*

   Declares that *function* should be used as a “reduction” function for objects of
   type *type*.  *function* should return either a string or a tuple containing two
   or three elements.

   The optional *constructor* parameter, if provided, is a callable object which
   can be used to reconstruct the object when called with the tuple of arguments
   returned by *function* at pickling time.  |:library/exceptions.txt/TypeError:TypeError| will be raised if *object*
   is a class or *constructor* is not callable.

   See the |:library/pickle.txt/module-pickle:pickle| module for more details on the interface expected of *function*
   and *constructor*.  Note that the |:library/pickle.txt/pickle.Pickler.dispatch_table:dispatch_table| attribute of a pickler object
   or subclass of |:library/pickle.txt/pickle.Pickler:pickle.Pickler| can also be used for declaring reduction
   functions.

# example:Example

The example below would like to show how to register a pickle function and how
it will be used:

```python
>>> import copyreg, copy, pickle
>>> class C(object):
...     def __init__(self, a):
...         self.a = a
...
>>> def pickle_c(c):
...     print("pickling a C instance...")
...     return C, (c.a,)
...
>>> copyreg.pickle(C, pickle_c)
>>> c = C(1)
>>> d = copy.copy(c)  
pickling a C instance...
>>> p = pickle.dumps(c)  
pickling a C instance...
```



