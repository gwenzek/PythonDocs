%hyperhelp title="json" date="2021-07-11"
*|module-json:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/json/__init__.py:Lib/json/__init__.py|

======================================================================

|:json.org:JSON (JavaScript Object Notation)|*|json-javascript-object-notation:⚓|* ,
specified by *|index-0:⚓|* |:tools.ietf.org/html/rfc7159.html:RFC 7159| (which obsoletes *|index-1:⚓|* |:tools.ietf.org/html/rfc4627.html:RFC 4627|)
and by |:www.ecma-international.org/publications/standards/Ecma-404.htm:ECMA-404|*|ecma-404:⚓|* , is a lightweight data interchange format
inspired by |:en.wikipedia.org/wiki/JavaScript:JavaScript|*|javascript:⚓|*  object literal syntax (although it is
not a strict subset of JavaScript [1] ).

|:module-json:json| exposes an API familiar to users of the standard library |:library/marshal.txt/module-marshal:marshal| and
|:library/pickle.txt/module-pickle:pickle| modules.

Encoding basic Python object hierarchies:

```rst
>>> import json
>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
'["foo", {"bar": ["baz", null, 1.0, 2]}]'
>>> print(json.dumps("\"foo\bar"))
"\"foo\bar"
>>> print(json.dumps('\u1234'))
"\u1234"
>>> print(json.dumps('\\'))
"\\"
>>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
{"a": 0, "b": 0, "c": 0}
>>> from io import StringIO
>>> io = StringIO()
>>> json.dump(['streaming API'], io)
>>> io.getvalue()
'["streaming API"]'
```

Compact encoding:

```rst
>>> import json
>>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))
'[1,2,3,{"4":5,"6":7}]'
```

Pretty printing:

```rst
>>> import json
>>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
{
    "4": 5,
    "6": 7
}
```

Decoding JSON:

```rst
>>> import json
>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
['foo', {'bar': ['baz', None, 1.0, 2]}]
>>> json.loads('"\\"foo\\bar"')
'"foo\x08ar'
>>> from io import StringIO
>>> io = StringIO('["streaming API"]')
>>> json.load(io)
['streaming API']
```

Specializing JSON object decoding:

```rst
>>> import json
>>> def as_complex(dct):
...     if '__complex__' in dct:
...         return complex(dct['real'], dct['imag'])
...     return dct
...
>>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
...     object_hook=as_complex)
(1+2j)
>>> import decimal
>>> json.loads('1.1', parse_float=decimal.Decimal)
Decimal('1.1')
```

Extending |:json.JSONEncoder:JSONEncoder|:

```rst
>>> import json
>>> class ComplexEncoder(json.JSONEncoder):
...     def default(self, obj):
...         if isinstance(obj, complex):
...             return [obj.real, obj.imag]
...         # Let the base class default method raise the TypeError
...         return json.JSONEncoder.default(self, obj)
...
>>> json.dumps(2 + 1j, cls=ComplexEncoder)
'[2.0, 1.0]'
>>> ComplexEncoder().encode(2 + 1j)
'[2.0, 1.0]'
>>> list(ComplexEncoder().iterencode(2 + 1j))
['[2.0', ', 1.0', ']']
```

Using |:module-json.tool:json.tool| from the shell to validate and pretty-print:

```rst
$ echo '{"json":"obj"}' | python -m json.tool
{
    "json": "obj"
}
$ echo '{1.2:3.4}' | python -m json.tool
Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
```

See |:json-commandline:Command Line Interface| for detailed documentation.

Note:

  JSON is a subset of |:yaml.org:YAML|*|yaml:⚓|*  1.2.  The JSON produced by this module’s
  default settings (in particular, the default *separators* value) is also a
  subset of YAML 1.0 and 1.1.  This module can thus also be used as a YAML
  serializer.

Note:

  This module’s encoders and decoders preserve input and output order by default.
  Order is only lost if the underlying containers are unordered.Prior to Python
  3.7, |:library/stdtypes.txt/dict:dict| was not guaranteed to be ordered, so inputs and outputs were
  typically scrambled unless |:library/collections.txt/collections.OrderedDict:collections.OrderedDict| was specifically requested.
  Starting with Python 3.7, the regular |:library/stdtypes.txt/dict:dict| became order preserving, so it is
  no longer necessary to specify |:library/collections.txt/collections.OrderedDict:collections.OrderedDict| for JSON generation and
  parsing.

# basic-usage:Basic Usage

*json.dump:json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)*

   Serialize *obj* as a JSON formatted stream to *fp* (a ".write()"-supporting
   |:glossary.txt/term-file-like-object:file-like object|) using this |:py-to-json-table:conversion table|.

   If *skipkeys* is true (default: "False"), then dict keys that are not of a basic
   type (|:library/stdtypes.txt/str:str|, |:library/functions.txt/int:int|, |:library/functions.txt/float:float|, |:library/functions.txt/bool:bool|, "None") will be skipped instead of raising
   a |:library/exceptions.txt/TypeError:TypeError|.

   The |:module-json:json| module always produces |:library/stdtypes.txt/str:str| objects, not |:library/stdtypes.txt/bytes:bytes| objects. Therefore,
   "fp.write()" must support |:library/stdtypes.txt/str:str| input.

   If *ensure_ascii* is true (the default), the output is guaranteed to have all
   incoming non-ASCII characters escaped.  If *ensure_ascii* is false, these
   characters will be output as-is.

   If *check_circular* is false (default: "True"), then the circular reference
   check for container types will be skipped and a circular reference will result
   in an |:library/exceptions.txt/OverflowError:OverflowError| (or worse).

   If *allow_nan* is false (default: "True"), then it will be a |:library/exceptions.txt/ValueError:ValueError| to
   serialize out of range |:library/functions.txt/float:float| values ("nan", "inf", "-inf") in strict
   compliance of the JSON specification. If *allow_nan* is true, their JavaScript
   equivalents ("NaN", "Infinity", "-Infinity") will be used.

   If *indent* is a non-negative integer or string, then JSON array elements and
   object members will be pretty-printed with that indent level.  An indent level
   of 0, negative, or """" will only insert newlines.  "None" (the default) selects
   the most compact representation. Using a positive integer indent indents that
   many spaces per level.  If *indent* is a string (such as ""\t""), that string is
   used to indent each level.

   Changed in version 3.2: Allow strings for *indent* in addition to integers.

   If specified, *separators* should be an "(item_separator, key_separator)" tuple.
   The default is "(', ', ': ')" if *indent* is "None" and "(',', ': ')" otherwise.
   To get the most compact JSON representation, you should specify "(',', ':')" to
   eliminate whitespace.

   Changed in version 3.4: Use "(',', ': ')" as default if *indent* is not "None".

   If specified, *default* should be a function that gets called for objects that
   can’t otherwise be serialized.  It should return a JSON encodable version of the
   object or raise a |:library/exceptions.txt/TypeError:TypeError|.  If not specified, |:library/exceptions.txt/TypeError:TypeError| is raised.

   If *sort_keys* is true (default: "False"), then the output of dictionaries will
   be sorted by key.

   To use a custom |:json.JSONEncoder:JSONEncoder| subclass (e.g. one that overrides the "default()"
   method to serialize additional types), specify it with the *cls* kwarg;
   otherwise |:json.JSONEncoder:JSONEncoder| is used.

   Changed in version 3.6: All optional parameters are now |:glossary.txt/keyword-only-parameter:keyword-only|.

   Note:

     Unlike |:library/pickle.txt/module-pickle:pickle| and |:library/marshal.txt/module-marshal:marshal|, JSON is not a framed protocol, so trying to
     serialize multiple objects with repeated calls to |:json.dump:dump()| using the same *fp*
     will result in an invalid JSON file.

*json.dumps:json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)*

   Serialize *obj* to a JSON formatted |:library/stdtypes.txt/str:str| using this |:py-to-json-table:conversion
table|.  The
   arguments have the same meaning as in |:json.dump:dump()|.

   Note:

     Keys in key/value pairs of JSON are always of the type |:library/stdtypes.txt/str:str|. When a dictionary
     is converted into JSON, all the keys of the dictionary are coerced to strings.
     As a result of this, if a dictionary is converted into JSON and then back into a
     dictionary, the dictionary may not equal the original one. That is, "
     loads(dumps(x)) != x" if x has non-string keys.

*json.load:json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)*

   Deserialize *fp* (a ".read()"-supporting |:glossary.txt/term-text-file:text file| or |:glossary.txt/term-binary-file:binary file| containing
   a JSON document) to a Python object using this |:json-to-py-table:conversion table|.

   *object_hook* is an optional function that will be called with the result of any
   object literal decoded (a |:library/stdtypes.txt/dict:dict|).  The return value of *object_hook* will be
   used instead of the |:library/stdtypes.txt/dict:dict|.  This feature can be used to implement custom
   decoders (e.g. |:www.jsonrpc.org:JSON-RPC|*|json-rpc:⚓|*  class hinting).

   *object_pairs_hook* is an optional function that will be called with the result
   of any object literal decoded with an ordered list of pairs.  The return value
   of *object_pairs_hook* will be used instead of the |:library/stdtypes.txt/dict:dict|.  This feature can be
   used to implement custom decoders. If *object_hook* is also defined, the *
   object_pairs_hook* takes priority.

   Changed in version 3.1: Added support for *object_pairs_hook*.

   *parse_float*, if specified, will be called with the string of every JSON float
   to be decoded.  By default, this is equivalent to "float(num_str)". This can be
   used to use another datatype or parser for JSON floats (e.g. |:library/decimal.txt/decimal.Decimal:decimal.Decimal|).

   *parse_int*, if specified, will be called with the string of every JSON int to
   be decoded.  By default, this is equivalent to "int(num_str)".  This can be used
   to use another datatype or parser for JSON integers (e.g. |:library/functions.txt/float:float|).

   *parse_constant*, if specified, will be called with one of the following
   strings: "'-Infinity'", "'Infinity'", "'NaN'". This can be used to raise an
   exception if invalid JSON numbers are encountered.

   Changed in version 3.1: *parse_constant* doesn’t get called on ‘null’, ‘true’,
   ‘false’ anymore.

   To use a custom |:json.JSONDecoder:JSONDecoder| subclass, specify it with the "cls" kwarg;
   otherwise |:json.JSONDecoder:JSONDecoder| is used.  Additional keyword arguments will be passed to
   the constructor of the class.

   If the data being deserialized is not a valid JSON document, a |:json.JSONDecodeError:JSONDecodeError|
   will be raised.

   Changed in version 3.6: All optional parameters are now |:glossary.txt/keyword-only-parameter:keyword-only|.

   Changed in version 3.6: *fp* can now be a |:glossary.txt/term-binary-file:binary file|. The input encoding
   should be UTF-8, UTF-16 or UTF-32.

*json.loads:json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)*

   Deserialize *s* (a |:library/stdtypes.txt/str:str|, |:library/stdtypes.txt/bytes:bytes| or |:library/stdtypes.txt/bytearray:bytearray| instance containing a JSON
   document) to a Python object using this |:json-to-py-table:conversion table|.

   The other arguments have the same meaning as in |:json.load:load()|, except *encoding*
   which is ignored and deprecated since Python 3.1.

   If the data being deserialized is not a valid JSON document, a |:json.JSONDecodeError:JSONDecodeError|
   will be raised.

   Deprecated since version 3.1, will be removed in version 3.9: *encoding* keyword
   argument.

   Changed in version 3.6: *s* can now be of type |:library/stdtypes.txt/bytes:bytes| or |:library/stdtypes.txt/bytearray:bytearray|. The input
   encoding should be UTF-8, UTF-16 or UTF-32.

# encoders-and-decoders:Encoders and Decoders

*json.JSONDecoder:class json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)*

   Simple JSON decoder.

   Performs the following translations in decoding by default:

   *|json-to-py-table:⚓|*

   +-----------------+---------------------+
   | JSON            | Python              |
   |=================|=====================|
   | object          | dict                |
   +-----------------+---------------------+
   | array           | list                |
   +-----------------+---------------------+
   | string          | str                 |
   +-----------------+---------------------+
   | number (int)    | int                 |
   +-----------------+---------------------+
   | number (real)   | float               |
   +-----------------+---------------------+
   | true            | True                |
   +-----------------+---------------------+
   | false           | False               |
   +-----------------+---------------------+
   | null            | None                |
   +-----------------+---------------------+

   It also understands "NaN", "Infinity", and "-Infinity" as their corresponding "
   float" values, which is outside the JSON spec.

   *object_hook*, if specified, will be called with the result of every JSON object
   decoded and its return value will be used in place of the given |:library/stdtypes.txt/dict:dict|.  This
   can be used to provide custom deserializations (e.g. to support JSON-RPC class
   hinting).

   *object_pairs_hook*, if specified will be called with the result of every JSON
   object decoded with an ordered list of pairs.  The return value of *
   object_pairs_hook* will be used instead of the |:library/stdtypes.txt/dict:dict|.  This feature can be used
   to implement custom decoders.  If *object_hook* is also defined, the *
   object_pairs_hook* takes priority.

   Changed in version 3.1: Added support for *object_pairs_hook*.

   *parse_float*, if specified, will be called with the string of every JSON float
   to be decoded.  By default, this is equivalent to "float(num_str)". This can be
   used to use another datatype or parser for JSON floats (e.g. |:library/decimal.txt/decimal.Decimal:decimal.Decimal|).

   *parse_int*, if specified, will be called with the string of every JSON int to
   be decoded.  By default, this is equivalent to "int(num_str)".  This can be used
   to use another datatype or parser for JSON integers (e.g. |:library/functions.txt/float:float|).

   *parse_constant*, if specified, will be called with one of the following
   strings: "'-Infinity'", "'Infinity'", "'NaN'". This can be used to raise an
   exception if invalid JSON numbers are encountered.

   If *strict* is false ("True" is the default), then control characters will be
   allowed inside strings.  Control characters in this context are those with
   character codes in the 0–31 range, including "'\t'" (tab), "'\n'", "'\r'" and "
   '\0'".

   If the data being deserialized is not a valid JSON document, a |:json.JSONDecodeError:JSONDecodeError|
   will be raised.

   Changed in version 3.6: All parameters are now |:glossary.txt/keyword-only-parameter:keyword-only|.

   *json.JSONDecoder.decode:decode(s)*

      Return the Python representation of *s* (a |:library/stdtypes.txt/str:str| instance containing a JSON
      document).

      |:json.JSONDecodeError:JSONDecodeError| will be raised if the given JSON document is not valid.

   *json.JSONDecoder.raw_decode:raw_decode(s)*

      Decode a JSON document from *s* (a |:library/stdtypes.txt/str:str| beginning with a JSON document) and
      return a 2-tuple of the Python representation and the index in *s* where the
      document ended.

      This can be used to decode a JSON document from a string that may have
      extraneous data at the end.

*json.JSONEncoder:class json.JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)*

   Extensible JSON encoder for Python data structures.

   Supports the following objects and types by default:

   *|py-to-json-table:⚓|*

   +------------------------------------------+-----------------+
   | Python                                   | JSON            |
   |==========================================|=================|
   | dict                                     | object          |
   +------------------------------------------+-----------------+
   | list, tuple                              | array           |
   +------------------------------------------+-----------------+
   | str                                      | string          |
   +------------------------------------------+-----------------+
   | int, float, int- & float-derived Enums   | number          |
   +------------------------------------------+-----------------+
   | True                                     | true            |
   +------------------------------------------+-----------------+
   | False                                    | false           |
   +------------------------------------------+-----------------+
   | None                                     | null            |
   +------------------------------------------+-----------------+

   Changed in version 3.4: Added support for int- and float-derived Enum classes.

   To extend this to recognize other objects, subclass and implement a |:json.JSONEncoder.default:default()|
   method with another method that returns a serializable object for "o" if
   possible, otherwise it should call the superclass implementation (to raise
   |:library/exceptions.txt/TypeError:TypeError|).

   If *skipkeys* is false (the default), then it is a |:library/exceptions.txt/TypeError:TypeError| to attempt
   encoding of keys that are not |:library/stdtypes.txt/str:str|, |:library/functions.txt/int:int|, |:library/functions.txt/float:float| or "None".  If *skipkeys* is
   true, such items are simply skipped.

   If *ensure_ascii* is true (the default), the output is guaranteed to have all
   incoming non-ASCII characters escaped.  If *ensure_ascii* is false, these
   characters will be output as-is.

   If *check_circular* is true (the default), then lists, dicts, and custom encoded
   objects will be checked for circular references during encoding to prevent an
   infinite recursion (which would cause an |:library/exceptions.txt/OverflowError:OverflowError|). Otherwise, no such
   check takes place.

   If *allow_nan* is true (the default), then "NaN", "Infinity", and "-Infinity"
   will be encoded as such.  This behavior is not JSON specification compliant, but
   is consistent with most JavaScript based encoders and decoders.  Otherwise, it
   will be a |:library/exceptions.txt/ValueError:ValueError| to encode such floats.

   If *sort_keys* is true (default: "False"), then the output of dictionaries will
   be sorted by key; this is useful for regression tests to ensure that JSON
   serializations can be compared on a day-to-day basis.

   If *indent* is a non-negative integer or string, then JSON array elements and
   object members will be pretty-printed with that indent level.  An indent level
   of 0, negative, or """" will only insert newlines.  "None" (the default) selects
   the most compact representation. Using a positive integer indent indents that
   many spaces per level.  If *indent* is a string (such as ""\t""), that string is
   used to indent each level.

   Changed in version 3.2: Allow strings for *indent* in addition to integers.

   If specified, *separators* should be an "(item_separator, key_separator)" tuple.
   The default is "(', ', ': ')" if *indent* is "None" and "(',', ': ')" otherwise.
   To get the most compact JSON representation, you should specify "(',', ':')" to
   eliminate whitespace.

   Changed in version 3.4: Use "(',', ': ')" as default if *indent* is not "None".

   If specified, *default* should be a function that gets called for objects that
   can’t otherwise be serialized.  It should return a JSON encodable version of the
   object or raise a |:library/exceptions.txt/TypeError:TypeError|.  If not specified, |:library/exceptions.txt/TypeError:TypeError| is raised.

   Changed in version 3.6: All parameters are now |:glossary.txt/keyword-only-parameter:keyword-only|.

   *json.JSONEncoder.default:default(o)*

      Implement this method in a subclass such that it returns a serializable object
      for *o*, or calls the base implementation (to raise a |:library/exceptions.txt/TypeError:TypeError|).

      For example, to support arbitrary iterators, you could implement default like
      this:

```rst
def default(self, o):
   try:
       iterable = iter(o)
   except TypeError:
       pass
   else:
       return list(iterable)
   # Let the base class default method raise the TypeError
   return json.JSONEncoder.default(self, o)
```

   *json.JSONEncoder.encode:encode(o)*

      Return a JSON string representation of a Python data structure, *o*.  For
      example:

```rst
>>> json.JSONEncoder().encode({"foo": ["bar", "baz"]})
'{"foo": ["bar", "baz"]}'
```

   *json.JSONEncoder.iterencode:iterencode(o)*

      Encode the given object, *o*, and yield each string representation as available.
      For example:

```rst
for chunk in json.JSONEncoder().iterencode(bigobject):
    mysocket.write(chunk)
```

# exceptions:Exceptions

*json.JSONDecodeError:exception json.JSONDecodeError(msg, doc, pos)*

   Subclass of |:library/exceptions.txt/ValueError:ValueError| with the following additional attributes:

   *json.JSONDecodeError.msg:msg*

      The unformatted error message.

   *json.JSONDecodeError.doc:doc*

      The JSON document being parsed.

   *json.JSONDecodeError.pos:pos*

      The start index of *doc* where parsing failed.

   *json.JSONDecodeError.lineno:lineno*

      The line corresponding to *pos*.

   *json.JSONDecodeError.colno:colno*

      The column corresponding to *pos*.

   New in version 3.5.

# standard-compliance-and-interoperability:Standard Compliance and
Interoperability

The JSON format is specified by *|index-2:⚓|* |:tools.ietf.org/html/rfc7159.html:RFC 7159| and by |:www.ecma-international.org/publications/standards/Ecma-404.htm:ECMA-404|
*|id2:⚓|* . This section details this module’s level of compliance with the RFC.
For simplicity, |:json.JSONEncoder:JSONEncoder| and |:json.JSONDecoder:JSONDecoder| subclasses, and parameters other
than those explicitly mentioned, are not considered.

This module does not comply with the RFC in a strict fashion, implementing some
extensions that are valid JavaScript but not valid JSON.  In particular:

* Infinite and NaN number values are accepted and output;

* Repeated names within an object are accepted, and only the value of the last
  name-value pair is used.

Since the RFC permits RFC-compliant parsers to accept input texts that are not
RFC-compliant, this module’s deserializer is technically RFC-compliant under
default settings.

## character-encodings:Character Encodings

The RFC requires that JSON be represented using either UTF-8, UTF-16, or UTF-32,
with UTF-8 being the recommended default for maximum interoperability.

As permitted, though not required, by the RFC, this module’s serializer sets *
ensure_ascii=True* by default, thus escaping the output so that the resulting
strings only contain ASCII characters.

Other than the *ensure_ascii* parameter, this module is defined strictly in
terms of conversion between Python objects and |:library/stdtypes.txt/str:Unicode strings|, and thus does
not otherwise directly address the issue of character encodings.

The RFC prohibits adding a byte order mark (BOM) to the start of a JSON text,
and this module’s serializer does not add a BOM to its output. The RFC permits,
but does not require, JSON deserializers to ignore an initial BOM in their
input.  This module’s deserializer raises a |:library/exceptions.txt/ValueError:ValueError| when an initial BOM is
present.

The RFC does not explicitly forbid JSON strings which contain byte sequences
that don’t correspond to valid Unicode characters (e.g. unpaired UTF-16
surrogates), but it does note that they may cause interoperability problems. By
default, this module accepts and outputs (when present in the original |:library/stdtypes.txt/str:str|)
code points for such sequences.

## infinite-and-nan-number-values:Infinite and NaN Number Values

The RFC does not permit the representation of infinite or NaN number values.
Despite that, by default, this module accepts and outputs "Infinity", "-Infinity
", and "NaN" as if they were valid JSON number literal values:

```rst
>>> # Neither of these calls raises an exception, but the results are not valid JSON
>>> json.dumps(float('-inf'))
'-Infinity'
>>> json.dumps(float('nan'))
'NaN'
>>> # Same when deserializing
>>> json.loads('-Infinity')
-inf
>>> json.loads('NaN')
nan
```

In the serializer, the *allow_nan* parameter can be used to alter this behavior.
In the deserializer, the *parse_constant* parameter can be used to alter this
behavior.

## repeated-names-within-an-object:Repeated Names Within an Object

The RFC specifies that the names within a JSON object should be unique, but does
not mandate how repeated names in JSON objects should be handled.  By default,
this module does not raise an exception; instead, it ignores all but the last
name-value pair for a given name:

```rst
>>> weird_json = '{"x": 1, "x": 2, "x": 3}'
>>> json.loads(weird_json)
{'x': 3}
```

The *object_pairs_hook* parameter can be used to alter this behavior.

## top-level-non-object-non-array-values:Top-level Non-Object, Non-Array Values

The old version of JSON specified by the obsolete *|index-3:⚓|* |:tools.ietf.org/html/rfc4627.html:RFC 4627|
required that the top-level value of a JSON text must be either a JSON object or
array (Python |:library/stdtypes.txt/dict:dict| or |:library/stdtypes.txt/list:list|), and could not be a JSON null, boolean, number,
or string value.  *|index-4:⚓|* |:tools.ietf.org/html/rfc7159.html:RFC 7159| removed that restriction, and this
module does not and has never implemented that restriction in either its
serializer or its deserializer.

Regardless, for maximum interoperability, you may wish to voluntarily adhere to
the restriction yourself.

## implementation-limitations:Implementation Limitations

Some JSON deserializer implementations may set limits on:

* the size of accepted JSON texts

* the maximum level of nesting of JSON objects and arrays

* the range and precision of JSON numbers

* the content and maximum length of JSON strings

This module does not impose any such limits beyond those of the relevant Python
datatypes themselves or the Python interpreter itself.

When serializing to JSON, beware any such limitations in applications that may
consume your JSON.  In particular, it is common for JSON numbers to be
deserialized into IEEE 754 double precision numbers and thus subject to that
representation’s range and precision limitations.  This is especially relevant
when serializing Python |:library/functions.txt/int:int| values of extremely large magnitude, or when
serializing instances of “exotic” numerical types such as |:library/decimal.txt/decimal.Decimal:decimal.Decimal|.

*|json-commandline:⚓|* # module-json.tool:Command Line Interface

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/json/tool.py:Lib/json/tool.py|

======================================================================

The |:module-json.tool:json.tool| module provides a simple command line interface to validate and
pretty-print JSON objects.

If the optional "infile" and "outfile" arguments are not specified, |:library/sys.txt/sys.stdin:sys.stdin|
and |:library/sys.txt/sys.stdout:sys.stdout| will be used respectively:

```rst
$ echo '{"json": "obj"}' | python -m json.tool
{
    "json": "obj"
}
$ echo '{1.2:3.4}' | python -m json.tool
Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
```

Changed in version 3.5: The output is now in the same order as the input. Use
the |:cmdoption-json.tool-sort-keys:--sort-keys| option to sort the output of dictionaries alphabetically by
key.

## command-line-options:Command line options

*cmdoption-json.tool-arg-infile:infile*

   The JSON file to be validated or pretty-printed:

```rst
$ python -m json.tool mp_films.json
[
    {
        "title": "And Now for Something Completely Different",
        "year": 1971
    },
    {
        "title": "Monty Python and the Holy Grail",
        "year": 1975
    }
]
```

   If *infile* is not specified, read from |:library/sys.txt/sys.stdin:sys.stdin|.

*cmdoption-json.tool-arg-outfile:outfile*

   Write the output of the *infile* to the given *outfile*. Otherwise, write it to
   |:library/sys.txt/sys.stdout:sys.stdout|.

*cmdoption-json.tool-sort-keys:--sort-keys*

   Sort the output of dictionaries alphabetically by key.

   New in version 3.5.

*cmdoption-json.tool-json-lines:--json-lines*

   Parse every input line as separate JSON object.

   New in version 3.8.

*cmdoption-json.tool-h:-h, --help*

   Show the help message.

-[ Footnotes ]-

[1] As noted in |:www.rfc-editor.org/errata_search.php?rfc=7159:the errata for RFC 7159|*|the-errata-for-rfc-7159:⚓|* , JSON
    permits literal U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR)
    characters in strings, whereas JavaScript (as of ECMAScript Edition 5.1) does
    not.



