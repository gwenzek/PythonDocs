%hyperhelp title="dbm" date="2021-07-11"
*|module-dbm:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/dbm/__init__.py:Lib/dbm/__init__.py|

======================================================================

|:module-dbm:dbm| is a generic interface to variants of the DBM database — |:module-dbm.gnu:dbm.gnu| or
|:module-dbm.ndbm:dbm.ndbm|.  If none of these modules is installed, the slow-but-simple
implementation in module |:module-dbm.dumb:dbm.dumb| will be used.  There is a
|:www.jcea.es/programacion/pybsddb.htm:third party interface|*|third-party-interface:⚓|*  to the Oracle Berkeley DB.

*dbm.error:exception dbm.error*

   A tuple containing the exceptions that can be raised by each of the supported
   modules, with a unique exception also named |:dbm.error:dbm.error| as the first item — the
   latter is used when |:dbm.error:dbm.error| is raised.

*dbm.whichdb:dbm.whichdb(filename)*

   This function attempts to guess which of the several simple database modules
   available — |:module-dbm.gnu:dbm.gnu|, |:module-dbm.ndbm:dbm.ndbm| or |:module-dbm.dumb:dbm.dumb| — should be used to open a given
   file.

   Returns one of the following values: "None" if the file can’t be opened because
   it’s unreadable or doesn’t exist; the empty string ("''") if the file’s format
   can’t be guessed; or a string containing the required module name, such as "
   'dbm.ndbm'" or "'dbm.gnu'".

*dbm.open:dbm.open(file, flag='r', mode=0o666)*

   Open the database file *file* and return a corresponding object.

   If the database file already exists, the |:dbm.whichdb:whichdb()| function is used to
   determine its type and the appropriate module is used; if it does not exist, the
   first module listed above that can be imported is used.

   The optional *flag* argument can be:

   +-----------+---------------------------------------------+
   | Value     | Meaning                                     |
   |===========|=============================================|
   | "'r'"     | Open existing database for reading only     |
   |           | (default)                                   |
   +-----------+---------------------------------------------+
   | "'w'"     | Open existing database for reading and      |
   |           | writing                                     |
   +-----------+---------------------------------------------+
   | "'c'"     | Open database for reading and writing,      |
   |           | creating it if it doesn’t exist             |
   +-----------+---------------------------------------------+
   | "'n'"     | Always create a new, empty database, open   |
   |           | for reading and writing                     |
   +-----------+---------------------------------------------+

   The optional *mode* argument is the Unix mode of the file, used only when the
   database has to be created.  It defaults to octal "0o666" (and will be modified
   by the prevailing umask).

The object returned by |:dbm.open:open()| supports the same basic functionality as
dictionaries; keys and their corresponding values can be stored, retrieved, and
deleted, and the |:reference/expressions.txt/in:in| operator and the "keys()" method are available, as well as
"get()" and "setdefault()".

Changed in version 3.2: "get()" and "setdefault()" are now available in all
database modules.

Changed in version 3.8: Deleting a key from a read-only database raises database
module specific error instead of |:library/exceptions.txt/KeyError:KeyError|.

Key and values are always stored as bytes. This means that when strings are used
they are implicitly converted to the default encoding before being stored.

These objects also support being used in a |:reference/compound_stmts.txt/with:with| statement, which will
automatically close them when done.

Changed in version 3.4: Added native support for the context management protocol
to the objects returned by |:dbm.open:open()|.

The following example records some hostnames and a corresponding title,  and
then prints out the contents of the database:

```rst
import dbm

# Open database, creating it if necessary.
with dbm.open('cache', 'c') as db:

    # Record some values
    db[b'hello'] = b'there'
    db['www.python.org'] = 'Python Website'
    db['www.cnn.com'] = 'Cable News Network'

    # Note that the keys are considered bytes now.
    assert db[b'www.python.org'] == b'Python Website'
    # Notice how the value is now in bytes.
    assert db['www.cnn.com'] == b'Cable News Network'

    # Often-used methods of the dict interface work too.
    print(db.get('python.org', b'not present'))

    # Storing a non-string key or value will raise an exception (most
    # likely a TypeError).
    db['www.yahoo.com'] = 4

# db is automatically closed when leaving the with statement.
```

See also:

  Module |:library/shelve.txt/module-shelve:shelve|
     Persistence module which stores non-string data.

The individual submodules are described in the following sections.

# module-dbm.gnu:|:module-dbm.gnu:dbm.gnu| — GNU’s reinterpretation of dbm

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/dbm/gnu.py:Lib/dbm/gnu.py|

======================================================================

This module is quite similar to the |:module-dbm:dbm| module, but uses the GNU library "gdbm
" instead to provide some additional functionality.  Please note that the file
formats created by |:module-dbm.gnu:dbm.gnu| and |:module-dbm.ndbm:dbm.ndbm| are incompatible.

The |:module-dbm.gnu:dbm.gnu| module provides an interface to the GNU DBM library. "dbm.gnu.gdbm
" objects behave like mappings (dictionaries), except that keys and values are
always converted to bytes before storing.  Printing a "gdbm" object doesn’t
print the keys and values, and the "items()" and "values()" methods are not
supported.

*dbm.gnu.error:exception dbm.gnu.error*

   Raised on |:module-dbm.gnu:dbm.gnu|-specific errors, such as I/O errors. |:library/exceptions.txt/KeyError:KeyError| is raised
   for general mapping errors like specifying an incorrect key.

*dbm.gnu.open:dbm.gnu.open(filename[, flag[, mode]])*

   Open a "gdbm" database and return a "gdbm" object.  The *filename* argument is
   the name of the database file.

   The optional *flag* argument can be:

   +-----------+---------------------------------------------+
   | Value     | Meaning                                     |
   |===========|=============================================|
   | "'r'"     | Open existing database for reading only     |
   |           | (default)                                   |
   +-----------+---------------------------------------------+
   | "'w'"     | Open existing database for reading and      |
   |           | writing                                     |
   +-----------+---------------------------------------------+
   | "'c'"     | Open database for reading and writing,      |
   |           | creating it if it doesn’t exist             |
   +-----------+---------------------------------------------+
   | "'n'"     | Always create a new, empty database, open   |
   |           | for reading and writing                     |
   +-----------+---------------------------------------------+

   The following additional characters may be appended to the flag to control how
   the database is opened:

   +-----------+----------------------------------------------+
   | Value     | Meaning                                      |
   |===========|==============================================|
   | "'f'"     | Open the database in fast mode.  Writes to   |
   |           | the database will not be synchronized.       |
   +-----------+----------------------------------------------+
   | "'s'"     | Synchronized mode. This will cause changes   |
   |           | to the database to be immediately written to |
   |           | the file.                                    |
   +-----------+----------------------------------------------+
   | "'u'"     | Do not lock database.                        |
   +-----------+----------------------------------------------+

   Not all flags are valid for all versions of "gdbm".  The module constant "
   open_flags" is a string of supported flag characters.  The exception |:dbm.gnu.error:error| is
   raised if an invalid flag is specified.

   The optional *mode* argument is the Unix mode of the file, used only when the
   database has to be created.  It defaults to octal "0o666".

   In addition to the dictionary-like methods, "gdbm" objects have the following
   methods:

   *dbm.gnu.gdbm.firstkey:gdbm.firstkey()*

      It’s possible to loop over every key in the database using this method  and the
      |:dbm.gnu.gdbm.nextkey:nextkey()| method.  The traversal is ordered by "gdbm"’s internal hash values,
      and won’t be sorted by the key values.  This method returns the starting key.

   *dbm.gnu.gdbm.nextkey:gdbm.nextkey(key)*

      Returns the key that follows *key* in the traversal.  The following code prints
      every key in the database "db", without having to create a list in memory that
      contains them all:

```rst
k = db.firstkey()
while k != None:
    print(k)
    k = db.nextkey(k)
```

   *dbm.gnu.gdbm.reorganize:gdbm.reorganize()*

      If you have carried out a lot of deletions and would like to shrink the space
      used by the "gdbm" file, this routine will reorganize the database.  "gdbm"
      objects will not shorten the length of a database file except by using this
      reorganization; otherwise, deleted file space will be kept and reused as new
      (key, value) pairs are added.

   *dbm.gnu.gdbm.sync:gdbm.sync()*

      When the database has been opened in fast mode, this method forces any unwritten
      data to be written to the disk.

   *dbm.gnu.gdbm.close:gdbm.close()*

      Close the "gdbm" database.

# module-dbm.ndbm:|:module-dbm.ndbm:dbm.ndbm| — Interface based on ndbm

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/dbm/ndbm.py:Lib/dbm/ndbm.py|

======================================================================

The |:module-dbm.ndbm:dbm.ndbm| module provides an interface to the Unix “(n)dbm” library. Dbm
objects behave like mappings (dictionaries), except that keys and values are
always stored as bytes. Printing a "dbm" object doesn’t print the keys and
values, and the "items()" and "values()" methods are not supported.

This module can be used with the “classic” ndbm interface or the GNU GDBM
compatibility interface. On Unix, the *configure* script will attempt to locate
the appropriate header file to simplify building this module.

*dbm.ndbm.error:exception dbm.ndbm.error*

   Raised on |:module-dbm.ndbm:dbm.ndbm|-specific errors, such as I/O errors. |:library/exceptions.txt/KeyError:KeyError| is raised
   for general mapping errors like specifying an incorrect key.

*dbm.ndbm.library:dbm.ndbm.library*

   Name of the "ndbm" implementation library used.

*dbm.ndbm.open:dbm.ndbm.open(filename[, flag[, mode]])*

   Open a dbm database and return a "ndbm" object.  The *filename* argument is the
   name of the database file (without the ".dir" or ".pag" extensions).

   The optional *flag* argument must be one of these values:

   +-----------+---------------------------------------------+
   | Value     | Meaning                                     |
   |===========|=============================================|
   | "'r'"     | Open existing database for reading only     |
   |           | (default)                                   |
   +-----------+---------------------------------------------+
   | "'w'"     | Open existing database for reading and      |
   |           | writing                                     |
   +-----------+---------------------------------------------+
   | "'c'"     | Open database for reading and writing,      |
   |           | creating it if it doesn’t exist             |
   +-----------+---------------------------------------------+
   | "'n'"     | Always create a new, empty database, open   |
   |           | for reading and writing                     |
   +-----------+---------------------------------------------+

   The optional *mode* argument is the Unix mode of the file, used only when the
   database has to be created.  It defaults to octal "0o666" (and will be modified
   by the prevailing umask).

   In addition to the dictionary-like methods, "ndbm" objects provide the following
   method:

   *dbm.ndbm.ndbm.close:ndbm.close()*

      Close the "ndbm" database.

# module-dbm.dumb:|:module-dbm.dumb:dbm.dumb| — Portable DBM implementation

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/dbm/dumb.py:Lib/dbm/dumb.py|

*|index-0:⚓|*

Note:

  The |:module-dbm.dumb:dbm.dumb| module is intended as a last resort fallback for the |:module-dbm:dbm| module
  when a more robust module is not available. The |:module-dbm.dumb:dbm.dumb| module is not written
  for speed and is not nearly as heavily used as the other database modules.

======================================================================

The |:module-dbm.dumb:dbm.dumb| module provides a persistent dictionary-like interface which is
written entirely in Python.  Unlike other modules such as |:module-dbm.gnu:dbm.gnu| no external
library is required.  As with other persistent mappings, the keys and values are
always stored as bytes.

The module defines the following:

*dbm.dumb.error:exception dbm.dumb.error*

   Raised on |:module-dbm.dumb:dbm.dumb|-specific errors, such as I/O errors.  |:library/exceptions.txt/KeyError:KeyError| is raised
   for general mapping errors like specifying an incorrect key.

*dbm.dumb.open:dbm.dumb.open(filename[, flag[, mode]])*

   Open a "dumbdbm" database and return a dumbdbm object.  The *filename* argument
   is the basename of the database file (without any specific extensions).  When a
   dumbdbm database is created, files with ".dat" and ".dir" extensions are
   created.

   The optional *flag* argument can be:

   +-----------+---------------------------------------------+
   | Value     | Meaning                                     |
   |===========|=============================================|
   | "'r'"     | Open existing database for reading only     |
   |           | (default)                                   |
   +-----------+---------------------------------------------+
   | "'w'"     | Open existing database for reading and      |
   |           | writing                                     |
   +-----------+---------------------------------------------+
   | "'c'"     | Open database for reading and writing,      |
   |           | creating it if it doesn’t exist             |
   +-----------+---------------------------------------------+
   | "'n'"     | Always create a new, empty database, open   |
   |           | for reading and writing                     |
   +-----------+---------------------------------------------+

   The optional *mode* argument is the Unix mode of the file, used only when the
   database has to be created.  It defaults to octal "0o666" (and will be modified
   by the prevailing umask).

   Warning:

     It is possible to crash the Python interpreter when loading a database with a
     sufficiently large/complex entry due to stack depth limitations in Python’s AST
     compiler.

   Changed in version 3.5: |:dbm.dumb.open:open()| always creates a new database when the flag has
   the value "'n'".

   Changed in version 3.8: A database opened with flags "'r'" is now read-only.
   Opening with flags "'r'" and "'w'" no longer creates a database if it does not
   exist.

   In addition to the methods provided by the |:library/collections.abc.txt/collections.abc.MutableMapping:collections.abc.MutableMapping|
   class, "dumbdbm" objects provide the following methods:

   *dbm.dumb.dumbdbm.sync:dumbdbm.sync()*

      Synchronize the on-disk directory and data files.  This method is called by the
      "Shelve.sync()" method.

   *dbm.dumb.dumbdbm.close:dumbdbm.close()*

      Close the "dumbdbm" database.



