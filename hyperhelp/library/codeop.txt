%hyperhelp title="codeop" date="2021-07-11"
*|module-codeop:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/codeop.py:Lib/codeop.py|

======================================================================

The |:module-codeop:codeop| module provides utilities upon which the Python read-eval-print
loop can be emulated, as is done in the |:library/code.txt/module-code:code| module.  As a result, you
probably don’t want to use the module directly; if you want to include such a
loop in your program you probably want to use the |:library/code.txt/module-code:code| module instead.

There are two parts to this job:

1. Being able to tell if a line of input completes a Python  statement: in short,
   telling whether to print ‘">>>"’ or ‘"..."’ next.

2. Remembering which future statements the user has entered, so  subsequent input
   can be compiled with these in effect.

The |:module-codeop:codeop| module provides a way of doing each of these things, and a way of
doing them both.

To do just the former:

*codeop.compile_command:codeop.compile_command(source, filename='<input>', symbol='single')*

   Tries to compile *source*, which should be a string of Python code and return a
   code object if *source* is valid Python code. In that case, the filename
   attribute of the code object will be *filename*, which defaults to "'<input>'".
   Returns "None" if *source* is *not* valid Python code, but is a prefix of valid
   Python code.

   If there is a problem with *source*, an exception will be raised. |:library/exceptions.txt/SyntaxError:SyntaxError|
   is raised if there is invalid Python syntax, and |:library/exceptions.txt/OverflowError:OverflowError| or |:library/exceptions.txt/ValueError:ValueError|
   if there is an invalid literal.

   The *symbol* argument determines whether *source* is compiled as a statement ("
   'single'", the default), as a sequence of statements ("'exec'") or as an
   |:glossary.txt/term-expression:expression| ("'eval'").  Any other value will cause |:library/exceptions.txt/ValueError:ValueError| to  be raised.

   Note:

     It is possible (but not likely) that the parser stops parsing with a successful
     outcome before reaching the end of the source; in this case, trailing symbols
     may be ignored instead of causing an error.  For example, a backslash followed
     by two newlines may be followed by arbitrary garbage. This will be fixed once
     the API for the parser is better.

*codeop.Compile:class codeop.Compile*

   Instances of this class have "__call__()" methods identical in signature to the
   built-in function |:library/functions.txt/compile:compile()|, but with the difference that if the instance
   compiles program text containing a |:library/__future__.txt/module-__future__:__future__| statement, the instance
   ‘remembers’ and compiles all subsequent program texts with the statement in
   force.

*codeop.CommandCompiler:class codeop.CommandCompiler*

   Instances of this class have "__call__()" methods identical in signature to
   |:codeop.compile_command:compile_command()|; the difference is that if the instance compiles program
   text containing a "__future__" statement, the instance ‘remembers’ and compiles
   all subsequent program texts with the statement in force.



