%hyperhelp title="fnmatch" date="2021-07-11"
*|module-fnmatch:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/fnmatch.py:Lib/fnmatch.py|

*|index-0:⚓|* *|index-1:⚓|*

======================================================================

This module provides support for Unix shell-style wildcards, which are *not* the
same as regular expressions (which are documented in the |:library/re.txt/module-re:re| module).  The
special characters used in shell-style wildcards are:

*|index-2:⚓|*

+--------------+--------------------------------------+
| Pattern      | Meaning                              |
|==============|======================================|
| "*"          | matches everything                   |
+--------------+--------------------------------------+
| "?"          | matches any single character         |
+--------------+--------------------------------------+
| "[seq]"      | matches any character in *seq*       |
+--------------+--------------------------------------+
| "[!seq]"     | matches any character not in *seq*   |
+--------------+--------------------------------------+

For a literal match, wrap the meta-characters in brackets. For example, "'[?]'"
matches the character "'?'".

*|index-3:⚓|*

Note that the filename separator ("'/'" on Unix) is *not* special to this
module.  See module |:library/glob.txt/module-glob:glob| for pathname expansion (|:library/glob.txt/module-glob:glob| uses |:fnmatch.filter:filter()| to
match pathname segments).  Similarly, filenames starting with a period are not
special for this module, and are matched by the "*" and "?" patterns.

*fnmatch.fnmatch:fnmatch.fnmatch(filename, pattern)*

   Test whether the *filename* string matches the *pattern* string, returning
   |:library/constants.txt/True:True| or |:library/constants.txt/False:False|.  Both parameters are case-normalized using
   |:library/os.path.txt/os.path.normcase:os.path.normcase()|. |:fnmatch.fnmatchcase:fnmatchcase()| can be used to perform a case-sensitive
   comparison, regardless of whether that’s standard for the operating system.

   This example will print all file names in the current directory with the
   extension ".txt":

```rst
import fnmatch
import os

for file in os.listdir('.'):
    if fnmatch.fnmatch(file, '*.txt'):
        print(file)
```

*fnmatch.fnmatchcase:fnmatch.fnmatchcase(filename, pattern)*

   Test whether *filename* matches *pattern*, returning |:library/constants.txt/True:True| or |:library/constants.txt/False:False|; the
   comparison is case-sensitive and does not apply |:library/os.path.txt/os.path.normcase:os.path.normcase()|.

*fnmatch.filter:fnmatch.filter(names, pattern)*

   Construct a list from those elements of the iterable *names* that match *pattern
   *. It is the same as "[n for n in names if fnmatch(n, pattern)]", but
   implemented more efficiently.

*fnmatch.translate:fnmatch.translate(pattern)*

   Return the shell-style *pattern* converted to a regular expression for using
   with |:library/re.txt/re.match:re.match()|.

   Example:

```python
>>> import fnmatch, re
>>>
>>> regex = fnmatch.translate('*.txt')
>>> regex
'(?s:.*\\.txt)\\Z'
>>> reobj = re.compile(regex)
>>> reobj.match('foobar.txt')
<re.Match object; span=(0, 10), match='foobar.txt'>
```

See also:

  Module |:library/glob.txt/module-glob:glob|
     Unix shell-style path expansion.



