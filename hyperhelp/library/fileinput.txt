%hyperhelp title="fileinput" date="2021-07-11"
*|module-fileinput:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/fileinput.py:Lib/fileinput.py|

======================================================================

This module implements a helper class and functions to quickly write a loop over
standard input or a list of files. If you just want to read or write one file
see |:library/functions.txt/open:open()|.

The typical use is:

```rst
import fileinput
for line in fileinput.input():
    process(line)
```

This iterates over the lines of all files listed in "sys.argv[1:]", defaulting
to "sys.stdin" if the list is empty.  If a filename is "'-'", it is also
replaced by "sys.stdin" and the optional arguments *mode* and *openhook* are
ignored.  To specify an alternative list of filenames, pass it as the first
argument to |:fileinput.input:input()|.  A single file name is also allowed.

All files are opened in text mode by default, but you can override this by
specifying the *mode* parameter in the call to |:fileinput.input:input()| or |:fileinput.FileInput:FileInput|.  If an
I/O error occurs during opening or reading a file, |:library/exceptions.txt/OSError:OSError| is raised.

Changed in version 3.3: |:library/exceptions.txt/IOError:IOError| used to be raised; it is now an alias of
|:library/exceptions.txt/OSError:OSError|.

If "sys.stdin" is used more than once, the second and further use will return no
lines, except perhaps for interactive use, or if it has been explicitly reset
(e.g. using "sys.stdin.seek(0)").

Empty files are opened and immediately closed; the only time their presence in
the list of filenames is noticeable at all is when the last file opened is
empty.

Lines are returned with any newlines intact, which means that the last line in a
file may not have one.

You can control how files are opened by providing an opening hook via the *
openhook* parameter to |:fileinput.input:fileinput.input()| or |:fileinput.FileInput:FileInput()|. The hook must be a
function that takes two arguments, *filename* and *mode*, and returns an
accordingly opened file-like object. Two useful hooks are already provided by
this module.

The following function is the primary interface of this module:

*fileinput.input:fileinput.input(files=None, inplace=False, backup='', *, mode='r', openhook=None)*

   Create an instance of the |:fileinput.FileInput:FileInput| class.  The instance will be used as
   global state for the functions of this module, and is also returned to use
   during iteration.  The parameters to this function will be passed along to the
   constructor of the |:fileinput.FileInput:FileInput| class.

   The |:fileinput.FileInput:FileInput| instance can be used as a context manager in the |:reference/compound_stmts.txt/with:with|
   statement.  In this example, *input* is closed after the "with" statement is
   exited, even if an exception occurs:

```rst
with fileinput.input(files=('spam.txt', 'eggs.txt')) as f:
    for line in f:
        process(line)
```

   Changed in version 3.2: Can be used as a context manager.

   Changed in version 3.8: The keyword parameters *mode* and *openhook* are now
   keyword-only.

The following functions use the global state created by |:fileinput.input:fileinput.input()|; if
there is no active state, |:library/exceptions.txt/RuntimeError:RuntimeError| is raised.

*fileinput.filename:fileinput.filename()*

   Return the name of the file currently being read.  Before the first line has
   been read, returns "None".

*fileinput.fileno:fileinput.fileno()*

   Return the integer “file descriptor” for the current file. When no file is
   opened (before the first line and between files), returns "-1".

*fileinput.lineno:fileinput.lineno()*

   Return the cumulative line number of the line that has just been read.  Before
   the first line has been read, returns "0".  After the last line of the last file
   has been read, returns the line number of that line.

*fileinput.filelineno:fileinput.filelineno()*

   Return the line number in the current file.  Before the first line has been
   read, returns "0".  After the last line of the last file has been read, returns
   the line number of that line within the file.

*fileinput.isfirstline:fileinput.isfirstline()*

   Return "True" if the line just read is the first line of its file, otherwise
   return "False".

*fileinput.isstdin:fileinput.isstdin()*

   Return "True" if the last line was read from "sys.stdin", otherwise return "
   False".

*fileinput.nextfile:fileinput.nextfile()*

   Close the current file so that the next iteration will read the first line from
   the next file (if any); lines not read from the file will not count towards the
   cumulative line count.  The filename is not changed until after the first line
   of the next file has been read.  Before the first line has been read, this
   function has no effect; it cannot be used to skip the first file.  After the
   last line of the last file has been read, this function has no effect.

*fileinput.close:fileinput.close()*

   Close the sequence.

The class which implements the sequence behavior provided by the module is
available for subclassing as well:

*fileinput.FileInput:class fileinput.FileInput(files=None, inplace=False, backup='', *, mode='r', openhook=None)*

   Class |:fileinput.FileInput:FileInput| is the implementation; its methods |:fileinput.filename:filename()|, |:fileinput.fileno:fileno()|,
   |:fileinput.lineno:lineno()|, |:fileinput.filelineno:filelineno()|, |:fileinput.isfirstline:isfirstline()|, |:fileinput.isstdin:isstdin()|, |:fileinput.nextfile:nextfile()| and
   |:fileinput.close:close()| correspond to the functions of the same name in the module. In
   addition it has a |:library/io.txt/io.TextIOBase.readline:readline()| method which returns the next input line, and a "
   __getitem__()" method which implements the sequence behavior. The sequence must
   be accessed in strictly sequential order; random access and |:library/io.txt/io.TextIOBase.readline:readline()| cannot
   be mixed.

   With *mode* you can specify which file mode will be passed to |:library/functions.txt/open:open()|. It must
   be one of "'r'", "'rU'", "'U'" and "'rb'".

   The *openhook*, when given, must be a function that takes two arguments, *
   filename* and *mode*, and returns an accordingly opened file-like object. You
   cannot use *inplace* and *openhook* together.

   A |:fileinput.FileInput:FileInput| instance can be used as a context manager in the |:reference/compound_stmts.txt/with:with| statement.
   In this example, *input* is closed after the "with" statement is exited, even if
   an exception occurs:

```rst
with FileInput(files=('spam.txt', 'eggs.txt')) as input:
    process(input)
```

   Changed in version 3.2: Can be used as a context manager.

   Deprecated since version 3.4: The "'rU'" and "'U'" modes.

   Deprecated since version 3.8: Support for "__getitem__()" method is deprecated.

   Changed in version 3.8: The keyword parameter *mode* and *openhook* are now
   keyword-only.

*Optional in-place filtering:* if the keyword argument "inplace=True" is passed
to |:fileinput.input:fileinput.input()| or to the |:fileinput.FileInput:FileInput| constructor, the file is moved to a
backup file and standard output is directed to the input file (if a file of the
same name as the backup file already exists, it will be replaced silently).
This makes it possible to write a filter that rewrites its input file in place.
If the *backup* parameter is given (typically as "backup='.<some extension>'"),
it specifies the extension for the backup file, and the backup file remains
around; by default, the extension is "'.bak'" and it is deleted when the output
file is closed.  In-place filtering is disabled when standard input is read.

The two following opening hooks are provided by this module:

*fileinput.hook_compressed:fileinput.hook_compressed(filename, mode)*

   Transparently opens files compressed with gzip and bzip2 (recognized by the
   extensions "'.gz'" and "'.bz2'") using the |:library/gzip.txt/module-gzip:gzip| and |:library/bz2.txt/module-bz2:bz2| modules.  If the
   filename extension is not "'.gz'" or "'.bz2'", the file is opened normally (ie,
   using |:library/functions.txt/open:open()| without any decompression).

   Usage example:  "fi = fileinput.FileInput(openhook=fileinput.hook_compressed)"

*fileinput.hook_encoded:fileinput.hook_encoded(encoding, errors=None)*

   Returns a hook which opens each file with |:library/functions.txt/open:open()|, using the given *encoding*
   and *errors* to read the file.

   Usage example: "fi =
   fileinput.FileInput(openhook=fileinput.hook_encoded("utf-8", "surrogateescape"))
   "

   Changed in version 3.6: Added the optional *errors* parameter.



