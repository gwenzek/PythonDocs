%hyperhelp title="pathlib" date="2021-07-11"
*|module-pathlib:⚓|*

New in version 3.4.

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/pathlib.py:Lib/pathlib.py|

*|index-0:⚓|*

======================================================================

This module offers classes representing filesystem paths with semantics
appropriate for different operating systems.  Path classes are divided between
|:pure-paths:pure paths|, which provide purely computational operations without I/O, and
|:concrete-paths:concrete paths|, which inherit from pure paths but also provide I/O operations.

[image]

If you’ve never used this module before or just aren’t sure which class is right
for your task, |:pathlib.Path:Path| is most likely what you need. It instantiates a
|:concrete-paths:concrete path| for the platform the code is running on.

Pure paths are useful in some special cases; for example:

1. If you want to manipulate Windows paths on a Unix machine (or vice versa). You
   cannot instantiate a |:pathlib.WindowsPath:WindowsPath| when running on Unix, but you can instantiate
   |:pathlib.PureWindowsPath:PureWindowsPath|.

2. You want to make sure that your code only manipulates paths without actually
   accessing the OS. In this case, instantiating one of the pure classes may be
   useful since those simply don’t have any OS-accessing operations.

See also:

  *|index-1:⚓|* |:www.python.org/dev/peps/pep-0428:PEP 428|: The pathlib module – object-oriented filesystem paths.

See also:

  For low-level path manipulation on strings, you can also use the |:library/os.path.txt/module-os.path:os.path|
  module.

# basic-use:Basic use

Importing the main class:

```rst
>>> from pathlib import Path
```

Listing subdirectories:

```rst
>>> p = Path('.')
>>> [x for x in p.iterdir() if x.is_dir()]
[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),
 PosixPath('__pycache__'), PosixPath('build')]
```

Listing Python source files in this directory tree:

```rst
>>> list(p.glob('**/*.py'))
[PosixPath('test_pathlib.py'), PosixPath('setup.py'),
 PosixPath('pathlib.py'), PosixPath('docs/conf.py'),
 PosixPath('build/lib/pathlib.py')]
```

Navigating inside a directory tree:

```rst
>>> p = Path('/etc')
>>> q = p / 'init.d' / 'reboot'
>>> q
PosixPath('/etc/init.d/reboot')
>>> q.resolve()
PosixPath('/etc/rc.d/init.d/halt')
```

Querying path properties:

```rst
>>> q.exists()
True
>>> q.is_dir()
False
```

Opening a file:

```rst
>>> with q.open() as f: f.readline()
...
'#!/bin/bash\n'
```

*|pure-paths:⚓|* # pure-paths:Pure paths

Pure path objects provide path-handling operations which don’t actually access a
filesystem.  There are three ways to access these classes, which we also call *
flavours*:

*pathlib.PurePath:class pathlib.PurePath(*pathsegments)*

   A generic class that represents the system’s path flavour (instantiating it
   creates either a |:pathlib.PurePosixPath:PurePosixPath| or a |:pathlib.PureWindowsPath:PureWindowsPath|):

```rst
>>> PurePath('setup.py')      # Running on a Unix machine
PurePosixPath('setup.py')
```

   Each element of *pathsegments* can be either a string representing a path
   segment, an object implementing the |:library/os.txt/os.PathLike:os.PathLike| interface which returns a
   string, or another path object:

```rst
>>> PurePath('foo', 'some/path', 'bar')
PurePosixPath('foo/some/path/bar')
>>> PurePath(Path('foo'), Path('bar'))
PurePosixPath('foo/bar')
```

   When *pathsegments* is empty, the current directory is assumed:

```rst
>>> PurePath()
PurePosixPath('.')
```

   When several absolute paths are given, the last is taken as an anchor (mimicking
   |:library/os.path.txt/os.path.join:os.path.join()|’s behaviour):

```rst
>>> PurePath('/etc', '/usr', 'lib64')
PurePosixPath('/usr/lib64')
>>> PureWindowsPath('c:/Windows', 'd:bar')
PureWindowsPath('d:bar')
```

   However, in a Windows path, changing the local root doesn’t discard the previous
   drive setting:

```rst
>>> PureWindowsPath('c:/Windows', '/Program Files')
PureWindowsPath('c:/Program Files')
```

   Spurious slashes and single dots are collapsed, but double dots ("'..'") are
   not, since this would change the meaning of a path in the face of symbolic
   links:

```rst
>>> PurePath('foo//bar')
PurePosixPath('foo/bar')
>>> PurePath('foo/./bar')
PurePosixPath('foo/bar')
>>> PurePath('foo/../bar')
PurePosixPath('foo/../bar')
```

   (a naïve approach would make "PurePosixPath('foo/../bar')" equivalent to "
   PurePosixPath('bar')", which is wrong if "foo" is a symbolic link to another
   directory)

   Pure path objects implement the |:library/os.txt/os.PathLike:os.PathLike| interface, allowing them to be
   used anywhere the interface is accepted.

   Changed in version 3.6: Added support for the |:library/os.txt/os.PathLike:os.PathLike| interface.

*pathlib.PurePosixPath:class pathlib.PurePosixPath(*pathsegments)*

   A subclass of |:pathlib.PurePath:PurePath|, this path flavour represents non-Windows filesystem
   paths:

```rst
>>> PurePosixPath('/etc')
PurePosixPath('/etc')
```

   *pathsegments* is specified similarly to |:pathlib.PurePath:PurePath|.

*pathlib.PureWindowsPath:class pathlib.PureWindowsPath(*pathsegments)*

   A subclass of |:pathlib.PurePath:PurePath|, this path flavour represents Windows filesystem paths:

```rst
>>> PureWindowsPath('c:/Program Files/')
PureWindowsPath('c:/Program Files')
```

   *pathsegments* is specified similarly to |:pathlib.PurePath:PurePath|.

Regardless of the system you’re running on, you can instantiate all of these
classes, since they don’t provide any operation that does system calls.

## general-properties:General properties

Paths are immutable and hashable.  Paths of a same flavour are comparable and
orderable.  These properties respect the flavour’s case-folding semantics:

```rst
>>> PurePosixPath('foo') == PurePosixPath('FOO')
False
>>> PureWindowsPath('foo') == PureWindowsPath('FOO')
True
>>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }
True
>>> PureWindowsPath('C:') < PureWindowsPath('d:')
True
```

Paths of a different flavour compare unequal and cannot be ordered:

```rst
>>> PureWindowsPath('foo') == PurePosixPath('foo')
False
>>> PureWindowsPath('foo') < PurePosixPath('foo')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '<' not supported between instances of 'PureWindowsPath' and 'PurePosixPath'
```

## operators:Operators

The slash operator helps create child paths, similarly to |:library/os.path.txt/os.path.join:os.path.join()|:

```rst
>>> p = PurePath('/etc')
>>> p
PurePosixPath('/etc')
>>> p / 'init.d' / 'apache2'
PurePosixPath('/etc/init.d/apache2')
>>> q = PurePath('bin')
>>> '/usr' / q
PurePosixPath('/usr/bin')
```

A path object can be used anywhere an object implementing |:library/os.txt/os.PathLike:os.PathLike| is
accepted:

```rst
>>> import os
>>> p = PurePath('/etc')
>>> os.fspath(p)
'/etc'
```

The string representation of a path is the raw filesystem path itself (in native
form, e.g. with backslashes under Windows), which you can pass to any function
taking a file path as a string:

```rst
>>> p = PurePath('/etc')
>>> str(p)
'/etc'
>>> p = PureWindowsPath('c:/Program Files')
>>> str(p)
'c:\\Program Files'
```

Similarly, calling |:library/stdtypes.txt/bytes:bytes| on a path gives the raw filesystem path as a bytes
object, as encoded by |:library/os.txt/os.fsencode:os.fsencode()|:

```rst
>>> bytes(p)
b'/etc'
```

Note:

  Calling |:library/stdtypes.txt/bytes:bytes| is only recommended under Unix.  Under Windows, the unicode form
  is the canonical representation of filesystem paths.

## accessing-individual-parts:Accessing individual parts

To access the individual “parts” (components) of a path, use the following
property:

*pathlib.PurePath.parts:PurePath.parts*

   A tuple giving access to the path’s various components:

```rst
>>> p = PurePath('/usr/bin/python3')
>>> p.parts
('/', 'usr', 'bin', 'python3')

>>> p = PureWindowsPath('c:/Program Files/PSF')
>>> p.parts
('c:\\', 'Program Files', 'PSF')
```

   (note how the drive and local root are regrouped in a single part)

## methods-and-properties:Methods and properties

Pure paths provide the following methods and properties:

*pathlib.PurePath.drive:PurePath.drive*

   A string representing the drive letter or name, if any:

```rst
>>> PureWindowsPath('c:/Program Files/').drive
'c:'
>>> PureWindowsPath('/Program Files/').drive
''
>>> PurePosixPath('/etc').drive
''
```

   UNC shares are also considered drives:

```rst
>>> PureWindowsPath('//host/share/foo.txt').drive
'\\\\host\\share'
```

*pathlib.PurePath.root:PurePath.root*

   A string representing the (local or global) root, if any:

```rst
>>> PureWindowsPath('c:/Program Files/').root
'\\'
>>> PureWindowsPath('c:Program Files/').root
''
>>> PurePosixPath('/etc').root
'/'
```

   UNC shares always have a root:

```rst
>>> PureWindowsPath('//host/share').root
'\\'
```

*pathlib.PurePath.anchor:PurePath.anchor*

   The concatenation of the drive and root:

```rst
>>> PureWindowsPath('c:/Program Files/').anchor
'c:\\'
>>> PureWindowsPath('c:Program Files/').anchor
'c:'
>>> PurePosixPath('/etc').anchor
'/'
>>> PureWindowsPath('//host/share').anchor
'\\\\host\\share\\'
```

*pathlib.PurePath.parents:PurePath.parents*

   An immutable sequence providing access to the logical ancestors of the path:

```rst
>>> p = PureWindowsPath('c:/foo/bar/setup.py')
>>> p.parents[0]
PureWindowsPath('c:/foo/bar')
>>> p.parents[1]
PureWindowsPath('c:/foo')
>>> p.parents[2]
PureWindowsPath('c:/')
```

*pathlib.PurePath.parent:PurePath.parent*

   The logical parent of the path:

```rst
>>> p = PurePosixPath('/a/b/c/d')
>>> p.parent
PurePosixPath('/a/b/c')
```

   You cannot go past an anchor, or empty path:

```rst
>>> p = PurePosixPath('/')
>>> p.parent
PurePosixPath('/')
>>> p = PurePosixPath('.')
>>> p.parent
PurePosixPath('.')
```

   Note:

     This is a purely lexical operation, hence the following behaviour:

```rst
>>> p = PurePosixPath('foo/..')
>>> p.parent
PurePosixPath('foo')
```

     If you want to walk an arbitrary filesystem path upwards, it is recommended to
     first call |:pathlib.Path.resolve:Path.resolve()| so as to resolve symlinks and eliminate *“..”*
     components.

*pathlib.PurePath.name:PurePath.name*

   A string representing the final path component, excluding the drive and root, if
   any:

```rst
>>> PurePosixPath('my/library/setup.py').name
'setup.py'
```

   UNC drive names are not considered:

```rst
>>> PureWindowsPath('//some/share/setup.py').name
'setup.py'
>>> PureWindowsPath('//some/share').name
''
```

*pathlib.PurePath.suffix:PurePath.suffix*

   The file extension of the final component, if any:

```rst
>>> PurePosixPath('my/library/setup.py').suffix
'.py'
>>> PurePosixPath('my/library.tar.gz').suffix
'.gz'
>>> PurePosixPath('my/library').suffix
''
```

*pathlib.PurePath.suffixes:PurePath.suffixes*

   A list of the path’s file extensions:

```rst
>>> PurePosixPath('my/library.tar.gar').suffixes
['.tar', '.gar']
>>> PurePosixPath('my/library.tar.gz').suffixes
['.tar', '.gz']
>>> PurePosixPath('my/library').suffixes
[]
```

*pathlib.PurePath.stem:PurePath.stem*

   The final path component, without its suffix:

```rst
>>> PurePosixPath('my/library.tar.gz').stem
'library.tar'
>>> PurePosixPath('my/library.tar').stem
'library'
>>> PurePosixPath('my/library').stem
'library'
```

*pathlib.PurePath.as_posix:PurePath.as_posix()*

   Return a string representation of the path with forward slashes ("/"):

```rst
>>> p = PureWindowsPath('c:\\windows')
>>> str(p)
'c:\\windows'
>>> p.as_posix()
'c:/windows'
```

*pathlib.PurePath.as_uri:PurePath.as_uri()*

   Represent the path as a "file" URI.  |:library/exceptions.txt/ValueError:ValueError| is raised if the path isn’t
   absolute.

```python
>>> p = PurePosixPath('/etc/passwd')
>>> p.as_uri()
'file:///etc/passwd'
>>> p = PureWindowsPath('c:/Windows')
>>> p.as_uri()
'file:///c:/Windows'
```

*pathlib.PurePath.is_absolute:PurePath.is_absolute()*

   Return whether the path is absolute or not.  A path is considered absolute if it
   has both a root and (if the flavour allows) a drive:

```rst
>>> PurePosixPath('/a/b').is_absolute()
True
>>> PurePosixPath('a/b').is_absolute()
False

>>> PureWindowsPath('c:/a/b').is_absolute()
True
>>> PureWindowsPath('/a/b').is_absolute()
False
>>> PureWindowsPath('c:').is_absolute()
False
>>> PureWindowsPath('//some/share').is_absolute()
True
```

*pathlib.PurePath.is_reserved:PurePath.is_reserved()*

   With |:pathlib.PureWindowsPath:PureWindowsPath|, return "True" if the path is considered reserved under
   Windows, "False" otherwise.  With |:pathlib.PurePosixPath:PurePosixPath|, "False" is always returned.

```python
>>> PureWindowsPath('nul').is_reserved()
True
>>> PurePosixPath('nul').is_reserved()
False
```

   File system calls on reserved paths can fail mysteriously or have unintended
   effects.

*pathlib.PurePath.joinpath:PurePath.joinpath(*other)*

   Calling this method is equivalent to combining the path with each of the *other*
   arguments in turn:

```rst
>>> PurePosixPath('/etc').joinpath('passwd')
PurePosixPath('/etc/passwd')
>>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))
PurePosixPath('/etc/passwd')
>>> PurePosixPath('/etc').joinpath('init.d', 'apache2')
PurePosixPath('/etc/init.d/apache2')
>>> PureWindowsPath('c:').joinpath('/Program Files')
PureWindowsPath('c:/Program Files')
```

*pathlib.PurePath.match:PurePath.match(pattern)*

   Match this path against the provided glob-style pattern.  Return "True" if
   matching is successful, "False" otherwise.

   If *pattern* is relative, the path can be either relative or absolute, and
   matching is done from the right:

```rst
>>> PurePath('a/b.py').match('*.py')
True
>>> PurePath('/a/b/c.py').match('b/*.py')
True
>>> PurePath('/a/b/c.py').match('a/*.py')
False
```

   If *pattern* is absolute, the path must be absolute, and the whole path must
   match:

```rst
>>> PurePath('/a.py').match('/*.py')
True
>>> PurePath('a/b.py').match('/*.py')
False
```

   As with other methods, case-sensitivity follows platform defaults:

```rst
>>> PurePosixPath('b.py').match('*.PY')
False
>>> PureWindowsPath('b.py').match('*.PY')
True
```

*pathlib.PurePath.relative_to:PurePath.relative_to(*other)*

   Compute a version of this path relative to the path represented by *other*.  If
   it’s impossible, ValueError is raised:

```rst
>>> p = PurePosixPath('/etc/passwd')
>>> p.relative_to('/')
PurePosixPath('etc/passwd')
>>> p.relative_to('/etc')
PurePosixPath('passwd')
>>> p.relative_to('/usr')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "pathlib.py", line 694, in relative_to
    .format(str(self), str(formatted)))
ValueError: '/etc/passwd' does not start with '/usr'
```

*pathlib.PurePath.with_name:PurePath.with_name(name)*

   Return a new path with the |:pathlib.PurePath.name:name| changed.  If the original path doesn’t have a
   name, ValueError is raised:

```rst
>>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
>>> p.with_name('setup.py')
PureWindowsPath('c:/Downloads/setup.py')
>>> p = PureWindowsPath('c:/')
>>> p.with_name('setup.py')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/antoine/cpython/default/Lib/pathlib.py", line 751, in with_name
    raise ValueError("%r has an empty name" % (self,))
ValueError: PureWindowsPath('c:/') has an empty name
```

*pathlib.PurePath.with_suffix:PurePath.with_suffix(suffix)*

   Return a new path with the |:pathlib.PurePath.suffix:suffix| changed.  If the original path doesn’t have
   a suffix, the new *suffix* is appended instead.  If the *suffix* is an empty
   string, the original suffix is removed:

```rst
>>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
>>> p.with_suffix('.bz2')
PureWindowsPath('c:/Downloads/pathlib.tar.bz2')
>>> p = PureWindowsPath('README')
>>> p.with_suffix('.txt')
PureWindowsPath('README.txt')
>>> p = PureWindowsPath('README.txt')
>>> p.with_suffix('')
PureWindowsPath('README')
```

*|concrete-paths:⚓|* # concrete-paths:Concrete paths

Concrete paths are subclasses of the pure path classes.  In addition to
operations provided by the latter, they also provide methods to do system calls
on path objects.  There are three ways to instantiate concrete paths:

*pathlib.Path:class pathlib.Path(*pathsegments)*

   A subclass of |:pathlib.PurePath:PurePath|, this class represents concrete paths of the system’s
   path flavour (instantiating it creates either a |:pathlib.PosixPath:PosixPath| or a |:pathlib.WindowsPath:WindowsPath|):

```rst
>>> Path('setup.py')
PosixPath('setup.py')
```

   *pathsegments* is specified similarly to |:pathlib.PurePath:PurePath|.

*pathlib.PosixPath:class pathlib.PosixPath(*pathsegments)*

   A subclass of |:pathlib.Path:Path| and |:pathlib.PurePosixPath:PurePosixPath|, this class represents concrete non-
   Windows filesystem paths:

```rst
>>> PosixPath('/etc')
PosixPath('/etc')
```

   *pathsegments* is specified similarly to |:pathlib.PurePath:PurePath|.

*pathlib.WindowsPath:class pathlib.WindowsPath(*pathsegments)*

   A subclass of |:pathlib.Path:Path| and |:pathlib.PureWindowsPath:PureWindowsPath|, this class represents concrete
   Windows filesystem paths:

```rst
>>> WindowsPath('c:/Program Files/')
WindowsPath('c:/Program Files')
```

   *pathsegments* is specified similarly to |:pathlib.PurePath:PurePath|.

You can only instantiate the class flavour that corresponds to your system
(allowing system calls on non-compatible path flavours could lead to bugs or
failures in your application):

```rst
>>> import os
>>> os.name
'posix'
>>> Path('setup.py')
PosixPath('setup.py')
>>> PosixPath('setup.py')
PosixPath('setup.py')
>>> WindowsPath('setup.py')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "pathlib.py", line 798, in __new__
    % (cls.__name__,))
NotImplementedError: cannot instantiate 'WindowsPath' on your system
```

## methods:Methods

Concrete paths provide the following methods in addition to pure paths methods.
Many of these methods can raise an |:library/exceptions.txt/OSError:OSError| if a system call fails (for example
because the path doesn’t exist).

Changed in version 3.8: |:pathlib.Path.exists:exists()|, |:pathlib.Path.is_dir:is_dir()|, |:pathlib.Path.is_file:is_file()|, |:pathlib.Path.is_mount:is_mount()|,
|:pathlib.Path.is_symlink:is_symlink()|, |:pathlib.Path.is_block_device:is_block_device()|, |:pathlib.Path.is_char_device:is_char_device()|, |:pathlib.Path.is_fifo:is_fifo()|,
|:pathlib.Path.is_socket:is_socket()| now return "False" instead of raising an exception for paths that
contain characters unrepresentable at the OS level.

*pathlib.Path.cwd:classmethod Path.cwd()*

   Return a new path object representing the current directory (as returned by
   |:library/os.txt/os.getcwd:os.getcwd()|):

```rst
>>> Path.cwd()
PosixPath('/home/antoine/pathlib')
```

*pathlib.Path.home:classmethod Path.home()*

   Return a new path object representing the user’s home directory (as returned by
   |:library/os.path.txt/os.path.expanduser:os.path.expanduser()| with "~" construct):

```rst
>>> Path.home()
PosixPath('/home/antoine')
```

   New in version 3.5.

*pathlib.Path.stat:Path.stat()*

   Return a |:library/os.txt/os.stat_result:os.stat_result| object containing information about this path, like
   |:library/os.txt/os.stat:os.stat()|. The result is looked up at each call to this method.

```rst
>>> p = Path('setup.py')
>>> p.stat().st_size
956
>>> p.stat().st_mtime
1327883547.852554
```

*pathlib.Path.chmod:Path.chmod(mode)*

   Change the file mode and permissions, like |:library/os.txt/os.chmod:os.chmod()|:

```rst
>>> p = Path('setup.py')
>>> p.stat().st_mode
33277
>>> p.chmod(0o444)
>>> p.stat().st_mode
33060
```

*pathlib.Path.exists:Path.exists()*

   Whether the path points to an existing file or directory:

```rst
>>> Path('.').exists()
True
>>> Path('setup.py').exists()
True
>>> Path('/etc').exists()
True
>>> Path('nonexistentfile').exists()
False
```

   Note:

     If the path points to a symlink, |:pathlib.Path.exists:exists()| returns whether the symlink *points
     to* an existing file or directory.

*pathlib.Path.expanduser:Path.expanduser()*

   Return a new path with expanded "~" and "~user" constructs, as returned by
   |:library/os.path.txt/os.path.expanduser:os.path.expanduser()|:

```rst
>>> p = PosixPath('~/films/Monty Python')
>>> p.expanduser()
PosixPath('/home/eric/films/Monty Python')
```

   New in version 3.5.

*pathlib.Path.glob:Path.glob(pattern)*

   Glob the given relative *pattern* in the directory represented by this path,
   yielding all matching files (of any kind):

```rst
>>> sorted(Path('.').glob('*.py'))
[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib.py')]
>>> sorted(Path('.').glob('*/*.py'))
[PosixPath('docs/conf.py')]
```

   The “"**"” pattern means “this directory and all subdirectories, recursively”.
   In other words, it enables recursive globbing:

```rst
>>> sorted(Path('.').glob('**/*.py'))
[PosixPath('build/lib/pathlib.py'),
 PosixPath('docs/conf.py'),
 PosixPath('pathlib.py'),
 PosixPath('setup.py'),
 PosixPath('test_pathlib.py')]
```

   Note:

     Using the “"**"” pattern in large directory trees may consume an inordinate
     amount of time.

*pathlib.Path.group:Path.group()*

   Return the name of the group owning the file.  |:library/exceptions.txt/KeyError:KeyError| is raised if the
   file’s gid isn’t found in the system database.

*pathlib.Path.is_dir:Path.is_dir()*

   Return "True" if the path points to a directory (or a symbolic link pointing to
   a directory), "False" if it points to another kind of file.

   "False" is also returned if the path doesn’t exist or is a broken symlink; other
   errors (such as permission errors) are propagated.

*pathlib.Path.is_file:Path.is_file()*

   Return "True" if the path points to a regular file (or a symbolic link pointing
   to a regular file), "False" if it points to another kind of file.

   "False" is also returned if the path doesn’t exist or is a broken symlink; other
   errors (such as permission errors) are propagated.

*pathlib.Path.is_mount:Path.is_mount()*

   Return "True" if the path is a *mount point*: a point in a file system where a
   different file system has been mounted.  On POSIX, the function checks whether *
   path*’s parent, "path/..", is on a different device than *path*, or whether "
   path/.." and *path* point to the same i-node on the same device — this should
   detect mount points for all Unix and POSIX variants.  Not implemented on
   Windows.

   New in version 3.7.

*pathlib.Path.is_symlink:Path.is_symlink()*

   Return "True" if the path points to a symbolic link, "False" otherwise.

   "False" is also returned if the path doesn’t exist; other errors (such as
   permission errors) are propagated.

*pathlib.Path.is_socket:Path.is_socket()*

   Return "True" if the path points to a Unix socket (or a symbolic link pointing
   to a Unix socket), "False" if it points to another kind of file.

   "False" is also returned if the path doesn’t exist or is a broken symlink; other
   errors (such as permission errors) are propagated.

*pathlib.Path.is_fifo:Path.is_fifo()*

   Return "True" if the path points to a FIFO (or a symbolic link pointing to a
   FIFO), "False" if it points to another kind of file.

   "False" is also returned if the path doesn’t exist or is a broken symlink; other
   errors (such as permission errors) are propagated.

*pathlib.Path.is_block_device:Path.is_block_device()*

   Return "True" if the path points to a block device (or a symbolic link pointing
   to a block device), "False" if it points to another kind of file.

   "False" is also returned if the path doesn’t exist or is a broken symlink; other
   errors (such as permission errors) are propagated.

*pathlib.Path.is_char_device:Path.is_char_device()*

   Return "True" if the path points to a character device (or a symbolic link
   pointing to a character device), "False" if it points to another kind of file.

   "False" is also returned if the path doesn’t exist or is a broken symlink; other
   errors (such as permission errors) are propagated.

*pathlib.Path.iterdir:Path.iterdir()*

   When the path points to a directory, yield path objects of the directory
   contents:

```rst
>>> p = Path('docs')
>>> for child in p.iterdir(): child
...
PosixPath('docs/conf.py')
PosixPath('docs/_templates')
PosixPath('docs/make.bat')
PosixPath('docs/index.rst')
PosixPath('docs/_build')
PosixPath('docs/_static')
PosixPath('docs/Makefile')
```

   The children are yielded in arbitrary order, and the special entries "'.'" and "
   '..'" are not included.  If a file is removed from or added to the directory
   after creating the iterator, whether an path object for that file be included is
   unspecified.

*pathlib.Path.lchmod:Path.lchmod(mode)*

   Like |:pathlib.Path.chmod:Path.chmod()| but, if the path points to a symbolic link, the symbolic
   link’s mode is changed rather than its target’s.

*pathlib.Path.lstat:Path.lstat()*

   Like |:pathlib.Path.stat:Path.stat()| but, if the path points to a symbolic link, return the
   symbolic link’s information rather than its target’s.

*pathlib.Path.mkdir:Path.mkdir(mode=0o777, parents=False, exist_ok=False)*

   Create a new directory at this given path.  If *mode* is given, it is combined
   with the process’ "umask" value to determine the file mode and access flags.  If
   the path already exists, |:library/exceptions.txt/FileExistsError:FileExistsError| is raised.

   If *parents* is true, any missing parents of this path are created as needed;
   they are created with the default permissions without taking *mode* into account
   (mimicking the POSIX "mkdir -p" command).

   If *parents* is false (the default), a missing parent raises |:library/exceptions.txt/FileNotFoundError:FileNotFoundError|
   .

   If *exist_ok* is false (the default), |:library/exceptions.txt/FileExistsError:FileExistsError| is raised if the target
   directory already exists.

   If *exist_ok* is true, |:library/exceptions.txt/FileExistsError:FileExistsError| exceptions will be ignored (same
   behavior as the POSIX "mkdir -p" command), but only if the last path component
   is not an existing non-directory file.

   Changed in version 3.5: The *exist_ok* parameter was added.

*pathlib.Path.open:Path.open(mode='r', buffering=- 1, encoding=None, errors=None, newline=None)*

   Open the file pointed to by the path, like the built-in |:library/functions.txt/open:open()| function does:

```rst
>>> p = Path('setup.py')
>>> with p.open() as f:
...     f.readline()
...
'#!/usr/bin/env python3\n'
```

*pathlib.Path.owner:Path.owner()*

   Return the name of the user owning the file.  |:library/exceptions.txt/KeyError:KeyError| is raised if the file’s
   uid isn’t found in the system database.

*pathlib.Path.read_bytes:Path.read_bytes()*

   Return the binary contents of the pointed-to file as a bytes object:

```rst
>>> p = Path('my_binary_file')
>>> p.write_bytes(b'Binary file contents')
20
>>> p.read_bytes()
b'Binary file contents'
```

   New in version 3.5.

*pathlib.Path.read_text:Path.read_text(encoding=None, errors=None)*

   Return the decoded contents of the pointed-to file as a string:

```rst
>>> p = Path('my_text_file')
>>> p.write_text('Text file contents')
18
>>> p.read_text()
'Text file contents'
```

   The file is opened and then closed. The optional parameters have the same
   meaning as in |:library/functions.txt/open:open()|.

   New in version 3.5.

*pathlib.Path.rename:Path.rename(target)*

   Rename this file or directory to the given *target*, and return a new Path
   instance pointing to *target*.  On Unix, if *target* exists and is a file, it
   will be replaced silently if the user has permission.  *target* can be either a
   string or another path object:

```rst
>>> p = Path('foo')
>>> p.open('w').write('some text')
9
>>> target = Path('bar')
>>> p.rename(target)
PosixPath('bar')
>>> target.open().read()
'some text'
```

   The target path may be absolute or relative. Relative paths are interpreted
   relative to the current working directory, *not* the directory of the Path
   object.

   Changed in version 3.8: Added return value, return the new Path instance.

*pathlib.Path.replace:Path.replace(target)*

   Rename this file or directory to the given *target*, and return a new Path
   instance pointing to *target*.  If *target* points to an existing file or
   directory, it will be unconditionally replaced.

   The target path may be absolute or relative. Relative paths are interpreted
   relative to the current working directory, *not* the directory of the Path
   object.

   Changed in version 3.8: Added return value, return the new Path instance.

*pathlib.Path.resolve:Path.resolve(strict=False)*

   Make the path absolute, resolving any symlinks.  A new path object is returned:

```rst
>>> p = Path()
>>> p
PosixPath('.')
>>> p.resolve()
PosixPath('/home/antoine/pathlib')
```

   “".."” components are also eliminated (this is the only method to do so):

```rst
>>> p = Path('docs/../setup.py')
>>> p.resolve()
PosixPath('/home/antoine/pathlib/setup.py')
```

   If the path doesn’t exist and *strict* is "True", |:library/exceptions.txt/FileNotFoundError:FileNotFoundError| is raised.
   If *strict* is "False", the path is resolved as far as possible and any
   remainder is appended without checking whether it exists.  If an infinite loop
   is encountered along the resolution path, |:library/exceptions.txt/RuntimeError:RuntimeError| is raised.

   New in version 3.6: The *strict* argument (pre-3.6 behavior is strict).

*pathlib.Path.rglob:Path.rglob(pattern)*

   This is like calling |:pathlib.Path.glob:Path.glob()| with “"**/"” added in front of the given
   relative *pattern*:

```rst
>>> sorted(Path().rglob("*.py"))
[PosixPath('build/lib/pathlib.py'),
 PosixPath('docs/conf.py'),
 PosixPath('pathlib.py'),
 PosixPath('setup.py'),
 PosixPath('test_pathlib.py')]
```

*pathlib.Path.rmdir:Path.rmdir()*

   Remove this directory.  The directory must be empty.

*pathlib.Path.samefile:Path.samefile(other_path)*

   Return whether this path points to the same file as *other_path*, which can be
   either a Path object, or a string.  The semantics are similar to
   |:library/os.path.txt/os.path.samefile:os.path.samefile()| and |:library/os.path.txt/os.path.samestat:os.path.samestat()|.

   An |:library/exceptions.txt/OSError:OSError| can be raised if either file cannot be accessed for some reason.

```rst
>>> p = Path('spam')
>>> q = Path('eggs')
>>> p.samefile(q)
False
>>> p.samefile('spam')
True
```

   New in version 3.5.

*pathlib.Path.symlink_to:Path.symlink_to(target, target_is_directory=False)*

   Make this path a symbolic link to *target*.  Under Windows, *target_is_directory
   * must be true (default "False") if the link’s target is a directory.  Under
   POSIX, *target_is_directory*’s value is ignored.

```rst
>>> p = Path('mylink')
>>> p.symlink_to('setup.py')
>>> p.resolve()
PosixPath('/home/antoine/pathlib/setup.py')
>>> p.stat().st_size
956
>>> p.lstat().st_size
8
```

   Note:

     The order of arguments (link, target) is the reverse of |:library/os.txt/os.symlink:os.symlink()|’s.

*pathlib.Path.touch:Path.touch(mode=0o666, exist_ok=True)*

   Create a file at this given path.  If *mode* is given, it is combined with the
   process’ "umask" value to determine the file mode and access flags.  If the file
   already exists, the function succeeds if *exist_ok* is true (and its
   modification time is updated to the current time), otherwise |:library/exceptions.txt/FileExistsError:FileExistsError|
   is raised.

*pathlib.Path.unlink:Path.unlink(missing_ok=False)*

   Remove this file or symbolic link.  If the path points to a directory, use
   |:pathlib.Path.rmdir:Path.rmdir()| instead.

   If *missing_ok* is false (the default), |:library/exceptions.txt/FileNotFoundError:FileNotFoundError| is raised if the
   path does not exist.

   If *missing_ok* is true, |:library/exceptions.txt/FileNotFoundError:FileNotFoundError| exceptions will be ignored (same
   behavior as the POSIX "rm -f" command).

   Changed in version 3.8: The *missing_ok* parameter was added.

*pathlib.Path.link_to:Path.link_to(target)*

   Create a hard link pointing to a path named *target*.

   New in version 3.8.

*pathlib.Path.write_bytes:Path.write_bytes(data)*

   Open the file pointed to in bytes mode, write *data* to it, and close the file:

```rst
>>> p = Path('my_binary_file')
>>> p.write_bytes(b'Binary file contents')
20
>>> p.read_bytes()
b'Binary file contents'
```

   An existing file of the same name is overwritten.

   New in version 3.5.

*pathlib.Path.write_text:Path.write_text(data, encoding=None, errors=None)*

   Open the file pointed to in text mode, write *data* to it, and close the file:

```rst
>>> p = Path('my_text_file')
>>> p.write_text('Text file contents')
18
>>> p.read_text()
'Text file contents'
```

   An existing file of the same name is overwritten. The optional parameters have
   the same meaning as in |:library/functions.txt/open:open()|.

   New in version 3.5.

# correspondence-to-tools-in-the-os-module:Correspondence to tools in the |:library/os.txt/module-os:os|
module

Below is a table mapping various |:library/os.txt/module-os:os| functions to their corresponding
|:pathlib.PurePath:PurePath|/|:pathlib.Path:Path| equivalent.

Note:

  Although |:library/os.path.txt/os.path.relpath:os.path.relpath()| and |:pathlib.PurePath.relative_to:PurePath.relative_to()| have some overlapping
  use-cases, their semantics differ enough to warrant not considering them
  equivalent.

+--------------------------------------+--------------------------------+
| os and os.path                       | pathlib                        |
|======================================|================================|
| |:library/os.path.txt/os.path.abspa  | |:pathlib.Path.resolve:Path.r  |
| th:os.path.abspath()|                | esolve()|                      |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.chmod:os.chmod(  | |:pathlib.Path.chmod:Path.chm  |
| )|                                   | od()|                          |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.mkdir:os.mkdir(  | |:pathlib.Path.mkdir:Path.mkd  |
| )|                                   | ir()|                          |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.rename:os.renam  | |:pathlib.Path.rename:Path.re  |
| e()|                                 | name()|                        |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.replace:os.repl  | |:pathlib.Path.replace:Path.r  |
| ace()|                               | eplace()|                      |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.rmdir:os.rmdir(  | |:pathlib.Path.rmdir:Path.rmd  |
| )|                                   | ir()|                          |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.remove:os.remov  | |:pathlib.Path.unlink:Path.un  |
| e()|, |:library/os.txt/os.unlink:os  | link()|                        |
| .unlink()|                           |                                |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.getcwd:os.getcw  | |:pathlib.Path.cwd:Path.cwd()| |
| d()|                                 |                                |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.exist  | |:pathlib.Path.exists:Path.ex  |
| s:os.path.exists()|                  | ists()|                        |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.expan  | |:pathlib.Path.expanduser:Pat  |
| duser:os.path.expanduser()|          | h.expanduser()| and |:pathlib  |
|                                      | .Path.home:Path.home()|        |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.listdir:os.list  | |:pathlib.Path.iterdir:Path.i  |
| dir()|                               | terdir()|                      |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.isdir  | |:pathlib.Path.is_dir:Path.is  |
| :os.path.isdir()|                    | _dir()|                        |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.isfil  | |:pathlib.Path.is_file:Path.i  |
| e:os.path.isfile()|                  | s_file()|                      |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.islin  | |:pathlib.Path.is_symlink:Pat  |
| k:os.path.islink()|                  | h.is_symlink()|                |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.link:os.link()|  | |:pathlib.Path.link_to:Path.l  |
|                                      | ink_to()|                      |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.symlink:os.syml  | |:pathlib.Path.symlink_to:Pat  |
| ink()|                               | h.symlink_to()|                |
+--------------------------------------+--------------------------------+
| |:library/os.txt/os.stat:os.stat()|  | |:pathlib.Path.stat:Path.stat  |
|                                      | ()|, |:pathlib.Path.owner:Pat  |
|                                      | h.owner()|, |:pathlib.Path.gr  |
|                                      | oup:Path.group()|              |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.isabs  | |:pathlib.PurePath.is_absolut  |
| :os.path.isabs()|                    | e:PurePath.is_absolute()|      |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.join:  | |:pathlib.PurePath.joinpath:P  |
| os.path.join()|                      | urePath.joinpath()|            |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.basen  | |:pathlib.PurePath.name:PureP  |
| ame:os.path.basename()|              | ath.name|                      |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.dirna  | |:pathlib.PurePath.parent:Pur  |
| me:os.path.dirname()|                | ePath.parent|                  |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.samef  | |:pathlib.Path.samefile:Path.  |
| ile:os.path.samefile()|              | samefile()|                    |
+--------------------------------------+--------------------------------+
| |:library/os.path.txt/os.path.split  | |:pathlib.PurePath.suffix:Pur  |
| ext:os.path.splitext()|              | ePath.suffix|                  |
+--------------------------------------+--------------------------------+



