%hyperhelp title="Platform Support" date="2021-07-11"
*|platform-support:⚓|*

The |:library/asyncio.txt/module-asyncio:asyncio| module is designed to be portable, but some platforms have subtle
differences and limitations due to the platforms’ underlying architecture and
capabilities.

# all-platforms:All Platforms

* |:library/asyncio-eventloop.txt/asyncio.loop.add_reader:loop.add_reader()| and |:library/asyncio-eventloop.txt/asyncio.loop.add_writer:loop.add_writer()| cannot be used to monitor file I/O.

# windows:Windows

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/asyncio/proactor_events.py:Lib/asyncio/proactor_events.py|, |:github.com/python/cpython/tree/3.8/Lib/asyncio/windows_events.py:Lib/asyncio/windows_events.py|
, |:github.com/python/cpython/tree/3.8/Lib/asyncio/windows_utils.py:Lib/asyncio/windows_utils.py|

======================================================================

Changed in version 3.8: On Windows, |:library/asyncio-eventloop.txt/asyncio.ProactorEventLoop:ProactorEventLoop| is now the default event
loop.

All event loops on Windows do not support the following methods:

* |:library/asyncio-eventloop.txt/asyncio.loop.create_unix_connection:loop.create_unix_connection()| and |:library/asyncio-eventloop.txt/asyncio.loop.create_unix_server:loop.create_unix_server()| are not
  supported. The |:library/socket.txt/socket.AF_UNIX:socket.AF_UNIX| socket family is specific to Unix.

* |:library/asyncio-eventloop.txt/asyncio.loop.add_signal_handler:loop.add_signal_handler()| and |:library/asyncio-eventloop.txt/asyncio.loop.remove_signal_handler:loop.remove_signal_handler()| are not
  supported.

|:library/asyncio-eventloop.txt/asyncio.SelectorEventLoop:SelectorEventLoop| has the following limitations:

* |:library/selectors.txt/selectors.SelectSelector:SelectSelector| is used to wait on socket events: it supports sockets and is
  limited to 512 sockets.

* |:library/asyncio-eventloop.txt/asyncio.loop.add_reader:loop.add_reader()| and |:library/asyncio-eventloop.txt/asyncio.loop.add_writer:loop.add_writer()| only accept socket handles (e.g.
  pipe file descriptors are not supported).

* Pipes are not supported, so the |:library/asyncio-eventloop.txt/asyncio.loop.connect_read_pipe:loop.connect_read_pipe()| and
  |:library/asyncio-eventloop.txt/asyncio.loop.connect_write_pipe:loop.connect_write_pipe()| methods are not implemented.

* |:library/asyncio-subprocess.txt/asyncio-subprocess:Subprocesses| are not supported, i.e. |:library/asyncio-eventloop.txt/asyncio.loop.subprocess_exec:loop.subprocess_exec()| and
  |:library/asyncio-eventloop.txt/asyncio.loop.subprocess_shell:loop.subprocess_shell()| methods are not implemented.

|:library/asyncio-eventloop.txt/asyncio.ProactorEventLoop:ProactorEventLoop| has the following limitations:

* The |:library/asyncio-eventloop.txt/asyncio.loop.add_reader:loop.add_reader()| and |:library/asyncio-eventloop.txt/asyncio.loop.add_writer:loop.add_writer()| methods are not supported.

The resolution of the monotonic clock on Windows is usually around 15.6 msec.
The best resolution is 0.5 msec. The resolution depends on the hardware
(availability of |:en.wikipedia.org/wiki/High_Precision_Event_Timer:HPET|*|hpet:⚓|* ) and on the Windows configuration.

## subprocess-support-on-windows:Subprocess Support on Windows

On Windows, the default event loop |:library/asyncio-eventloop.txt/asyncio.ProactorEventLoop:ProactorEventLoop| supports subprocesses,
whereas |:library/asyncio-eventloop.txt/asyncio.SelectorEventLoop:SelectorEventLoop| does not.

The |:library/asyncio-policy.txt/asyncio.AbstractEventLoopPolicy.set_child_watcher:policy.set_child_watcher()| function is also not supported, as
|:library/asyncio-eventloop.txt/asyncio.ProactorEventLoop:ProactorEventLoop| has a different mechanism to watch child processes.

# macos:macOS

Modern macOS versions are fully supported.

-[ macOS <= 10.8 ]-

On macOS 10.6, 10.7 and 10.8, the default event loop uses
|:library/selectors.txt/selectors.KqueueSelector:selectors.KqueueSelector|, which does not support character devices on these
versions.  The |:library/asyncio-eventloop.txt/asyncio.SelectorEventLoop:SelectorEventLoop| can be manually configured to use
|:library/selectors.txt/selectors.SelectSelector:SelectSelector| or |:library/selectors.txt/selectors.PollSelector:PollSelector| to support character devices on these older
versions of macOS.  Example:

```rst
import asyncio
import selectors

selector = selectors.SelectSelector()
loop = asyncio.SelectorEventLoop(selector)
asyncio.set_event_loop(loop)
```



