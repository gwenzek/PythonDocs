%hyperhelp title="wave" date="2021-07-11"
*|module-wave:⚓|*

*Source code:* |:github.com/python/cpython/tree/3.8/Lib/wave.py:Lib/wave.py|

======================================================================

The |:module-wave:wave| module provides a convenient interface to the WAV sound format. It
does not support compression/decompression, but it does support mono/stereo.

The |:module-wave:wave| module defines the following function and exception:

*wave.open:wave.open(file, mode=None)*

   If *file* is a string, open the file by that name, otherwise treat it as a file-
   like object.  *mode* can be:

   "'rb'"
      Read only mode.

   "'wb'"
      Write only mode.

   Note that it does not allow read/write WAV files.

   A *mode* of "'rb'" returns a "Wave_read" object, while a *mode* of "'wb'"
   returns a "Wave_write" object.  If *mode* is omitted and a file-like object is
   passed as *file*, "file.mode" is used as the default value for *mode*.

   If you pass in a file-like object, the wave object will not close it when its "
   close()" method is called; it is the caller’s responsibility to close the file
   object.

   The |:wave.open:open()| function may be used in a |:reference/compound_stmts.txt/with:with| statement.  When the "with" block
   completes, the |:wave.Wave_read.close:Wave_read.close()| or |:wave.Wave_write.close:Wave_write.close()| method is called.

   Changed in version 3.4: Added support for unseekable files.

*wave.openfp:wave.openfp(file, mode)*

   A synonym for |:wave.open:open()|, maintained for backwards compatibility.

   Deprecated since version 3.7, will be removed in version 3.9.

*wave.Error:exception wave.Error*

   An error raised when something is impossible because it violates the WAV
   specification or hits an implementation deficiency.

# wave-read-objects:Wave_read Objects

Wave_read objects, as returned by |:wave.open:open()|, have the following methods:

*wave.Wave_read.close:Wave_read.close()*

   Close the stream if it was opened by |:module-wave:wave|, and make the instance unusable.
   This is called automatically on object collection.

*wave.Wave_read.getnchannels:Wave_read.getnchannels()*

   Returns number of audio channels ("1" for mono, "2" for stereo).

*wave.Wave_read.getsampwidth:Wave_read.getsampwidth()*

   Returns sample width in bytes.

*wave.Wave_read.getframerate:Wave_read.getframerate()*

   Returns sampling frequency.

*wave.Wave_read.getnframes:Wave_read.getnframes()*

   Returns number of audio frames.

*wave.Wave_read.getcomptype:Wave_read.getcomptype()*

   Returns compression type ("'NONE'" is the only supported type).

*wave.Wave_read.getcompname:Wave_read.getcompname()*

   Human-readable version of |:wave.Wave_read.getcomptype:getcomptype()|. Usually "'not compressed'" parallels
   "'NONE'".

*wave.Wave_read.getparams:Wave_read.getparams()*

   Returns a |:library/collections.txt/collections.namedtuple:namedtuple()| "(nchannels, sampwidth, framerate, nframes, comptype,
   compname)", equivalent to output of the "get*()" methods.

*wave.Wave_read.readframes:Wave_read.readframes(n)*

   Reads and returns at most *n* frames of audio, as a |:library/stdtypes.txt/bytes:bytes| object.

*wave.Wave_read.rewind:Wave_read.rewind()*

   Rewind the file pointer to the beginning of the audio stream.

The following two methods are defined for compatibility with the |:library/aifc.txt/module-aifc:aifc| module,
and don’t do anything interesting.

*wave.Wave_read.getmarkers:Wave_read.getmarkers()*

   Returns "None".

*wave.Wave_read.getmark:Wave_read.getmark(id)*

   Raise an error.

The following two methods define a term “position” which is compatible between
them, and is otherwise implementation dependent.

*wave.Wave_read.setpos:Wave_read.setpos(pos)*

   Set the file pointer to the specified position.

*wave.Wave_read.tell:Wave_read.tell()*

   Return current file pointer position.

*|wave-write-objects:⚓|* # wave-write-objects:Wave_write Objects

For seekable output streams, the "wave" header will automatically be updated to
reflect the number of frames actually written.  For unseekable streams, the *
nframes* value must be accurate when the first frame data is written.  An
accurate *nframes* value can be achieved either by calling |:wave.Wave_write.setnframes:setnframes()| or
|:wave.Wave_write.setparams:setparams()| with the number of frames that will be written before |:wave.Wave_write.close:close()| is
called and then using |:wave.Wave_write.writeframesraw:writeframesraw()| to write the frame data, or by calling
|:wave.Wave_write.writeframes:writeframes()| with all of the frame data to be written.  In the latter case
|:wave.Wave_write.writeframes:writeframes()| will calculate the number of frames in the data and set *nframes
* accordingly before writing the frame data.

Wave_write objects, as returned by |:wave.open:open()|, have the following methods:

Changed in version 3.4: Added support for unseekable files.

*wave.Wave_write.close:Wave_write.close()*

   Make sure *nframes* is correct, and close the file if it was opened by |:module-wave:wave|.
   This method is called upon object collection.  It will raise an exception if the
   output stream is not seekable and *nframes* does not match the number of frames
   actually written.

*wave.Wave_write.setnchannels:Wave_write.setnchannels(n)*

   Set the number of channels.

*wave.Wave_write.setsampwidth:Wave_write.setsampwidth(n)*

   Set the sample width to *n* bytes.

*wave.Wave_write.setframerate:Wave_write.setframerate(n)*

   Set the frame rate to *n*.

   Changed in version 3.2: A non-integral input to this method is rounded to the
   nearest integer.

*wave.Wave_write.setnframes:Wave_write.setnframes(n)*

   Set the number of frames to *n*.  This will be changed later if the number of
   frames actually written is different (this update attempt will raise an error if
   the output stream is not seekable).

*wave.Wave_write.setcomptype:Wave_write.setcomptype(type, name)*

   Set the compression type and description. At the moment, only compression type "
   NONE" is supported, meaning no compression.

*wave.Wave_write.setparams:Wave_write.setparams(tuple)*

   The *tuple* should be "(nchannels, sampwidth, framerate, nframes, comptype,
   compname)", with values valid for the "set*()" methods.  Sets all parameters.

*wave.Wave_write.tell:Wave_write.tell()*

   Return current position in the file, with the same disclaimer for the
   |:wave.Wave_read.tell:Wave_read.tell()| and |:wave.Wave_read.setpos:Wave_read.setpos()| methods.

*wave.Wave_write.writeframesraw:Wave_write.writeframesraw(data)*

   Write audio frames, without correcting *nframes*.

   Changed in version 3.4: Any |:glossary.txt/term-bytes-like-object:bytes-like object| is now accepted.

*wave.Wave_write.writeframes:Wave_write.writeframes(data)*

   Write audio frames and make sure *nframes* is correct.  It will raise an error
   if the output stream is not seekable and the total number of frames that have
   been written after *data* has been written does not match the previously set
   value for *nframes*.

   Changed in version 3.4: Any |:glossary.txt/term-bytes-like-object:bytes-like object| is now accepted.

Note that it is invalid to set any parameters after calling "writeframes()" or "
writeframesraw()", and any attempt to do so will raise |:wave.Error:wave.Error|.



