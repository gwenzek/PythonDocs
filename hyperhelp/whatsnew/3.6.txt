%hyperhelp title="What’s New In Python 3.6" date="2021-07-11"
*|what-s-new-in-python-3-6:⚓|*

Editors:
   Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>

This article explains the new features in Python 3.6, compared to 3.5. Python
3.6 was released on December 23, 2016.  See the |:docs.python.org/3.6/whatsnew/changelog.html:changelog|*|changelog:⚓|*  for
a full list of changes.

See also:

  *|index-0:⚓|* |:www.python.org/dev/peps/pep-0494:PEP 494| - Python 3.6 Release Schedule

# summary-release-highlights:Summary – Release highlights

New syntax features:

* |:whatsnew36-pep498:PEP 498|, formatted string literals.

* |:whatsnew36-pep515:PEP 515|, underscores in numeric literals.

* |:whatsnew36-pep526:PEP 526|, syntax for variable annotations.

* |:whatsnew36-pep525:PEP 525|, asynchronous generators.

* |:whatsnew36-pep530:PEP 530|: asynchronous comprehensions.

New library modules:

* |:library/secrets.txt/module-secrets:secrets|: |:whatsnew36-pep506:PEP 506 – Adding A Secrets Module To The Standard Library|.

CPython implementation improvements:

* The |:library/stdtypes.txt/typesmapping:dict| type has been reimplemented to use a |:whatsnew36-compactdict:more compact representation|
  based on |:mail.python.org/pipermail/python-dev/2012-December/123028.html:a proposal by Raymond Hettinger|*|a-proposal-by-raymond-hettinger:⚓|*
  and similar to the |:morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html:PyPy dict implementation|.  This resulted in dictionaries
  using 20% to 25% less memory when compared to Python 3.5.

* Customization of class creation has been simplified with the |:whatsnew36-pep487:new protocol|.

* The class attribute definition order is |:whatsnew36-pep520:now preserved|.

* The order of elements in "**kwargs" now |:whatsnew36-pep468:corresponds to the order| in which
  keyword arguments were passed to the function.

* DTrace and SystemTap |:whatsnew36-tracing:probing support| has been added.

* The new |:whatsnew36-pythonmalloc:PYTHONMALLOC| environment variable can now be used to debug the
  interpreter memory allocation and access errors.

Significant improvements in the standard library:

* The |:library/asyncio.txt/module-asyncio:asyncio| module has received new features, significant usability and
  performance improvements, and a fair amount of bug fixes. Starting with Python
  3.6 the "asyncio" module is no longer provisional and its API is considered
  stable.

* A new |:whatsnew36-pep519:file system path protocol| has been implemented to support
  |:glossary.txt/term-path-like-object:path-like objects|. All standard library functions operating on paths have been
  updated to work with the new protocol.

* The |:library/datetime.txt/module-datetime:datetime| module has gained support for |:whatsnew36-pep495:Local Time Disambiguation|.

* The |:library/typing.txt/module-typing:typing| module received a number of |:whatsnew36-typing:improvements|.

* The |:library/tracemalloc.txt/module-tracemalloc:tracemalloc| module has been significantly reworked and is now used to
  provide better output for |:library/exceptions.txt/ResourceWarning:ResourceWarning| as well as provide better
  diagnostics for memory allocation errors. See the |:whatsnew36-pythonmalloc:PYTHONMALLOC section| for
  more information.

Security improvements:

* The new |:library/secrets.txt/module-secrets:secrets| module has been added to simplify the generation of
  cryptographically strong pseudo-random numbers suitable for managing secrets
  such as account authentication, tokens, and similar.

* On Linux, |:library/os.txt/os.urandom:os.urandom()| now blocks until the system urandom entropy pool is
  initialized to increase the security. See the *|index-1:⚓|* |:www.python.org/dev/peps/pep-0524:PEP 524| for the
  rationale.

* The |:library/hashlib.txt/module-hashlib:hashlib| and |:library/ssl.txt/module-ssl:ssl| modules now support OpenSSL 1.1.0.

* The default settings and feature set of the |:library/ssl.txt/module-ssl:ssl| module have been improved.

* The |:library/hashlib.txt/module-hashlib:hashlib| module received support for the BLAKE2, SHA-3 and SHAKE hash
  algorithms and the |:library/hashlib.txt/hashlib.scrypt:scrypt()| key derivation function.

Windows improvements:

* |:whatsnew36-pep528:PEP 528| and |:whatsnew36-pep529:PEP 529|, Windows filesystem and console encoding changed to
  UTF-8.

* The "py.exe" launcher, when used interactively, no longer prefers Python 2 over
  Python 3 when the user doesn’t specify a version (via command line arguments or
  a config file).  Handling of shebang lines remains unchanged - “python” refers
  to Python 2 in that case.

* "python.exe" and "pythonw.exe" have been marked as long-path aware, which means
  that the 260 character path limit may no longer apply. See
  |:using/windows.txt/max-path:removing the MAX_PATH limitation| for details.

* A "._pth" file can be added to force isolated mode and fully specify all search
  paths to avoid registry and environment lookup. See |:using/windows.txt/finding-modules:the documentation| for more
  information.

* A "python36.zip" file now works as a landmark to infer *|index-2:⚓|*
  |:using/cmdline.txt/envvar-PYTHONHOME:PYTHONHOME|. See |:using/windows.txt/finding-modules:the documentation| for more information.

*|pypy-dict-implementation:⚓|* # new-features:New Features## pep-498-formatted-
string-literals:PEP 498: Formatted string literals

*|index-3:⚓|* |:www.python.org/dev/peps/pep-0498:PEP 498| introduces a new kind of string literals: *f-strings*,
or |:reference/lexical_analysis.txt/f-strings:formatted string literals|.

Formatted string literals are prefixed with "'f'" and are similar to the format
strings accepted by |:library/stdtypes.txt/str.format:str.format()|.  They contain replacement fields surrounded
by curly braces.  The replacement fields are expressions, which are evaluated at
run time, and then formatted using the |:library/functions.txt/format:format()| protocol:

```rst
>>> name = "Fred"
>>> f"He said his name is {name}."
'He said his name is Fred.'
>>> width = 10
>>> precision = 4
>>> value = decimal.Decimal("12.34567")
>>> f"result: {value:{width}.{precision}}"  # nested fields
'result:      12.35'
```

See also:

  *|index-4:⚓|*
  |:www.python.org/dev/peps/pep-0498:PEP 498| – Literal String Interpolation.
     PEP written and implemented by Eric V. Smith.

  |:reference/lexical_analysis.txt/f-strings:Feature documentation|.

*|whatsnew36-pep526:⚓|* ## pep-526-syntax-for-variable-annotations:PEP 526:
Syntax for variable annotations

*|index-5:⚓|* |:www.python.org/dev/peps/pep-0484:PEP 484| introduced the standard for type annotations of function
parameters, a.k.a. type hints. This PEP adds syntax to Python for annotating the
types of variables including class variables and instance variables:

```rst
primes: List[int] = []

captain: str  # Note: no initial value!

class Starship:
    stats: Dict[str, int] = {}
```

Just as for function annotations, the Python interpreter does not attach any
particular meaning to variable annotations and only stores them in the "
__annotations__" attribute of a class or module.

In contrast to variable declarations in statically typed languages, the goal of
annotation syntax is to provide an easy way to specify structured type metadata
for third party tools and libraries via the abstract syntax tree and the "
__annotations__" attribute.

See also:

  *|index-6:⚓|*
  |:www.python.org/dev/peps/pep-0526:PEP 526| – Syntax for variable annotations.
     PEP written by Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, and
     Guido van Rossum. Implemented by Ivan Levkivskyi.

  Tools that use or will use the new syntax: |:www.mypy-lang.org:mypy|*|mypy:⚓|* , |:github.com/google/pytype:pytype|
  *|pytype:⚓|* , PyCharm, etc.

*|whatsnew36-pep515:⚓|* ## pep-515-underscores-in-numeric-literals:PEP 515:
Underscores in Numeric Literals

*|index-7:⚓|* |:www.python.org/dev/peps/pep-0515:PEP 515| adds the ability to use underscores in numeric literals
for improved readability.  For example:

```rst
>>> 1_000_000_000_000_000
1000000000000000
>>> 0x_FF_FF_FF_FF
4294967295
```

Single underscores are allowed between digits and after any base specifier.
Leading, trailing, or multiple underscores in a row are not allowed.

The |:library/string.txt/formatspec:string formatting| language also now has support for the "'_'" option to
signal the use of an underscore for a thousands separator for floating point
presentation types and for integer presentation type "'d'".  For integer
presentation types "'b'", "'o'", "'x'", and "'X'", underscores will be inserted
every 4 digits:

```rst
>>> '{:_}'.format(1000000)
'1_000_000'
>>> '{:_x}'.format(0xFFFFFFFF)
'ffff_ffff'
```

See also:

  *|index-8:⚓|*
  |:www.python.org/dev/peps/pep-0515:PEP 515| – Underscores in Numeric Literals
     PEP written by Georg Brandl and Serhiy Storchaka.

*|whatsnew36-pep525:⚓|* ## pep-525-asynchronous-generators:PEP 525: Asynchronous
Generators

*|index-9:⚓|* |:www.python.org/dev/peps/pep-0492:PEP 492| introduced support for native coroutines and "async" / "
await" syntax to Python 3.5.  A notable limitation of the Python 3.5
implementation is that it was not possible to use "await" and "yield" in the
same function body.  In Python 3.6 this restriction has been lifted, making it
possible to define *asynchronous generators*:

```rst
async def ticker(delay, to):
    """Yield numbers from 0 to *to* every *delay* seconds."""
    for i in range(to):
        yield i
        await asyncio.sleep(delay)
```

The new syntax allows for faster and more concise code.

See also:

  *|index-10:⚓|*
  |:www.python.org/dev/peps/pep-0525:PEP 525| – Asynchronous Generators
     PEP written and implemented by Yury Selivanov.

*|whatsnew36-pep530:⚓|* ## pep-530-asynchronous-comprehensions:PEP 530:
Asynchronous Comprehensions

*|index-11:⚓|* |:www.python.org/dev/peps/pep-0530:PEP 530| adds support for using "async for" in list, set, dict
comprehensions and generator expressions:

```rst
result = [i async for i in aiter() if i % 2]
```

Additionally, "await" expressions are supported in all kinds of comprehensions:

```rst
result = [await fun() for fun in funcs if await condition()]
```

See also:

  *|index-12:⚓|*
  |:www.python.org/dev/peps/pep-0530:PEP 530| – Asynchronous Comprehensions
     PEP written and implemented by Yury Selivanov.

*|whatsnew36-pep487:⚓|* ## pep-487-simpler-customization-of-class-creation:PEP
487: Simpler customization of class creation

It is now possible to customize subclass creation without using a metaclass. The
new "__init_subclass__" classmethod will be called on the base class whenever a
new subclass is created:

```rst
class PluginBase:
    subclasses = []

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.subclasses.append(cls)

class Plugin1(PluginBase):
    pass

class Plugin2(PluginBase):
    pass
```

In order to allow zero-argument |:library/functions.txt/super:super()| calls to work correctly from
|:reference/datamodel.txt/object.__init_subclass__:__init_subclass__()| implementations, custom metaclasses must ensure that the
new "__classcell__" namespace entry is propagated to "type.__new__" (as
described in |:reference/datamodel.txt/class-object-creation:Creating the class object|).

See also:

  *|index-13:⚓|*
  |:www.python.org/dev/peps/pep-0487:PEP 487| – Simpler customization of class creation
     PEP written and implemented by Martin Teichmann.

  |:reference/datamodel.txt/class-customization:Feature documentation|

*|whatsnew36-pep487-descriptors:⚓|* ## pep-487-descriptor-protocol-enhancements:
PEP 487: Descriptor Protocol Enhancements

*|index-14:⚓|* |:www.python.org/dev/peps/pep-0487:PEP 487| extends the descriptor protocol to include the new
optional |:reference/datamodel.txt/object.__set_name__:__set_name__()| method.  Whenever a new class is defined, the new
method will be called on all descriptors included in the definition, providing
them with a reference to the class being defined and the name given to the
descriptor within the class namespace.  In other words, instances of descriptors
can now know the attribute name of the descriptor in the owner class:

```rst
class IntField:
    def __get__(self, instance, owner):
        return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if not isinstance(value, int):
            raise ValueError(f'expecting integer in {self.name}')
        instance.__dict__[self.name] = value

    # this is the new initializer:
    def __set_name__(self, owner, name):
        self.name = name

class Model:
    int_field = IntField()
```

See also:

  *|index-15:⚓|*
  |:www.python.org/dev/peps/pep-0487:PEP 487| – Simpler customization of class creation
     PEP written and implemented by Martin Teichmann.

  |:reference/datamodel.txt/descriptors:Feature documentation|

*|whatsnew36-pep519:⚓|* ## pep-519-adding-a-file-system-path-protocol:PEP 519:
Adding a file system path protocol

File system paths have historically been represented as |:library/stdtypes.txt/str:str| or |:library/stdtypes.txt/bytes:bytes|
objects. This has led to people who write code which operate on file system
paths to assume that such objects are only one of those two types (an |:library/functions.txt/int:int|
representing a file descriptor does not count as that is not a file path).
Unfortunately that assumption prevents alternative object representations of
file system paths like |:library/pathlib.txt/module-pathlib:pathlib| from working with pre-existing code, including
Python’s standard library.

To fix this situation, a new interface represented by |:library/os.txt/os.PathLike:os.PathLike| has been
defined. By implementing the |:library/os.txt/os.PathLike.__fspath__:__fspath__()| method, an object signals that it
represents a path. An object can then provide a low-level representation of a
file system path as a |:library/stdtypes.txt/str:str| or |:library/stdtypes.txt/bytes:bytes| object. This means an object is
considered |:glossary.txt/term-path-like-object:path-like| if it implements |:library/os.txt/os.PathLike:os.PathLike| or is a |:library/stdtypes.txt/str:str| or |:library/stdtypes.txt/bytes:bytes|
object which represents a file system path. Code can use |:library/os.txt/os.fspath:os.fspath()|,
|:library/os.txt/os.fsdecode:os.fsdecode()|, or |:library/os.txt/os.fsencode:os.fsencode()| to explicitly get a |:library/stdtypes.txt/str:str| and/or |:library/stdtypes.txt/bytes:bytes|
representation of a path-like object.

The built-in |:library/functions.txt/open:open()| function has been updated to accept |:library/os.txt/os.PathLike:os.PathLike| objects,
as have all relevant functions in the |:library/os.txt/module-os:os| and |:library/os.path.txt/module-os.path:os.path| modules, and most other
functions and classes in the standard library.  The |:library/os.txt/os.DirEntry:os.DirEntry| class and
relevant classes in |:library/pathlib.txt/module-pathlib:pathlib| have also been updated to implement |:library/os.txt/os.PathLike:os.PathLike|.

The hope is that updating the fundamental functions for operating on file system
paths will lead to third-party code to implicitly support all
|:glossary.txt/term-path-like-object:path-like objects| without any code changes, or at least very minimal ones
(e.g. calling |:library/os.txt/os.fspath:os.fspath()| at the beginning of code before operating on a path-
like object).

Here are some examples of how the new interface allows for |:library/pathlib.txt/pathlib.Path:pathlib.Path| to be
used more easily and transparently with pre-existing code:

```rst
>>> import pathlib
>>> with open(pathlib.Path("README")) as f:
...     contents = f.read()
...
>>> import os.path
>>> os.path.splitext(pathlib.Path("some_file.txt"))
('some_file', '.txt')
>>> os.path.join("/a/b", pathlib.Path("c"))
'/a/b/c'
>>> import os
>>> os.fspath(pathlib.Path("some_file.txt"))
'some_file.txt'
```

(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle Zijlstra.)

See also:

  *|index-16:⚓|*
  |:www.python.org/dev/peps/pep-0519:PEP 519| – Adding a file system path protocol
     PEP written by Brett Cannon and Koos Zevenhoven.

*|whatsnew36-pep495:⚓|* ## pep-495-local-time-disambiguation:PEP 495: Local Time
Disambiguation

In most world locations, there have been and will be times when local clocks are
moved back.  In those times, intervals are introduced in which local clocks show
the same time twice in the same day. In these situations, the information
displayed on a local clock (or stored in a Python datetime instance) is
insufficient to identify a particular moment in time.

*|index-17:⚓|* |:www.python.org/dev/peps/pep-0495:PEP 495| adds the new *fold* attribute to instances of
|:library/datetime.txt/datetime.datetime:datetime.datetime| and |:library/datetime.txt/datetime.time:datetime.time| classes to differentiate between two
moments in time for which local times are the same:

```rst
>>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)
>>> for i in range(4):
...     u = u0 + i*HOUR
...     t = u.astimezone(Eastern)
...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)
...
04:00:00 UTC = 00:00:00 EDT 0
05:00:00 UTC = 01:00:00 EDT 0
06:00:00 UTC = 01:00:00 EST 1
07:00:00 UTC = 02:00:00 EST 0
```

The values of the |:library/datetime.txt/datetime.datetime.fold:fold| attribute have the value "0" for all instances except
those that represent the second (chronologically) moment in time in an ambiguous
case.

See also:

  *|index-18:⚓|*
  |:www.python.org/dev/peps/pep-0495:PEP 495| – Local Time Disambiguation
     PEP written by Alexander Belopolsky and Tim Peters, implementation by Alexander
     Belopolsky.

*|whatsnew36-pep529:⚓|* ## pep-529-change-windows-filesystem-encoding-to-utf-8:
PEP 529: Change Windows filesystem encoding to UTF-8

Representing filesystem paths is best performed with str (Unicode) rather than
bytes. However, there are some situations where using bytes is sufficient and
correct.

Prior to Python 3.6, data loss could result when using bytes paths on Windows.
With this change, using bytes to represent paths is now supported on Windows,
provided those bytes are encoded with the encoding returned by
|:library/sys.txt/sys.getfilesystemencoding:sys.getfilesystemencoding()|, which now defaults to "'utf-8'".

Applications that do not use str to represent paths should use |:library/os.txt/os.fsencode:os.fsencode()|
and |:library/os.txt/os.fsdecode:os.fsdecode()| to ensure their bytes are correctly encoded. To revert to
the previous behaviour, set *|index-19:⚓|* |:using/cmdline.txt/envvar-PYTHONLEGACYWINDOWSFSENCODING:PYTHONLEGACYWINDOWSFSENCODING| or
call |:library/sys.txt/sys._enablelegacywindowsfsencoding:sys._enablelegacywindowsfsencoding()|.

See *|index-20:⚓|* |:www.python.org/dev/peps/pep-0529:PEP 529| for more information and discussion of code
modifications that may be required.

*|whatsnew36-pep528:⚓|* ## pep-528-change-windows-console-encoding-to-utf-8:PEP
528: Change Windows console encoding to UTF-8

The default console on Windows will now accept all Unicode characters and
provide correctly read str objects to Python code. "sys.stdin", "sys.stdout" and
"sys.stderr" now default to utf-8 encoding.

This change only applies when using an interactive console, and not when
redirecting files or pipes. To revert to the previous behaviour for interactive
console use, set *|index-21:⚓|* |:using/cmdline.txt/envvar-PYTHONLEGACYWINDOWSSTDIO:PYTHONLEGACYWINDOWSSTDIO|.

See also:

  *|index-22:⚓|*
  |:www.python.org/dev/peps/pep-0528:PEP 528| – Change Windows console encoding to UTF-8
     PEP written and implemented by Steve Dower.

*|whatsnew36-pep520:⚓|* ## pep-520-preserving-class-attribute-definition-order:
PEP 520: Preserving Class Attribute Definition Order

Attributes in a class definition body have a natural ordering: the same order in
which the names appear in the source.  This order is now preserved in the new
class’s |:library/stdtypes.txt/object.__dict__:__dict__| attribute.

Also, the effective default class *execution* namespace (returned from
|:reference/datamodel.txt/prepare:type.__prepare__()|) is now an insertion-order-preserving mapping.

See also:

  *|index-23:⚓|*
  |:www.python.org/dev/peps/pep-0520:PEP 520| – Preserving Class Attribute Definition Order
     PEP written and implemented by Eric Snow.

*|whatsnew36-pep468:⚓|* ## pep-468-preserving-keyword-argument-order:PEP 468:
Preserving Keyword Argument Order

"**kwargs" in a function signature is now guaranteed to be an insertion-order-
preserving mapping.

See also:

  *|index-24:⚓|*
  |:www.python.org/dev/peps/pep-0468:PEP 468| – Preserving Keyword Argument Order
     PEP written and implemented by Eric Snow.

*|whatsnew36-compactdict:⚓|* ## new-dict-implementation:New |:library/stdtypes.txt/typesmapping:dict|
implementation

The |:library/stdtypes.txt/typesmapping:dict| type now uses a “compact” representation based on
|:mail.python.org/pipermail/python-dev/2012-December/123028.html:a proposal by Raymond Hettinger|*|id1:⚓|*  which was
|:morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html:first implemented by PyPy|*|first-implemented-by-pypy:⚓|* . The memory usage of
the new |:library/stdtypes.txt/dict:dict()| is between 20% and 25% smaller compared to Python 3.5.

The order-preserving aspect of this new implementation is considered an
implementation detail and should not be relied upon (this may change in the
future, but it is desired to have this new dict implementation in the language
for a few releases before changing the language spec to mandate order-preserving
semantics for all current and future Python implementations; this also helps
preserve backwards-compatibility with older versions of the language where
random iteration order is still in effect, e.g. Python 3.5).

(Contributed by INADA Naoki in |:bugs.python.org/issue27350:bpo-27350|. Idea
|:mail.python.org/pipermail/python-dev/2012-December/123028.html:originally suggested by Raymond Hettinger|*|originally-suggested-by-raymond-
hettinger:⚓|* .)

*|whatsnew36-pep523:⚓|* ## pep-523-adding-a-frame-evaluation-api-to-cpython:PEP
523: Adding a frame evaluation API to CPython

While Python provides extensive support to customize how code executes, one
place it has not done so is in the evaluation of frame objects.  If you wanted
some way to intercept frame evaluation in Python there really wasn’t any way
without directly manipulating function pointers for defined functions.

*|index-25:⚓|* |:www.python.org/dev/peps/pep-0523:PEP 523| changes this by providing an API to make frame
evaluation pluggable at the C level. This will allow for tools such as debuggers
and JITs to intercept frame evaluation before the execution of Python code
begins. This enables the use of alternative evaluation implementations for
Python code, tracking frame evaluation, etc.

This API is not part of the limited C API and is marked as private to signal
that usage of this API is expected to be limited and only applicable to very
select, low-level use-cases. Semantics of the API will change with Python as
necessary.

See also:

  *|index-26:⚓|*
  |:www.python.org/dev/peps/pep-0523:PEP 523| – Adding a frame evaluation API to CPython
     PEP written by Brett Cannon and Dino Viehland.

*|whatsnew36-pythonmalloc:⚓|* ## pythonmalloc-environment-variable:PYTHONMALLOC
environment variable

The new *|index-27:⚓|* |:using/cmdline.txt/envvar-PYTHONMALLOC:PYTHONMALLOC| environment variable allows setting the
Python memory allocators and installing debug hooks.

It is now possible to install debug hooks on Python memory allocators on Python
compiled in release mode using "PYTHONMALLOC=debug". Effects of debug hooks:

* Newly allocated memory is filled with the byte "0xCB"

* Freed memory is filled with the byte "0xDB"

* Detect violations of the Python memory allocator API. For example,
  |:c-api/memory.txt/c.PyObject_Free:PyObject_Free()| called on a memory block allocated by |:c-api/memory.txt/c.PyMem_Malloc:PyMem_Malloc()|.

* Detect writes before the start of a buffer (buffer underflows)

* Detect writes after the end of a buffer (buffer overflows)

* Check that the |:glossary.txt/term-global-interpreter-lock:GIL| is held when allocator functions of "PYMEM_DOMAIN_OBJ" (ex:
  |:c-api/memory.txt/c.PyObject_Malloc:PyObject_Malloc()|) and "PYMEM_DOMAIN_MEM" (ex: |:c-api/memory.txt/c.PyMem_Malloc:PyMem_Malloc()|) domains are
  called.

Checking if the GIL is held is also a new feature of Python 3.6.

See the |:c-api/memory.txt/c.PyMem_SetupDebugHooks:PyMem_SetupDebugHooks()| function for debug hooks on Python memory
allocators.

It is now also possible to force the usage of the "malloc()" allocator of the C
library for all Python memory allocations using "PYTHONMALLOC=malloc". This is
helpful when using external memory debuggers like Valgrind on a Python compiled
in release mode.

On error, the debug hooks on Python memory allocators now use the |:library/tracemalloc.txt/module-tracemalloc:tracemalloc|
module to get the traceback where a memory block was allocated.

Example of fatal error on buffer overflow using "python3.6 -X tracemalloc=5"
(store 5 frames in traces):

```rst
Debug memory block at address p=0x7fbcd41666f8: API 'o'
    4 bytes originally requested
    The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.
    The 8 pad bytes at tail=0x7fbcd41666fc are not all FORBIDDENBYTE (0xfb):
        at tail+0: 0x02 *** OUCH
        at tail+1: 0xfb
        at tail+2: 0xfb
        at tail+3: 0xfb
        at tail+4: 0xfb
        at tail+5: 0xfb
        at tail+6: 0xfb
        at tail+7: 0xfb
    The block was made by call #1233329 to debug malloc/realloc.
    Data at p: 1a 2b 30 00

Memory block allocated at (most recent call first):
  File "test/test_bytes.py", line 323
  File "unittest/case.py", line 600
  File "unittest/case.py", line 648
  File "unittest/suite.py", line 122
  File "unittest/suite.py", line 84

Fatal Python error: bad trailing pad byte

Current thread 0x00007fbcdbd32700 (most recent call first):
  File "test/test_bytes.py", line 323 in test_hex
  File "unittest/case.py", line 600 in run
  File "unittest/case.py", line 648 in __call__
  File "unittest/suite.py", line 122 in run
  File "unittest/suite.py", line 84 in __call__
  File "unittest/suite.py", line 122 in run
  File "unittest/suite.py", line 84 in __call__
  ...
```

(Contributed by Victor Stinner in |:bugs.python.org/issue26516:bpo-26516| and |:bugs.python.org/issue26564:bpo-26564|.)

*|whatsnew36-tracing:⚓|* ## dtrace-and-systemtap-probing-support:DTrace and
SystemTap probing support

Python can now be built "--with-dtrace" which enables static markers for the
following events in the interpreter:

* function call/return

* garbage collection started/finished

* line of code executed.

This can be used to instrument running interpreters in production, without the
need to recompile specific debug builds or providing application-specific
profiling/debugging code.

More details in |:howto/instrumentation.txt/instrumentation:Instrumenting CPython with DTrace and SystemTap|.

The current implementation is tested on Linux and macOS.  Additional markers may
be added in the future.

(Contributed by Łukasz Langa in |:bugs.python.org/issue21590:bpo-21590|, based on patches by Jesús Cea
Avión, David Malcolm, and Nikhil Benesch.)

# other-language-changes:Other Language Changes

Some smaller changes made to the core Python language are:

* A "global" or "nonlocal" statement must now textually appear before the first
  use of the affected name in the same scope. Previously this was a
  |:library/exceptions.txt/SyntaxWarning:SyntaxWarning|.

* It is now possible to set a |:reference/datamodel.txt/specialnames:special method| to "None" to indicate that the
  corresponding operation is not available. For example, if a class sets "
  __iter__()" to "None", the class is not iterable. (Contributed by Andrew Barnert
  and Ivan Levkivskyi in |:bugs.python.org/issue25958:bpo-25958|.)

* Long sequences of repeated traceback lines are now abbreviated as ""[Previous
  line repeated {count} more times]"" (see |:whatsnew36-traceback:traceback| for an example).
  (Contributed by Emanuel Barry in |:bugs.python.org/issue26823:bpo-26823|.)

* Import now raises the new exception |:library/exceptions.txt/ModuleNotFoundError:ModuleNotFoundError| (subclass of
  |:library/exceptions.txt/ImportError:ImportError|) when it cannot find a module.  Code that currently checks for
  ImportError (in try-except) will still work. (Contributed by Eric Snow in
  |:bugs.python.org/issue15767:bpo-15767|.)

* Class methods relying on zero-argument "super()" will now work correctly when
  called from metaclass methods during class creation. (Contributed by Martin
  Teichmann in |:bugs.python.org/issue23722:bpo-23722|.)

# new-modules:New Modules## secrets:secrets

The main purpose of the new |:library/secrets.txt/module-secrets:secrets| module is to provide an obvious way to
reliably generate cryptographically strong pseudo-random values suitable for
managing secrets, such as account authentication, tokens, and similar.

Warning:

  Note that the pseudo-random generators in the |:library/random.txt/module-random:random| module should *NOT* be
  used for security purposes.  Use |:library/secrets.txt/module-secrets:secrets| on Python 3.6+ and |:library/os.txt/os.urandom:os.urandom()| on
  Python 3.5 and earlier.

See also:

  *|index-28:⚓|*
  |:www.python.org/dev/peps/pep-0506:PEP 506| – Adding A Secrets Module To The Standard Library
     PEP written and implemented by Steven D’Aprano.

# improved-modules:Improved Modules## array:array

Exhausted iterators of |:library/array.txt/array.array:array.array| will now stay exhausted even if the
iterated array is extended.  This is consistent with the behavior of other
mutable sequences.

Contributed by Serhiy Storchaka in |:bugs.python.org/issue26492:bpo-26492|.

## ast:ast

The new "ast.Constant" AST node has been added.  It can be used by external AST
optimizers for the purposes of constant folding.

Contributed by Victor Stinner in |:bugs.python.org/issue26146:bpo-26146|.

## asyncio:asyncio

Starting with Python 3.6 the "asyncio" module is no longer provisional and its
API is considered stable.

Notable changes in the |:library/asyncio.txt/module-asyncio:asyncio| module since Python 3.5.0 (all backported to
3.5.x due to the provisional status):

* The |:library/asyncio-eventloop.txt/asyncio.get_event_loop:get_event_loop()| function has been changed to always return the currently
  running loop when called from coroutines and callbacks. (Contributed by Yury
  Selivanov in |:bugs.python.org/issue28613:bpo-28613|.)

* The |:library/asyncio-future.txt/asyncio.ensure_future:ensure_future()| function and all functions that use it, such as
  |:library/asyncio-eventloop.txt/asyncio.loop.run_until_complete:loop.run_until_complete()|, now accept all kinds of |:glossary.txt/term-awaitable:awaitable objects|.
  (Contributed by Yury Selivanov.)

* New |:library/asyncio-task.txt/asyncio.run_coroutine_threadsafe:run_coroutine_threadsafe()| function to submit coroutines to event loops
  from other threads. (Contributed by Vincent Michel.)

* New |:library/asyncio-protocol.txt/asyncio.BaseTransport.is_closing:Transport.is_closing()| method to check if the transport is closing or
  closed. (Contributed by Yury Selivanov.)

* The |:library/asyncio-eventloop.txt/asyncio.loop.create_server:loop.create_server()| method can now accept a list of hosts. (Contributed
  by Yann Sionneau.)

* New |:library/asyncio-eventloop.txt/asyncio.loop.create_future:loop.create_future()| method to create Future objects.  This allows
  alternative event loop implementations, such as |:github.com/MagicStack/uvloop:uvloop|*|uvloop:⚓|* , to
  provide a faster |:library/asyncio-future.txt/asyncio.Future:asyncio.Future| implementation. (Contributed by Yury Selivanov
  in |:bugs.python.org/issue27041:bpo-27041|.)

* New |:library/asyncio-eventloop.txt/asyncio.loop.get_exception_handler:loop.get_exception_handler()| method to get the current exception handler.
  (Contributed by Yury Selivanov in |:bugs.python.org/issue27040:bpo-27040|.)

* New |:library/asyncio-stream.txt/asyncio.StreamReader.readuntil:StreamReader.readuntil()| method to read data from the stream until a
  separator bytes sequence appears. (Contributed by Mark Korenberg.)

* The performance of |:library/asyncio-stream.txt/asyncio.StreamReader.readexactly:StreamReader.readexactly()| has been improved. (Contributed
  by Mark Korenberg in |:bugs.python.org/issue28370:bpo-28370|.)

* The |:library/asyncio-eventloop.txt/asyncio.loop.getaddrinfo:loop.getaddrinfo()| method is optimized to avoid calling the system "
  getaddrinfo" function if the address is already resolved. (Contributed by A.
  Jesse Jiryu Davis.)

* The |:library/asyncio-eventloop.txt/asyncio.loop.stop:loop.stop()| method has been changed to stop the loop immediately after the
  current iteration.  Any new callbacks scheduled as a result of the last
  iteration will be discarded. (Contributed by Guido van Rossum in |:bugs.python.org/issue25593:bpo-25593|.)

* "Future.set_exception" will now raise |:library/exceptions.txt/TypeError:TypeError| when passed an instance of the
  |:library/exceptions.txt/StopIteration:StopIteration| exception. (Contributed by Chris Angelico in |:bugs.python.org/issue26221:bpo-26221|.)

* New |:library/asyncio-eventloop.txt/asyncio.loop.connect_accepted_socket:loop.connect_accepted_socket()| method to be used by servers that accept
  connections outside of asyncio, but that use asyncio to handle them.
  (Contributed by Jim Fulton in |:bugs.python.org/issue27392:bpo-27392|.)

* "TCP_NODELAY" flag is now set for all TCP transports by default. (Contributed by
  Yury Selivanov in |:bugs.python.org/issue27456:bpo-27456|.)

* New |:library/asyncio-eventloop.txt/asyncio.loop.shutdown_asyncgens:loop.shutdown_asyncgens()| to properly close pending asynchronous
  generators before closing the loop. (Contributed by Yury Selivanov in
  |:bugs.python.org/issue28003:bpo-28003|.)

* |:library/asyncio-future.txt/asyncio.Future:Future| and |:library/asyncio-task.txt/asyncio.Task:Task| classes now have an optimized C implementation which makes
  asyncio code up to 30% faster. (Contributed by Yury Selivanov and INADA Naoki in
  |:bugs.python.org/issue26081:bpo-26081| and |:bugs.python.org/issue28544:bpo-28544|.)

## binascii:binascii

The |:library/binascii.txt/binascii.b2a_base64:b2a_base64()| function now accepts an optional *newline* keyword argument
to control whether the newline character is appended to the return value.
(Contributed by Victor Stinner in |:bugs.python.org/issue25357:bpo-25357|.)

## cmath:cmath

The new |:library/cmath.txt/cmath.tau:cmath.tau| (*τ*) constant has been added. (Contributed by Lisa Roach in
|:bugs.python.org/issue12345:bpo-12345|, see *|index-29:⚓|* |:www.python.org/dev/peps/pep-0628:PEP 628| for details.)

New constants: |:library/cmath.txt/cmath.inf:cmath.inf| and |:library/cmath.txt/cmath.nan:cmath.nan| to match |:library/math.txt/math.inf:math.inf| and |:library/math.txt/math.nan:math.nan|,
and also |:library/cmath.txt/cmath.infj:cmath.infj| and |:library/cmath.txt/cmath.nanj:cmath.nanj| to match the format used by complex repr.
(Contributed by Mark Dickinson in |:bugs.python.org/issue23229:bpo-23229|.)

## collections:collections

The new |:library/collections.abc.txt/collections.abc.Collection:Collection| abstract base class has been added to represent sized
iterable container classes. (Contributed by Ivan Levkivskyi, docs by Neil
Girdhar in |:bugs.python.org/issue27598:bpo-27598|.)

The new |:library/collections.abc.txt/collections.abc.Reversible:Reversible| abstract base class represents iterable classes that also
provide the "__reversed__()" method. (Contributed by Ivan Levkivskyi in
|:bugs.python.org/issue25987:bpo-25987|.)

The new |:library/collections.abc.txt/collections.abc.AsyncGenerator:AsyncGenerator| abstract base class represents asynchronous generators.
(Contributed by Yury Selivanov in |:bugs.python.org/issue28720:bpo-28720|.)

The |:library/collections.txt/collections.namedtuple:namedtuple()| function now accepts an optional keyword argument *module*,
which, when specified, is used for the "__module__" attribute of the returned
named tuple class. (Contributed by Raymond Hettinger in |:bugs.python.org/issue17941:bpo-17941|.)

The *verbose* and *rename* arguments for |:library/collections.txt/collections.namedtuple:namedtuple()| are now keyword-only.
(Contributed by Raymond Hettinger in |:bugs.python.org/issue25628:bpo-25628|.)

Recursive |:library/collections.txt/collections.deque:collections.deque| instances can now be pickled. (Contributed by
Serhiy Storchaka in |:bugs.python.org/issue26482:bpo-26482|.)

## concurrent-futures:concurrent.futures

The |:library/concurrent.futures.txt/concurrent.futures.ThreadPoolExecutor:ThreadPoolExecutor| class constructor now accepts an optional *
thread_name_prefix* argument to make it possible to customize the names of the
threads created by the pool. (Contributed by Gregory P. Smith in |:bugs.python.org/issue27664:bpo-27664|.)

## contextlib:contextlib

The |:library/contextlib.txt/contextlib.AbstractContextManager:contextlib.AbstractContextManager| class has been added to provide an
abstract base class for context managers.  It provides a sensible default
implementation for *__enter__()* which returns "self" and leaves *__exit__()* an
abstract method.  A matching class has been added to the |:library/typing.txt/module-typing:typing| module as
|:library/typing.txt/typing.ContextManager:typing.ContextManager|. (Contributed by Brett Cannon in |:bugs.python.org/issue25609:bpo-25609|.)

## datetime:datetime

The |:library/datetime.txt/datetime.datetime:datetime| and |:library/datetime.txt/datetime.time:time| classes have the new "fold" attribute used to
disambiguate local time when necessary.  Many functions in the |:library/datetime.txt/module-datetime:datetime| have
been updated to support local time disambiguation. See
|:whatsnew36-pep495:Local Time Disambiguation| section for more information. (Contributed by
Alexander Belopolsky in |:bugs.python.org/issue24773:bpo-24773|.)

The |:library/datetime.txt/datetime.datetime.strftime:datetime.strftime()| and |:library/datetime.txt/datetime.date.strftime:date.strftime()| methods now support ISO 8601
date directives "%G", "%u" and "%V". (Contributed by Ashley Anderson in
|:bugs.python.org/issue12006:bpo-12006|.)

The |:library/datetime.txt/datetime.datetime.isoformat:datetime.isoformat()| function now accepts an optional *timespec* argument
that specifies the number of additional components of the time value to include.
(Contributed by Alessandro Cucci and Alexander Belopolsky in |:bugs.python.org/issue19475:bpo-19475|.)

The |:library/datetime.txt/datetime.datetime.combine:datetime.combine()| now accepts an optional *tzinfo* argument. (Contributed
by Alexander Belopolsky in |:bugs.python.org/issue27661:bpo-27661|.)

## decimal:decimal

New |:library/decimal.txt/decimal.Decimal.as_integer_ratio:Decimal.as_integer_ratio()| method that returns a pair "(n, d)" of integers
that represent the given |:library/decimal.txt/decimal.Decimal:Decimal| instance as a fraction, in lowest terms and
with a positive denominator:

```rst
>>> Decimal('-3.14').as_integer_ratio()
(-157, 50)
```

(Contributed by Stefan Krah amd Mark Dickinson in |:bugs.python.org/issue25928:bpo-25928|.)

## distutils:distutils

The "default_format" attribute has been removed from "
distutils.command.sdist.sdist" and the "formats" attribute defaults to "
['gztar']". Although not anticipated, any code relying on the presence of "
default_format" may need to be adapted. See |:bugs.python.org/issue27819:bpo-27819| for more details.

## email:email

The new email API, enabled via the *policy* keyword to various constructors, is
no longer provisional.  The |:library/email.txt/module-email:email| documentation has been reorganized and
rewritten to focus on the new API, while retaining the old documentation for the
legacy API.  (Contributed by R. David Murray in |:bugs.python.org/issue24277:bpo-24277|.)

The |:library/email.mime.txt/module-email.mime:email.mime| classes now all accept an optional *policy* keyword.
(Contributed by Berker Peksag in |:bugs.python.org/issue27331:bpo-27331|.)

The |:library/email.generator.txt/email.generator.DecodedGenerator:DecodedGenerator| now supports the *policy* keyword.

There is a new |:library/email.policy.txt/module-email.policy:policy| attribute, |:library/email.policy.txt/email.policy.Policy.message_factory:message_factory|, that controls what class
is used by default when the parser creates new message objects.  For the
|:library/email.policy.txt/email.policy.compat32:email.policy.compat32| policy this is |:library/email.compat32-message.txt/email.message.Message:Message|, for the new policies it is
|:library/email.message.txt/email.message.EmailMessage:EmailMessage|. (Contributed by R. David Murray in |:bugs.python.org/issue20476:bpo-20476|.)

## encodings:encodings

On Windows, added the "'oem'" encoding to use "CP_OEMCP", and the "'ansi'" alias
for the existing "'mbcs'" encoding, which uses the "CP_ACP" code page.
(Contributed by Steve Dower in |:bugs.python.org/issue27959:bpo-27959|.)

## enum:enum

Two new enumeration base classes have been added to the |:library/enum.txt/module-enum:enum| module: |:library/enum.txt/enum.Flag:Flag|
and "IntFlags".  Both are used to define constants that can be combined using
the bitwise operators. (Contributed by Ethan Furman in |:bugs.python.org/issue23591:bpo-23591|.)

Many standard library modules have been updated to use the "IntFlags" class for
their constants.

The new |:library/enum.txt/enum.auto:enum.auto| value can be used to assign values to enum members
automatically:

```rst
>>> from enum import Enum, auto
>>> class Color(Enum):
...     red = auto()
...     blue = auto()
...     green = auto()
...
>>> list(Color)
[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]
```

## faulthandler:faulthandler

On Windows, the |:library/faulthandler.txt/module-faulthandler:faulthandler| module now installs a handler for Windows
exceptions: see |:library/faulthandler.txt/faulthandler.enable:faulthandler.enable()|. (Contributed by Victor Stinner in
|:bugs.python.org/issue23848:bpo-23848|.)

## fileinput:fileinput

|:library/fileinput.txt/fileinput.hook_encoded:hook_encoded()| now supports the *errors* argument. (Contributed by Joseph
Hackman in |:bugs.python.org/issue25788:bpo-25788|.)

## hashlib:hashlib

|:library/hashlib.txt/module-hashlib:hashlib| supports OpenSSL 1.1.0.  The minimum recommend version is 1.0.2.
(Contributed by Christian Heimes in |:bugs.python.org/issue26470:bpo-26470|.)

BLAKE2 hash functions were added to the module. |:library/hashlib.txt/hashlib.blake2b:blake2b()| and |:library/hashlib.txt/hashlib.blake2s:blake2s()| are
always available and support the full feature set of BLAKE2. (Contributed by
Christian Heimes in |:bugs.python.org/issue26798:bpo-26798| based on code by Dmitry Chestnykh and Samuel
Neves. Documentation written by Dmitry Chestnykh.)

The SHA-3 hash functions "sha3_224()", "sha3_256()", "sha3_384()", "sha3_512()",
and SHAKE hash functions "shake_128()" and "shake_256()" were added.
(Contributed by Christian Heimes in |:bugs.python.org/issue16113:bpo-16113|. Keccak Code Package by Guido
Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, and Ronny Van Keer.)

The password-based key derivation function |:library/hashlib.txt/hashlib.scrypt:scrypt()| is now available with
OpenSSL 1.1.0 and newer. (Contributed by Christian Heimes in |:bugs.python.org/issue27928:bpo-27928|.)

## http-client:http.client

|:library/http.client.txt/http.client.HTTPConnection.request:HTTPConnection.request()| and |:library/http.client.txt/http.client.HTTPConnection.endheaders:endheaders()| both now support chunked encoding
request bodies. (Contributed by Demian Brecht and Rolf Krahl in |:bugs.python.org/issue12319:bpo-12319|.)

## idlelib-and-idle:idlelib and IDLE

The idlelib package is being modernized and refactored to make IDLE look and
work better and to make the code easier to understand, test, and improve. Part
of making IDLE look better, especially on Linux and Mac, is using ttk widgets,
mostly in the dialogs.  As a result, IDLE no longer runs with tcl/tk 8.4.  It
now requires tcl/tk 8.5 or 8.6.  We recommend running the latest release of
either.

‘Modernizing’ includes renaming and consolidation of idlelib modules. The
renaming of files with partial uppercase names is similar to the renaming of,
for instance, Tkinter and TkFont to tkinter and tkinter.font in 3.0.  As a
result, imports of idlelib files that worked in 3.5 will usually not work in
3.6.  At least a module name change will be needed (see idlelib/README.txt),
sometimes more.  (Name changes contributed by Al Swiegart and Terry Reedy in
|:bugs.python.org/issue24225:bpo-24225|.  Most idlelib patches since have been and will be part of the
process.)

In compensation, the eventual result with be that some idlelib classes will be
easier to use, with better APIs and docstrings explaining them.  Additional
useful information will be added to idlelib when available.

New in 3.6.2:

Multiple fixes for autocompletion. (Contributed by Louie Lu in |:bugs.python.org/issue15786:bpo-15786|.)

New in 3.6.3:

Module Browser (on the File menu, formerly called Class Browser), now displays
nested functions and classes in addition to top-level functions and classes.
(Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan Reedy in
|:bugs.python.org/issue1612262:bpo-1612262|.)

The IDLE features formerly implemented as extensions have been reimplemented as
normal features.  Their settings have been moved from the Extensions tab to
other dialog tabs. (Contributed by Charles Wohlganger and Terry Jan Reedy in
|:bugs.python.org/issue27099:bpo-27099|.)

The Settings dialog (Options, Configure IDLE) has been partly rewritten to
improve both appearance and function. (Contributed by Cheryl Sabella and Terry
Jan Reedy in multiple issues.)

New in 3.6.4:

The font sample now includes a selection of non-Latin characters so that users
can better see the effect of selecting a particular font. (Contributed by Terry
Jan Reedy in |:bugs.python.org/issue13802:bpo-13802|.) The sample can be edited to include other characters.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue31860:bpo-31860|.)

New in 3.6.6:

Editor code context option revised.  Box displays all context lines up to
maxlines.  Clicking on a context line jumps the editor to that line.  Context
colors for custom themes is added to Highlights tab of Settings dialog.
(Contributed by Cheryl Sabella and Terry Jan Reedy in |:bugs.python.org/issue33642:bpo-33642|, |:bugs.python.org/issue33768:bpo-33768|,
and |:bugs.python.org/issue33679:bpo-33679|.)

On Windows, a new API call tells Windows that tk scales for DPI. On Windows 8.1+
or 10, with DPI compatibility properties of the Python binary unchanged, and a
monitor resolution greater than 96 DPI, this should make text and lines sharper.
It should otherwise have no effect. (Contributed by Terry Jan Reedy in
|:bugs.python.org/issue33656:bpo-33656|.)

New in 3.6.7:

Output over N lines (50 by default) is squeezed down to a button. N can be
changed in the PyShell section of the General page of the Settings dialog.
Fewer, but possibly extra long, lines can be squeezed by right clicking on the
output.  Squeezed output can be expanded in place by double-clicking the button
or into the clipboard or a separate window by right-clicking the button.
(Contributed by Tal Einat in |:bugs.python.org/issue1529353:bpo-1529353|.)

## importlib:importlib

Import now raises the new exception |:library/exceptions.txt/ModuleNotFoundError:ModuleNotFoundError| (subclass of
|:library/exceptions.txt/ImportError:ImportError|) when it cannot find a module.  Code that current checks for "
ImportError" (in try-except) will still work. (Contributed by Eric Snow in
|:bugs.python.org/issue15767:bpo-15767|.)

|:library/importlib.txt/importlib.util.LazyLoader:importlib.util.LazyLoader| now calls |:library/importlib.txt/importlib.abc.Loader.create_module:create_module()| on the wrapped loader,
removing the restriction that |:library/importlib.txt/importlib.machinery.BuiltinImporter:importlib.machinery.BuiltinImporter| and
|:library/importlib.txt/importlib.machinery.ExtensionFileLoader:importlib.machinery.ExtensionFileLoader| couldn’t be used with
|:library/importlib.txt/importlib.util.LazyLoader:importlib.util.LazyLoader|.

|:library/importlib.txt/importlib.util.cache_from_source:importlib.util.cache_from_source()|, |:library/importlib.txt/importlib.util.source_from_cache:importlib.util.source_from_cache()|, and
|:library/importlib.txt/importlib.util.spec_from_file_location:importlib.util.spec_from_file_location()| now accept a |:glossary.txt/term-path-like-object:path-like object|.

## inspect:inspect

The |:library/inspect.txt/inspect.signature:inspect.signature()| function now reports the implicit ".0" parameters
generated by the compiler for comprehension and generator expression scopes as
if they were positional-only parameters called "implicit0". (Contributed by
Jelle Zijlstra in |:bugs.python.org/issue19611:bpo-19611|.)

To reduce code churn when upgrading from Python 2.7 and the legacy
|:library/inspect.txt/inspect.getargspec:inspect.getargspec()| API, the previously documented deprecation of
|:library/inspect.txt/inspect.getfullargspec:inspect.getfullargspec()| has been reversed. While this function is convenient
for single/source Python 2/3 code bases, the richer |:library/inspect.txt/inspect.signature:inspect.signature()|
interface remains the recommended approach for new code. (Contributed by Nick
Coghlan in |:bugs.python.org/issue27172:bpo-27172|)

## json:json

|:library/json.txt/json.load:json.load()| and |:library/json.txt/json.loads:json.loads()| now support binary input.  Encoded JSON should
be represented using either UTF-8, UTF-16, or UTF-32. (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue17909:bpo-17909|.)

## logging:logging

The new |:library/logging.handlers.txt/logging.handlers.WatchedFileHandler.reopenIfNeeded:WatchedFileHandler.reopenIfNeeded()| method has been added to add the
ability to check if the log file needs to be reopened. (Contributed by Marian
Horban in |:bugs.python.org/issue24884:bpo-24884|.)

## math:math

The tau (*τ*) constant has been added to the |:library/math.txt/module-math:math| and |:library/cmath.txt/module-cmath:cmath| modules.
(Contributed by Lisa Roach in |:bugs.python.org/issue12345:bpo-12345|, see *|index-30:⚓|* |:www.python.org/dev/peps/pep-0628:PEP 628| for
details.)

## multiprocessing:multiprocessing

|:library/multiprocessing.txt/multiprocessing-proxy-objects:Proxy Objects| returned by "multiprocessing.Manager()" can now be nested.
(Contributed by Davin Potts in |:bugs.python.org/issue6766:bpo-6766|.)

## os:os

See the summary of |:whatsnew36-pep519:PEP 519| for details on how the |:library/os.txt/module-os:os| and |:library/os.path.txt/module-os.path:os.path| modules
now support |:glossary.txt/term-path-like-object:path-like objects|.

|:library/os.txt/os.scandir:scandir()| now supports |:library/stdtypes.txt/bytes:bytes| paths on Windows.

A new |:library/os.txt/os.scandir.close:close()| method allows explicitly closing a |:library/os.txt/os.scandir:scandir()| iterator.  The
|:library/os.txt/os.scandir:scandir()| iterator now supports the |:glossary.txt/term-context-manager:context manager| protocol.  If a "
scandir()" iterator is neither exhausted nor explicitly closed a
|:library/exceptions.txt/ResourceWarning:ResourceWarning| will be emitted in its destructor. (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue25994:bpo-25994|.)

On Linux, |:library/os.txt/os.urandom:os.urandom()| now blocks until the system urandom entropy pool is
initialized to increase the security. See the *|index-31:⚓|* |:www.python.org/dev/peps/pep-0524:PEP 524| for the
rationale.

The Linux "getrandom()" syscall (get random bytes) is now exposed as the new
|:library/os.txt/os.getrandom:os.getrandom()| function. (Contributed by Victor Stinner, part of the
*|index-32:⚓|* |:www.python.org/dev/peps/pep-0524:PEP 524|)

## pathlib:pathlib

|:library/pathlib.txt/module-pathlib:pathlib| now supports |:glossary.txt/term-path-like-object:path-like objects|. (Contributed by Brett Cannon in
|:bugs.python.org/issue27186:bpo-27186|.)

See the summary of |:whatsnew36-pep519:PEP 519| for details.

## pdb:pdb

The |:library/pdb.txt/pdb.Pdb:Pdb| class constructor has a new optional *readrc* argument to control
whether ".pdbrc" files should be read.

## pickle:pickle

Objects that need "__new__" called with keyword arguments can now be pickled
using |:library/pickle.txt/pickle-protocols:pickle protocols| older than protocol version 4. Protocol version 4
already supports this case.  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue24164:bpo-24164|.)

## pickletools:pickletools

|:library/pickletools.txt/pickletools.dis:pickletools.dis()| now outputs the implicit memo index for the "MEMOIZE"
opcode. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue25382:bpo-25382|.)

## pydoc:pydoc

The |:library/pydoc.txt/module-pydoc:pydoc| module has learned to respect the "MANPAGER" environment variable.
(Contributed by Matthias Klose in |:bugs.python.org/issue8637:bpo-8637|.)

|:library/functions.txt/help:help()| and |:library/pydoc.txt/module-pydoc:pydoc| can now list named tuple fields in the order they were
defined rather than alphabetically. (Contributed by Raymond Hettinger in
|:bugs.python.org/issue24879:bpo-24879|.)

## random:random

The new |:library/random.txt/random.choices:choices()| function returns a list of elements of specified size from
the given population with optional weights. (Contributed by Raymond Hettinger in
|:bugs.python.org/issue18844:bpo-18844|.)

## re:re

Added support of modifier spans in regular expressions.  Examples: "
'(?i:p)ython'" matches "'python'" and "'Python'", but not "'PYTHON'"; "
'(?i)g(?-i:v)r'" matches "'GvR'" and "'gvr'", but not "'GVR'". (Contributed by
Serhiy Storchaka in |:bugs.python.org/issue433028:bpo-433028|.)

Match object groups can be accessed by "__getitem__", which is equivalent to "
group()".  So "mo['name']" is now equivalent to "mo.group('name')".
(Contributed by Eric Smith in |:bugs.python.org/issue24454:bpo-24454|.)

"Match" objects now support |:reference/datamodel.txt/object.__index__:index-like objects| as group indices. (Contributed
by Jeroen Demeyer and Xiang Zhang in |:bugs.python.org/issue27177:bpo-27177|.)

## readline:readline

Added |:library/readline.txt/readline.set_auto_history:set_auto_history()| to enable or disable automatic addition of input to
the history list.  (Contributed by Tyler Crompton in |:bugs.python.org/issue26870:bpo-26870|.)

## rlcompleter:rlcompleter

Private and special attribute names now are omitted unless the prefix starts
with underscores.  A space or a colon is added after some completed keywords.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue25011:bpo-25011| and |:bugs.python.org/issue25209:bpo-25209|.)

## shlex:shlex

The |:library/shlex.txt/shlex.shlex:shlex| has much |:library/shlex.txt/improved-shell-compatibility:improved shell compatibility| through the new *
punctuation_chars* argument to control which characters are treated as
punctuation. (Contributed by Vinay Sajip in |:bugs.python.org/issue1521950:bpo-1521950|.)

## site:site

When specifying paths to add to |:library/sys.txt/sys.path:sys.path| in a *.pth* file, you may now specify
file paths on top of directories (e.g. zip files). (Contributed by Wolfgang
Langner in |:bugs.python.org/issue26587:bpo-26587|).

## sqlite3:sqlite3

|:library/sqlite3.txt/sqlite3.Cursor.lastrowid:sqlite3.Cursor.lastrowid| now supports the "REPLACE" statement. (Contributed by
Alex LordThorsen in |:bugs.python.org/issue16864:bpo-16864|.)

## socket:socket

The |:library/socket.txt/socket.socket.ioctl:ioctl()| function now supports the |:library/socket.txt/socket.SIO_LOOPBACK_FAST_PATH:SIO_LOOPBACK_FAST_PATH| control code.
(Contributed by Daniel Stokes in |:bugs.python.org/issue26536:bpo-26536|.)

The |:library/socket.txt/socket.socket.getsockopt:getsockopt()| constants "SO_DOMAIN", "SO_PROTOCOL", "SO_PEERSEC", and "
SO_PASSSEC" are now supported. (Contributed by Christian Heimes in |:bugs.python.org/issue26907:bpo-26907|.)

The |:library/socket.txt/socket.socket.setsockopt:setsockopt()| now supports the "setsockopt(level, optname, None, optlen:
int)" form. (Contributed by Christian Heimes in |:bugs.python.org/issue27744:bpo-27744|.)

The socket module now supports the address family |:library/socket.txt/socket.AF_ALG:AF_ALG| to interface with
Linux Kernel crypto API. "ALG_*", "SOL_ALG" and |:library/socket.txt/socket.socket.sendmsg_afalg:sendmsg_afalg()| were added.
(Contributed by Christian Heimes in |:bugs.python.org/issue27744:bpo-27744| with support from Victor
Stinner.)

New Linux constants "TCP_USER_TIMEOUT" and "TCP_CONGESTION" were added.
(Contributed by Omar Sandoval, issue:*26273*).

## socketserver:socketserver

Servers based on the |:library/socketserver.txt/module-socketserver:socketserver| module, including those defined in
|:library/http.server.txt/module-http.server:http.server|, |:library/xmlrpc.server.txt/module-xmlrpc.server:xmlrpc.server| and |:library/wsgiref.txt/module-wsgiref.simple_server:wsgiref.simple_server|, now support the
|:glossary.txt/term-context-manager:context manager| protocol. (Contributed by Aviv Palivoda in |:bugs.python.org/issue26404:bpo-26404|.)

The "wfile" attribute of |:library/socketserver.txt/socketserver.StreamRequestHandler:StreamRequestHandler| classes now implements the
|:library/io.txt/io.BufferedIOBase:io.BufferedIOBase| writable interface.  In particular, calling |:library/io.txt/io.BufferedIOBase.write:write()| is now
guaranteed to send the data in full.  (Contributed by Martin Panter in
|:bugs.python.org/issue26721:bpo-26721|.)

## ssl:ssl

|:library/ssl.txt/module-ssl:ssl| supports OpenSSL 1.1.0.  The minimum recommend version is 1.0.2.
(Contributed by Christian Heimes in |:bugs.python.org/issue26470:bpo-26470|.)

3DES has been removed from the default cipher suites and ChaCha20 Poly1305
cipher suites have been added. (Contributed by Christian Heimes in |:bugs.python.org/issue27850:bpo-27850|
and |:bugs.python.org/issue27766:bpo-27766|.)

|:library/ssl.txt/ssl.SSLContext:SSLContext| has better default configuration for options and ciphers.
(Contributed by Christian Heimes in |:bugs.python.org/issue28043:bpo-28043|.)

SSL session can be copied from one client-side connection to another with the
new |:library/ssl.txt/ssl.SSLSession:SSLSession| class.  TLS session resumption can speed up the initial
handshake, reduce latency and improve performance (Contributed by Christian
Heimes in |:bugs.python.org/issue19500:bpo-19500| based on a draft by Alex Warhawk.)

The new |:library/ssl.txt/ssl.SSLContext.get_ciphers:get_ciphers()| method can be used to get a list of enabled ciphers in
order of cipher priority.

All constants and flags have been converted to |:library/enum.txt/enum.IntEnum:IntEnum| and "IntFlags".
(Contributed by Christian Heimes in |:bugs.python.org/issue28025:bpo-28025|.)

Server and client-side specific TLS protocols for |:library/ssl.txt/ssl.SSLContext:SSLContext| were added.
(Contributed by Christian Heimes in |:bugs.python.org/issue28085:bpo-28085|.)

## statistics:statistics

A new |:library/statistics.txt/statistics.harmonic_mean:harmonic_mean()| function has been added. (Contributed by Steven D’Aprano
in |:bugs.python.org/issue27181:bpo-27181|.)

## struct:struct

|:library/struct.txt/module-struct:struct| now supports IEEE 754 half-precision floats via the "'e'" format
specifier. (Contributed by Eli Stevens, Mark Dickinson in |:bugs.python.org/issue11734:bpo-11734|.)

## subprocess:subprocess

|:library/subprocess.txt/subprocess.Popen:subprocess.Popen| destructor now emits a |:library/exceptions.txt/ResourceWarning:ResourceWarning| warning if the child
process is still running. Use the context manager protocol ("with proc: ...") or
explicitly call the |:library/subprocess.txt/subprocess.Popen.wait:wait()| method to read the exit status of the child
process. (Contributed by Victor Stinner in |:bugs.python.org/issue26741:bpo-26741|.)

The |:library/subprocess.txt/subprocess.Popen:subprocess.Popen| constructor and all functions that pass arguments through
to it now accept *encoding* and *errors* arguments. Specifying either of these
will enable text mode for the *stdin*, *stdout* and *stderr* streams.
(Contributed by Steve Dower in |:bugs.python.org/issue6135:bpo-6135|.)

## sys:sys

The new |:library/sys.txt/sys.getfilesystemencodeerrors:getfilesystemencodeerrors()| function returns the name of the error
mode used to convert between Unicode filenames and bytes filenames. (Contributed
by Steve Dower in |:bugs.python.org/issue27781:bpo-27781|.)

On Windows the return value of the |:library/sys.txt/sys.getwindowsversion:getwindowsversion()| function now includes
the *platform_version* field which contains the accurate major version, minor
version and build number of the current operating system, rather than the
version that is being emulated for the process (Contributed by Steve Dower in
|:bugs.python.org/issue27932:bpo-27932|.)

## telnetlib:telnetlib

|:library/telnetlib.txt/telnetlib.Telnet:Telnet| is now a context manager (contributed by Stéphane Wirtel in |:bugs.python.org/issue25485:bpo-25485|
).

## time:time

The |:library/time.txt/time.struct_time:struct_time| attributes "tm_gmtoff" and "tm_zone" are now available on all
platforms.

## timeit:timeit

The new |:library/timeit.txt/timeit.Timer.autorange:Timer.autorange()| convenience method has been added to call
|:library/timeit.txt/timeit.Timer.timeit:Timer.timeit()| repeatedly so that the total run time is greater or equal to
200 milliseconds. (Contributed by Steven D’Aprano in |:bugs.python.org/issue6422:bpo-6422|.)

|:library/timeit.txt/module-timeit:timeit| now warns when there is substantial (4x) variance between best and
worst times. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue23552:bpo-23552|.)

## tkinter:tkinter

Added methods "trace_add()", "trace_remove()" and "trace_info()" in the "
tkinter.Variable" class.  They replace old methods "trace_variable()", "trace()"
, "trace_vdelete()" and "trace_vinfo()" that use obsolete Tcl commands and might
not work in future versions of Tcl. (Contributed by Serhiy Storchaka in
|:bugs.python.org/issue22115:bpo-22115|).

*|whatsnew36-traceback:⚓|* ## traceback:traceback

Both the traceback module and the interpreter’s builtin exception display now
abbreviate long sequences of repeated lines in tracebacks as shown in the
following example:

```rst
>>> def f(): f()
...
>>> f()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in f
  File "<stdin>", line 1, in f
  File "<stdin>", line 1, in f
  [Previous line repeated 995 more times]
RecursionError: maximum recursion depth exceeded
```

(Contributed by Emanuel Barry in |:bugs.python.org/issue26823:bpo-26823|.)

## tracemalloc:tracemalloc

The |:library/tracemalloc.txt/module-tracemalloc:tracemalloc| module now supports tracing memory allocations in multiple
different address spaces.

The new |:library/tracemalloc.txt/tracemalloc.DomainFilter:DomainFilter| filter class has been added to filter block traces by
their address space (domain).

(Contributed by Victor Stinner in |:bugs.python.org/issue26588:bpo-26588|.)

*|whatsnew36-typing:⚓|* ## typing:typing

Since the |:library/typing.txt/module-typing:typing| module is |:glossary.txt/term-provisional-API:provisional|, all changes introduced in Python 3.6
have also been backported to Python 3.5.x.

The |:library/typing.txt/module-typing:typing| module has a much improved support for generic type aliases.  For
example "Dict[str, Tuple[S, T]]" is now a valid type annotation. (Contributed by
Guido van Rossum in |:github.com/python/typing/pull/195:Github #195|*|github-195:⚓|* .)

The |:library/typing.txt/typing.ContextManager:typing.ContextManager| class has been added for representing
|:library/contextlib.txt/contextlib.AbstractContextManager:contextlib.AbstractContextManager|. (Contributed by Brett Cannon in |:bugs.python.org/issue25609:bpo-25609|
.)

The |:library/typing.txt/typing.Collection:typing.Collection| class has been added for representing
|:library/collections.abc.txt/collections.abc.Collection:collections.abc.Collection|. (Contributed by Ivan Levkivskyi in |:bugs.python.org/issue27598:bpo-27598|.)

The |:library/typing.txt/typing.ClassVar:typing.ClassVar| type construct has been added to mark class variables.  As
introduced in *|index-33:⚓|* |:www.python.org/dev/peps/pep-0526:PEP 526|, a variable annotation wrapped in
ClassVar indicates that a given attribute is intended to be used as a class
variable and should not be set on instances of that class. (Contributed by Ivan
Levkivskyi in |:github.com/python/typing/pull/280:Github #280|*|github-280:⚓|* .)

A new |:library/typing.txt/typing.TYPE_CHECKING:TYPE_CHECKING| constant that is assumed to be "True" by the static type
checkers, but is "False" at runtime. (Contributed by Guido van Rossum in
|:github.com/python/typing/issues/230:Github #230|*|github-230:⚓|* .)

A new |:library/typing.txt/typing.NewType:NewType()| helper function has been added to create lightweight distinct
types for annotations:

```rst
from typing import NewType

UserId = NewType('UserId', int)
some_id = UserId(524313)
```

The static type checker will treat the new type as if it were a subclass of the
original type.  (Contributed by Ivan Levkivskyi in |:github.com/python/typing/issues/189:Github #189|*|github-189:⚓|*
.)

## unicodedata:unicodedata

The |:library/unicodedata.txt/module-unicodedata:unicodedata| module now uses data from |:unicode.org/versions/Unicode9.0.0:Unicode 9.0.0|*|unicode-9-0-0:⚓|* .
(Contributed by Benjamin Peterson.)

## unittest-mock:unittest.mock

The |:library/unittest.mock.txt/unittest.mock.Mock:Mock| class has the following improvements:

* Two new methods, |:library/unittest.mock.txt/unittest.mock.Mock.assert_called:Mock.assert_called()| and |:library/unittest.mock.txt/unittest.mock.Mock.assert_called_once:Mock.assert_called_once()| to check
  if the mock object was called. (Contributed by Amit Saha in |:bugs.python.org/issue26323:bpo-26323|.)

* The |:library/unittest.mock.txt/unittest.mock.Mock.reset_mock:Mock.reset_mock()| method now has two optional keyword only arguments: *
  return_value* and *side_effect*. (Contributed by Kushal Das in |:bugs.python.org/issue21271:bpo-21271|.)

## urllib-request:urllib.request

If a HTTP request has a file or iterable body (other than a bytes object) but no
"Content-Length" header, rather than throwing an error, "AbstractHTTPHandler"
now falls back to use chunked transfer encoding. (Contributed by Demian Brecht
and Rolf Krahl in |:bugs.python.org/issue12319:bpo-12319|.)

## urllib-robotparser:urllib.robotparser

|:library/urllib.robotparser.txt/urllib.robotparser.RobotFileParser:RobotFileParser| now supports the "Crawl-delay" and "Request-rate" extensions.
(Contributed by Nikolay Bogoychev in |:bugs.python.org/issue16099:bpo-16099|.)

## venv:venv

|:library/venv.txt/module-venv:venv| accepts a new parameter "--prompt". This parameter provides an
alternative prefix for the virtual environment. (Proposed by Łukasz Balcerzak
and ported to 3.6 by Stéphane Wirtel in |:bugs.python.org/issue22829:bpo-22829|.)

## warnings:warnings

A new optional *source* parameter has been added to the
|:library/warnings.txt/warnings.warn_explicit:warnings.warn_explicit()| function: the destroyed object which emitted a
|:library/exceptions.txt/ResourceWarning:ResourceWarning|. A *source* attribute has also been added to "
warnings.WarningMessage" (contributed by Victor Stinner in |:bugs.python.org/issue26568:bpo-26568| and
|:bugs.python.org/issue26567:bpo-26567|).

When a |:library/exceptions.txt/ResourceWarning:ResourceWarning| warning is logged, the |:library/tracemalloc.txt/module-tracemalloc:tracemalloc| module is now used
to try to retrieve the traceback where the destroyed object was allocated.

Example with the script "example.py":

```rst
import warnings

def func():
    return open(__file__)

f = func()
f = None
```

Output of the command "python3.6 -Wd -X tracemalloc=5 example.py":

```rst
example.py:7: ResourceWarning: unclosed file <_io.TextIOWrapper name='example.py' mode='r' encoding='UTF-8'>
  f = None
Object allocated at (most recent call first):
  File "example.py", lineno 4
    return open(__file__)
  File "example.py", lineno 6
    f = func()
```

The “Object allocated at” traceback is new and is only displayed if
|:library/tracemalloc.txt/module-tracemalloc:tracemalloc| is tracing Python memory allocations and if the |:library/warnings.txt/module-warnings:warnings| module
was already imported.

## winreg:winreg

Added the 64-bit integer type |:library/winreg.txt/winreg.REG_QWORD:REG_QWORD|. (Contributed by Clement Rouault in
|:bugs.python.org/issue23026:bpo-23026|.)

## winsound:winsound

Allowed keyword arguments to be passed to |:library/winsound.txt/winsound.Beep:Beep|, |:library/winsound.txt/winsound.MessageBeep:MessageBeep|, and |:library/winsound.txt/winsound.PlaySound:PlaySound|
(|:bugs.python.org/issue27982:bpo-27982|).

## xmlrpc-client:xmlrpc.client

The |:library/xmlrpc.client.txt/module-xmlrpc.client:xmlrpc.client| module now supports unmarshalling additional data types used
by the Apache XML-RPC implementation for numerics and "None". (Contributed by
Serhiy Storchaka in |:bugs.python.org/issue26885:bpo-26885|.)

## zipfile:zipfile

A new |:library/zipfile.txt/zipfile.ZipInfo.from_file:ZipInfo.from_file()| class method allows making a |:library/zipfile.txt/zipfile.ZipInfo:ZipInfo| instance from
a filesystem file. A new |:library/zipfile.txt/zipfile.ZipInfo.is_dir:ZipInfo.is_dir()| method can be used to check if the
|:library/zipfile.txt/zipfile.ZipInfo:ZipInfo| instance represents a directory. (Contributed by Thomas Kluyver in
|:bugs.python.org/issue26039:bpo-26039|.)

The |:library/zipfile.txt/zipfile.ZipFile.open:ZipFile.open()| method can now be used to write data into a ZIP file, as
well as for extracting data. (Contributed by Thomas Kluyver in |:bugs.python.org/issue26039:bpo-26039|.)

## zlib:zlib

The |:library/zlib.txt/zlib.compress:compress()| and |:library/zlib.txt/zlib.decompress:decompress()| functions now accept keyword arguments.
(Contributed by Aviv Palivoda in |:bugs.python.org/issue26243:bpo-26243| and Xiang Zhang in |:bugs.python.org/issue16764:bpo-16764|
respectively.)

# optimizations:Optimizations

* The Python interpreter now uses a 16-bit wordcode instead of bytecode which made
  a number of opcode optimizations possible. (Contributed by Demur Rumed with
  input and reviews from Serhiy Storchaka and Victor Stinner in |:bugs.python.org/issue26647:bpo-26647| and
  |:bugs.python.org/issue28050:bpo-28050|.)

* The |:library/asyncio-future.txt/asyncio.Future:asyncio.Future| class now has an optimized C implementation. (Contributed
  by Yury Selivanov and INADA Naoki in |:bugs.python.org/issue26081:bpo-26081|.)

* The |:library/asyncio-task.txt/asyncio.Task:asyncio.Task| class now has an optimized C implementation. (Contributed by
  Yury Selivanov in |:bugs.python.org/issue28544:bpo-28544|.)

* Various implementation improvements in the |:library/typing.txt/module-typing:typing| module (such as caching of
  generic types) allow up to 30 times performance improvements and reduced memory
  footprint.

* The ASCII decoder is now up to 60 times as fast for error handlers "
  surrogateescape", "ignore" and "replace" (Contributed by Victor Stinner in
  |:bugs.python.org/issue24870:bpo-24870|).

* The ASCII and the Latin1 encoders are now up to 3 times as fast for the error
  handler "surrogateescape" (Contributed by Victor Stinner in |:bugs.python.org/issue25227:bpo-25227|).

* The UTF-8 encoder is now up to 75 times as fast for error handlers "ignore", "
  replace", "surrogateescape", "surrogatepass" (Contributed by Victor Stinner in
  |:bugs.python.org/issue25267:bpo-25267|).

* The UTF-8 decoder is now up to 15 times as fast for error handlers "ignore", "
  replace" and "surrogateescape" (Contributed by Victor Stinner in |:bugs.python.org/issue25301:bpo-25301|).

* "bytes % args" is now up to 2 times faster. (Contributed by Victor Stinner in
  |:bugs.python.org/issue25349:bpo-25349|).

* "bytearray % args" is now between 2.5 and 5 times faster. (Contributed by Victor
  Stinner in |:bugs.python.org/issue25399:bpo-25399|).

* Optimize |:library/stdtypes.txt/bytes.fromhex:bytes.fromhex()| and |:library/stdtypes.txt/bytearray.fromhex:bytearray.fromhex()|: they are now between 2x
  and 3.5x faster. (Contributed by Victor Stinner in |:bugs.python.org/issue25401:bpo-25401|).

* Optimize "bytes.replace(b'', b'.')" and "bytearray.replace(b'', b'.')": up to
  80% faster. (Contributed by Josh Snider in |:bugs.python.org/issue26574:bpo-26574|).

* Allocator functions of the |:c-api/memory.txt/c.PyMem_Malloc:PyMem_Malloc()| domain ("PYMEM_DOMAIN_MEM") now use
  the |:c-api/memory.txt/pymalloc:pymalloc memory allocator| instead of "malloc()" function of the C library.
  The pymalloc allocator is optimized for objects smaller or equal to 512 bytes
  with a short lifetime, and use "malloc()" for larger memory blocks. (Contributed
  by Victor Stinner in |:bugs.python.org/issue26249:bpo-26249|).

* |:library/pickle.txt/pickle.load:pickle.load()| and |:library/pickle.txt/pickle.loads:pickle.loads()| are now up to 10% faster when deserializing
  many small objects (Contributed by Victor Stinner in |:bugs.python.org/issue27056:bpo-27056|).

* Passing |:glossary.txt/term-keyword-argument:keyword arguments| to a function has an overhead in comparison with
  passing |:glossary.txt/term-positional-argument:positional arguments|.  Now in extension functions implemented with
  using Argument Clinic this overhead is significantly decreased. (Contributed by
  Serhiy Storchaka in |:bugs.python.org/issue27574:bpo-27574|).

* Optimized |:library/glob.txt/glob.glob:glob()| and |:library/glob.txt/glob.iglob:iglob()| functions in the |:library/glob.txt/module-glob:glob| module; they are now
  about 3–6 times faster. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue25596:bpo-25596|).

* Optimized globbing in |:library/pathlib.txt/module-pathlib:pathlib| by using |:library/os.txt/os.scandir:os.scandir()|; it is now about 1.5–4
  times faster. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue26032:bpo-26032|).

* |:library/xml.etree.elementtree.txt/module-xml.etree.ElementTree:xml.etree.ElementTree| parsing, iteration and deepcopy performance has been
  significantly improved. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue25638:bpo-25638|,
  |:bugs.python.org/issue25873:bpo-25873|, and |:bugs.python.org/issue25869:bpo-25869|.)

* Creation of |:library/fractions.txt/fractions.Fraction:fractions.Fraction| instances from floats and decimals is now 2 to
  3 times faster. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue25971:bpo-25971|.)

# build-and-c-api-changes:Build and C API Changes

* Python now requires some C99 support in the toolchain to build. Most notably,
  Python now uses standard integer types and macros in place of custom macros like
  "PY_LONG_LONG". For more information, see *|index-34:⚓|* |:www.python.org/dev/peps/pep-0007:PEP 7| and |:bugs.python.org/issue17884:bpo-17884|
  .

* Cross-compiling CPython with the Android NDK and the Android API level set to 21
  (Android 5.0 Lollipop) or greater runs successfully. While Android is not yet a
  supported platform, the Python test suite runs on the Android emulator with only
  about 16 tests failures. See the Android meta-issue |:bugs.python.org/issue26865:bpo-26865|.

* The "--enable-optimizations" configure flag has been added. Turning it on will
  activate expensive optimizations like PGO. (Original patch by Alecsandru
  Patrascu of Intel in |:bugs.python.org/issue26359:bpo-26359|.)

* The |:glossary.txt/term-global-interpreter-lock:GIL| must now be held when allocator functions of "PYMEM_DOMAIN_OBJ" (ex:
  |:c-api/memory.txt/c.PyObject_Malloc:PyObject_Malloc()|) and "PYMEM_DOMAIN_MEM" (ex: |:c-api/memory.txt/c.PyMem_Malloc:PyMem_Malloc()|) domains are
  called.

* New |:c-api/init.txt/c.Py_FinalizeEx:Py_FinalizeEx()| API which indicates if flushing buffered data failed.
  (Contributed by Martin Panter in |:bugs.python.org/issue5319:bpo-5319|.)

* |:c-api/arg.txt/c.PyArg_ParseTupleAndKeywords:PyArg_ParseTupleAndKeywords()| now supports |:glossary.txt/positional-only-parameter:positional-only
parameters|.
  Positional-only parameters are defined by empty names. (Contributed by Serhiy
  Storchaka in |:bugs.python.org/issue26282:bpo-26282|).

* "PyTraceback_Print" method now abbreviates long sequences of repeated lines as "
  "[Previous line repeated {count} more times]"". (Contributed by Emanuel Barry in
  |:bugs.python.org/issue26823:bpo-26823|.)

* The new |:c-api/exceptions.txt/c.PyErr_SetImportErrorSubclass:PyErr_SetImportErrorSubclass()| function allows for specifying a
  subclass of |:library/exceptions.txt/ImportError:ImportError| to raise. (Contributed by Eric Snow in |:bugs.python.org/issue15767:bpo-15767|.)

* The new |:c-api/exceptions.txt/c.PyErr_ResourceWarning:PyErr_ResourceWarning()| function can be used to generate a
  |:library/exceptions.txt/ResourceWarning:ResourceWarning| providing the source of the resource allocation. (Contributed
  by Victor Stinner in |:bugs.python.org/issue26567:bpo-26567|.)

* The new |:c-api/sys.txt/c.PyOS_FSPath:PyOS_FSPath()| function returns the file system representation of a
  |:glossary.txt/term-path-like-object:path-like object|. (Contributed by Brett Cannon in |:bugs.python.org/issue27186:bpo-27186|.)

* The |:c-api/unicode.txt/c.PyUnicode_FSConverter:PyUnicode_FSConverter()| and |:c-api/unicode.txt/c.PyUnicode_FSDecoder:PyUnicode_FSDecoder()| functions will now
  accept |:glossary.txt/term-path-like-object:path-like objects|.

# other-improvements:Other Improvements

* When |:using/cmdline.txt/cmdoption-version:--version| (short form: |:using/cmdline.txt/cmdoption-V:-V|) is supplied twice, Python prints
  |:library/sys.txt/sys.version:sys.version| for detailed information.

```rst
$ ./python -VV
Python 3.6.0b4+ (3.6:223967b49e49+, Nov 21 2016, 20:55:04)
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]
```

# deprecated:Deprecated## new-keywords:New Keywords

"async" and "await" are not recommended to be used as variable, class, function
or module names.  Introduced by *|index-35:⚓|* |:www.python.org/dev/peps/pep-0492:PEP 492| in Python 3.5, they
will become proper keywords in Python 3.7.  Starting in Python 3.6, the use of "
async" or "await" as names will generate a |:library/exceptions.txt/DeprecationWarning:DeprecationWarning|.

## deprecated-python-behavior:Deprecated Python behavior

Raising the |:library/exceptions.txt/StopIteration:StopIteration| exception inside a generator will now generate a
|:library/exceptions.txt/DeprecationWarning:DeprecationWarning|, and will trigger a |:library/exceptions.txt/RuntimeError:RuntimeError| in Python 3.7.  See
|:whatsnew/3.5.txt/whatsnew-pep-479:PEP 479: Change StopIteration handling inside generators| for details.

The "__aiter__()" method is now expected to return an asynchronous iterator
directly instead of returning an awaitable as previously. Doing the former will
trigger a |:library/exceptions.txt/DeprecationWarning:DeprecationWarning|.  Backward compatibility will be removed in
Python 3.7. (Contributed by Yury Selivanov in |:bugs.python.org/issue27243:bpo-27243|.)

A backslash-character pair that is not a valid escape sequence now generates a
|:library/exceptions.txt/DeprecationWarning:DeprecationWarning|.  Although this will eventually become a |:library/exceptions.txt/SyntaxError:SyntaxError|,
that will not be for several Python releases. (Contributed by Emanuel Barry in
|:bugs.python.org/issue27364:bpo-27364|.)

When performing a relative import, falling back on "__name__" and "__path__"
from the calling module when "__spec__" or "__package__" are not defined now
raises an |:library/exceptions.txt/ImportWarning:ImportWarning|. (Contributed by Rose Ames in |:bugs.python.org/issue25791:bpo-25791|.)

## deprecated-python-modules-functions-and-methods:Deprecated Python modules,
functions and methods### asynchat:asynchat

The |:library/asynchat.txt/module-asynchat:asynchat| has been deprecated in favor of |:library/asyncio.txt/module-asyncio:asyncio|. (Contributed by
Mariatta in |:bugs.python.org/issue25002:bpo-25002|.)

### asyncore:asyncore

The |:library/asyncore.txt/module-asyncore:asyncore| has been deprecated in favor of |:library/asyncio.txt/module-asyncio:asyncio|. (Contributed by
Mariatta in |:bugs.python.org/issue25002:bpo-25002|.)

### dbm:dbm

Unlike other |:library/dbm.txt/module-dbm:dbm| implementations, the |:library/dbm.txt/module-dbm.dumb:dbm.dumb| module creates databases with
the "'rw'" mode and allows modifying the database opened with the "'r'" mode.
This behavior is now deprecated and will be removed in 3.8. (Contributed by
Serhiy Storchaka in |:bugs.python.org/issue21708:bpo-21708|.)

### id2:distutils

The undocumented "extra_path" argument to the "Distribution" constructor is now
considered deprecated and will raise a warning if set.   Support for this
parameter will be removed in a future Python release.  See |:bugs.python.org/issue27919:bpo-27919| for
details.

### grp:grp

The support of non-integer arguments in |:library/grp.txt/grp.getgrgid:getgrgid()| has been deprecated.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue26129:bpo-26129|.)

### id3:importlib

The |:library/importlib.txt/importlib.machinery.SourceFileLoader.load_module:importlib.machinery.SourceFileLoader.load_module()| and
|:library/importlib.txt/importlib.machinery.SourcelessFileLoader.load_module:importlib.machinery.SourcelessFileLoader.load_module()| methods are now
deprecated. They were the only remaining implementations of
|:library/importlib.txt/importlib.abc.Loader.load_module:importlib.abc.Loader.load_module()| in |:library/importlib.txt/module-importlib:importlib| that had not been deprecated
in previous versions of Python in favour of |:library/importlib.txt/importlib.abc.Loader.exec_module:importlib.abc.Loader.exec_module()|
.

The |:library/importlib.txt/importlib.machinery.WindowsRegistryFinder:importlib.machinery.WindowsRegistryFinder| class is now deprecated. As of
3.6.0, it is still added to |:library/sys.txt/sys.meta_path:sys.meta_path| by default (on Windows), but this
may change in future releases.

### id4:os

Undocumented support of general |:glossary.txt/term-bytes-like-object:bytes-like objects| as paths in |:library/os.txt/module-os:os| functions,
|:library/functions.txt/compile:compile()| and similar functions is now deprecated. (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue25791:bpo-25791| and |:bugs.python.org/issue26754:bpo-26754|.)

### id5:re

Support for inline flags "(?letters)" in the middle of the regular expression
has been deprecated and will be removed in a future Python version.  Flags at
the start of a regular expression are still allowed. (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue22493:bpo-22493|.)

### id6:ssl

OpenSSL 0.9.8, 1.0.0 and 1.0.1 are deprecated and no longer supported. In the
future the |:library/ssl.txt/module-ssl:ssl| module will require at least OpenSSL 1.0.2 or 1.1.0.

SSL-related arguments like "certfile", "keyfile" and "check_hostname" in
|:library/ftplib.txt/module-ftplib:ftplib|, |:library/http.client.txt/module-http.client:http.client|, |:library/imaplib.txt/module-imaplib:imaplib|, |:library/poplib.txt/module-poplib:poplib|, and |:library/smtplib.txt/module-smtplib:smtplib| have been deprecated
in favor of "context". (Contributed by Christian Heimes in |:bugs.python.org/issue28022:bpo-28022|.)

A couple of protocols and functions of the |:library/ssl.txt/module-ssl:ssl| module are now deprecated. Some
features will no longer be available in future versions of OpenSSL. Other
features are deprecated in favor of a different API. (Contributed by Christian
Heimes in |:bugs.python.org/issue28022:bpo-28022| and |:bugs.python.org/issue26470:bpo-26470|.)

### id7:tkinter

The |:library/tkinter.tix.txt/module-tkinter.tix:tkinter.tix| module is now deprecated.  |:library/tkinter.txt/module-tkinter:tkinter| users should use
|:library/tkinter.ttk.txt/module-tkinter.ttk:tkinter.ttk| instead.

### id8:venv

The "pyvenv" script has been deprecated in favour of "python3 -m venv". This
prevents confusion as to what Python interpreter "pyvenv" is connected to and
thus what Python interpreter will be used by the virtual environment.
(Contributed by Brett Cannon in |:bugs.python.org/issue25154:bpo-25154|.)

## deprecated-functions-and-types-of-the-c-api:Deprecated functions and types of
the C API

Undocumented functions "PyUnicode_AsEncodedObject()", "
PyUnicode_AsDecodedObject()", "PyUnicode_AsEncodedUnicode()" and "
PyUnicode_AsDecodedUnicode()" are deprecated now. Use the
|:c-api/codec.txt/codec-registry:generic codec based API| instead.

## deprecated-build-options:Deprecated Build Options

The "--with-system-ffi" configure flag is now on by default on non-macOS UNIX
platforms.  It may be disabled by using "--without-system-ffi", but using the
flag is deprecated and will not be accepted in Python 3.7. macOS is unaffected
by this change.  Note that many OS distributors already use the "--with-system-
ffi" flag when building their system Python.

# removed:Removed## api-and-feature-removals:API and Feature Removals

* Unknown escapes consisting of "'\'" and an ASCII letter in regular expressions
  will now cause an error.  In replacement templates for |:library/re.txt/re.sub:re.sub()| they are still
  allowed, but deprecated. The |:library/re.txt/re.LOCALE:re.LOCALE| flag can now only be used with binary
  patterns.

* "inspect.getmoduleinfo()" was removed (was deprecated since CPython 3.3).
  |:library/inspect.txt/inspect.getmodulename:inspect.getmodulename()| should be used for obtaining the module name for a
  given path. (Contributed by Yury Selivanov in |:bugs.python.org/issue13248:bpo-13248|.)

* "traceback.Ignore" class and "traceback.usage", "traceback.modname", "
  traceback.fullmodname", "traceback.find_lines_from_code", "traceback.find_lines"
  , "traceback.find_strings", "traceback.find_executable_lines" methods were
  removed from the |:library/traceback.txt/module-traceback:traceback| module. They were undocumented methods deprecated
  since Python 3.2 and equivalent functionality is available from private methods.

* The "tk_menuBar()" and "tk_bindForTraversal()" dummy methods in |:library/tkinter.txt/module-tkinter:tkinter| widget
  classes were removed (corresponding Tk commands were obsolete since Tk 4.0).

* The |:library/zipfile.txt/zipfile.ZipFile.open:open()| method of the |:library/zipfile.txt/zipfile.ZipFile:zipfile.ZipFile| class no longer supports the "'U'"
  mode (was deprecated since Python 3.4). Use |:library/io.txt/io.TextIOWrapper:io.TextIOWrapper| for reading
  compressed text files in |:glossary.txt/term-universal-newlines:universal newlines| mode.

* The undocumented "IN", "CDROM", "DLFCN", "TYPES", "CDIO", and "STROPTS" modules
  have been removed.  They had been available in the platform specific "
  Lib/plat-*/" directories, but were chronically out of date, inconsistently
  available across platforms, and unmaintained.  The script that created these
  modules is still available in the source distribution at |:github.com/python/cpython/tree/3.8/Tools/scripts/h2py.py:Tools/scripts/h2py.py|
  .

* The deprecated "asynchat.fifo" class has been removed.

# porting-to-python-3-6:Porting to Python 3.6

This section lists previously described changes and other bugfixes that may
require changes to your code.

## changes-in-python-command-behavior:Changes in ‘python’ Command Behavior

* The output of a special Python build with defined "COUNT_ALLOCS", "
  SHOW_ALLOC_COUNT" or "SHOW_TRACK_COUNT" macros is now off by default.  It can be
  re-enabled using the "-X showalloccount" option. It now outputs to "stderr"
  instead of "stdout". (Contributed by Serhiy Storchaka in |:bugs.python.org/issue23034:bpo-23034|.)

## changes-in-the-python-api:Changes in the Python API

* |:library/functions.txt/open:open()| will no longer allow combining the "'U'" mode flag with "'+'".
  (Contributed by Jeff Balogh and John O’Connor in |:bugs.python.org/issue2091:bpo-2091|.)

* |:library/sqlite3.txt/module-sqlite3:sqlite3| no longer implicitly commits an open transaction before DDL
  statements.

* On Linux, |:library/os.txt/os.urandom:os.urandom()| now blocks until the system urandom entropy pool is
  initialized to increase the security.

* When |:library/importlib.txt/importlib.abc.Loader.exec_module:importlib.abc.Loader.exec_module()| is defined,
  |:library/importlib.txt/importlib.abc.Loader.create_module:importlib.abc.Loader.create_module()| must also be defined.

* |:c-api/exceptions.txt/c.PyErr_SetImportError:PyErr_SetImportError()| now sets |:library/exceptions.txt/TypeError:TypeError| when its *msg* argument is not
  set. Previously only "NULL" was returned.

* The format of the "co_lnotab" attribute of code objects changed to support a
  negative line number delta. By default, Python does not emit bytecode with a
  negative line number delta. Functions using "frame.f_lineno", "
  PyFrame_GetLineNumber()" or "PyCode_Addr2Line()" are not affected. Functions
  directly decoding "co_lnotab" should be updated to use a signed 8-bit integer
  type for the line number delta, but this is only required to support
  applications using a negative line number delta. See "Objects/lnotab_notes.txt"
  for the "co_lnotab" format and how to decode it, and see the *|index-36:⚓|*
  |:www.python.org/dev/peps/pep-0511:PEP 511| for the rationale.

* The functions in the |:library/compileall.txt/module-compileall:compileall| module now return booleans instead of "1" or "
  0" to represent success or failure, respectively. Thanks to booleans being a
  subclass of integers, this should only be an issue if you were doing identity
  checks for "1" or "0". See |:bugs.python.org/issue25768:bpo-25768|.

* Reading the "port" attribute of |:library/urllib.parse.txt/urllib.parse.urlsplit:urllib.parse.urlsplit()| and |:library/urllib.parse.txt/urllib.parse.urlparse:urlparse()|
  results now raises |:library/exceptions.txt/ValueError:ValueError| for out-of-range values, rather than returning
  |:library/constants.txt/None:None|.  See |:bugs.python.org/issue20059:bpo-20059|.

* The |:library/imp.txt/module-imp:imp| module now raises a |:library/exceptions.txt/DeprecationWarning:DeprecationWarning| instead of
  |:library/exceptions.txt/PendingDeprecationWarning:PendingDeprecationWarning|.

* The following modules have had missing APIs added to their "__all__" attributes
  to match the documented APIs: |:library/calendar.txt/module-calendar:calendar|, |:library/cgi.txt/module-cgi:cgi|, |:library/csv.txt/module-csv:csv|, |:library/xml.etree.elementtree.txt/module-xml.etree.ElementTree:ElementTree|, |:library/enum.txt/module-enum:enum|,
  |:library/fileinput.txt/module-fileinput:fileinput|, |:library/ftplib.txt/module-ftplib:ftplib|, |:library/logging.txt/module-logging:logging|, |:library/mailbox.txt/module-mailbox:mailbox|, |:library/mimetypes.txt/module-mimetypes:mimetypes|, |:library/optparse.txt/module-optparse:optparse|, |:library/plistlib.txt/module-plistlib:plistlib|
  , |:library/smtpd.txt/module-smtpd:smtpd|, |:library/subprocess.txt/module-subprocess:subprocess|, |:library/tarfile.txt/module-tarfile:tarfile|, |:library/threading.txt/module-threading:threading| and |:library/wave.txt/module-wave:wave|.  This means they
  will export new symbols when "import *" is used. (Contributed by Joel Taddei and
  Jacek Kołodziej in |:bugs.python.org/issue23883:bpo-23883|.)

* When performing a relative import, if "__package__" does not compare equal to "
  __spec__.parent" then |:library/exceptions.txt/ImportWarning:ImportWarning| is raised. (Contributed by Brett Cannon in
  |:bugs.python.org/issue25791:bpo-25791|.)

* When a relative import is performed and no parent package is known, then
  |:library/exceptions.txt/ImportError:ImportError| will be raised. Previously, |:library/exceptions.txt/SystemError:SystemError| could be raised.
  (Contributed by Brett Cannon in |:bugs.python.org/issue18018:bpo-18018|.)

* Servers based on the |:library/socketserver.txt/module-socketserver:socketserver| module, including those defined in
  |:library/http.server.txt/module-http.server:http.server|, |:library/xmlrpc.server.txt/module-xmlrpc.server:xmlrpc.server| and |:library/wsgiref.txt/module-wsgiref.simple_server:wsgiref.simple_server|, now only catch
  exceptions derived from |:library/exceptions.txt/Exception:Exception|. Therefore if a request handler raises an
  exception like |:library/exceptions.txt/SystemExit:SystemExit| or |:library/exceptions.txt/KeyboardInterrupt:KeyboardInterrupt|, |:library/socketserver.txt/socketserver.BaseServer.handle_error:handle_error()| is no
  longer called, and the exception will stop a single-threaded server.
  (Contributed by Martin Panter in |:bugs.python.org/issue23430:bpo-23430|.)

* |:library/spwd.txt/spwd.getspnam:spwd.getspnam()| now raises a |:library/exceptions.txt/PermissionError:PermissionError| instead of |:library/exceptions.txt/KeyError:KeyError| if the
  user doesn’t have privileges.

* The |:library/socket.txt/socket.socket.close:socket.socket.close()| method now raises an exception if an error (e.g. "
  EBADF") was reported by the underlying system call. (Contributed by Martin
  Panter in |:bugs.python.org/issue26685:bpo-26685|.)

* The *decode_data* argument for the |:library/smtpd.txt/smtpd.SMTPChannel:smtpd.SMTPChannel| and |:library/smtpd.txt/smtpd.SMTPServer:smtpd.SMTPServer|
  constructors is now "False" by default. This means that the argument passed to
  |:library/smtpd.txt/smtpd.SMTPServer.process_message:process_message()| is now a bytes object by default, and "process_message()"
  will be passed keyword arguments. Code that has already been updated in
  accordance with the deprecation warning generated by 3.5 will not be affected.

* All optional arguments of the |:library/json.txt/json.dump:dump()|, |:library/json.txt/json.dumps:dumps()|, |:library/json.txt/json.load:load()| and |:library/json.txt/json.loads:loads()|
  functions and |:library/json.txt/json.JSONEncoder:JSONEncoder| and |:library/json.txt/json.JSONDecoder:JSONDecoder| class constructors in the |:library/json.txt/module-json:json|
  module are now |:glossary.txt/keyword-only-parameter:keyword-only|. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue18726:bpo-18726|.)

* Subclasses of |:library/functions.txt/type:type| which don’t override "type.__new__" may no longer use the
  one-argument form to get the type of an object.

* As part of *|index-37:⚓|* |:www.python.org/dev/peps/pep-0487:PEP 487|, the handling of keyword arguments passed to
  |:library/functions.txt/type:type| (other than the metaclass hint, "metaclass") is now consistently
  delegated to |:reference/datamodel.txt/object.__init_subclass__:object.__init_subclass__()|. This means that "type.__new__()" and
  "type.__init__()" both now accept arbitrary keyword arguments, but
  |:reference/datamodel.txt/object.__init_subclass__:object.__init_subclass__()| (which is called from "type.__new__()") will reject
  them by default. Custom metaclasses accepting additional keyword arguments will
  need to adjust their calls to "type.__new__()" (whether direct or via |:library/functions.txt/super:super|)
  accordingly.

* In "distutils.command.sdist.sdist", the "default_format" attribute has been
  removed and is no longer honored. Instead, the gzipped tarfile format is the
  default on all platforms and no platform-specific selection is made. In
  environments where distributions are built on Windows and zip distributions are
  required, configure the project with a "setup.cfg" file containing the
  following:

```rst
[sdist]
formats=zip
```

  This behavior has also been backported to earlier Python versions by Setuptools
  26.0.0.

* In the |:library/urllib.request.txt/module-urllib.request:urllib.request| module and the |:library/http.client.txt/http.client.HTTPConnection.request:http.client.HTTPConnection.request()|
  method, if no Content-Length header field has been specified and the request
  body is a file object, it is now sent with HTTP 1.1 chunked encoding. If a file
  object has to be sent to a HTTP 1.0 server, the Content-Length value now has to
  be specified by the caller. (Contributed by Demian Brecht and Rolf Krahl with
  tweaks from Martin Panter in |:bugs.python.org/issue12319:bpo-12319|.)

* The |:library/csv.txt/csv.DictReader:DictReader| now returns rows of type |:library/collections.txt/collections.OrderedDict:OrderedDict|. (Contributed by Steve
  Holden in |:bugs.python.org/issue27842:bpo-27842|.)

* The |:library/crypt.txt/crypt.METHOD_CRYPT:crypt.METHOD_CRYPT| will no longer be added to "crypt.methods" if
  unsupported by the platform. (Contributed by Victor Stinner in |:bugs.python.org/issue25287:bpo-25287|.)

* The *verbose* and *rename* arguments for |:library/collections.txt/collections.namedtuple:namedtuple()| are now keyword-only.
  (Contributed by Raymond Hettinger in |:bugs.python.org/issue25628:bpo-25628|.)

* On Linux, |:library/ctypes.txt/ctypes.util.find_library:ctypes.util.find_library()| now looks in "LD_LIBRARY_PATH" for shared
  libraries. (Contributed by Vinay Sajip in |:bugs.python.org/issue9998:bpo-9998|.)

* The |:library/imaplib.txt/imaplib.IMAP4:imaplib.IMAP4| class now handles flags containing the "']'" character in
  messages sent from the server to improve real-world compatibility. (Contributed
  by Lita Cho in |:bugs.python.org/issue21815:bpo-21815|.)

* The "mmap.write()" function now returns the number of bytes written like other
  write methods. (Contributed by Jakub Stasiak in |:bugs.python.org/issue26335:bpo-26335|.)

* The |:library/pkgutil.txt/pkgutil.iter_modules:pkgutil.iter_modules()| and |:library/pkgutil.txt/pkgutil.walk_packages:pkgutil.walk_packages()| functions now return
  |:library/pkgutil.txt/pkgutil.ModuleInfo:ModuleInfo| named tuples. (Contributed by Ramchandra Apte in |:bugs.python.org/issue17211:bpo-17211|.)

* |:library/re.txt/re.sub:re.sub()| now raises an error for invalid numerical group references in
  replacement templates even if the pattern is not found in the string.  The error
  message for invalid group references now includes the group index and the
  position of the reference. (Contributed by SilentGhost, Serhiy Storchaka in
  |:bugs.python.org/issue25953:bpo-25953|.)

* |:library/zipfile.txt/zipfile.ZipFile:zipfile.ZipFile| will now raise |:library/exceptions.txt/NotImplementedError:NotImplementedError| for unrecognized
  compression values.  Previously a plain |:library/exceptions.txt/RuntimeError:RuntimeError| was raised.
  Additionally, calling |:library/zipfile.txt/zipfile.ZipFile:ZipFile| methods on a closed ZipFile or calling the
  |:library/zipfile.txt/zipfile.ZipFile.write:write()| method on a ZipFile created with mode "'r'" will raise a |:library/exceptions.txt/ValueError:ValueError|.
  Previously, a |:library/exceptions.txt/RuntimeError:RuntimeError| was raised in those scenarios.

* when custom metaclasses are combined with zero-argument |:library/functions.txt/super:super()| or direct
  references from methods to the implicit "__class__" closure variable, the
  implicit "__classcell__" namespace entry must now be passed up to "type.__new__"
  for initialisation. Failing to do so will result in a |:library/exceptions.txt/DeprecationWarning:DeprecationWarning| in
  Python 3.6 and a |:library/exceptions.txt/RuntimeError:RuntimeError| in Python 3.8.

* With the introduction of |:library/exceptions.txt/ModuleNotFoundError:ModuleNotFoundError|, import system consumers may
  start expecting import system replacements to raise that more specific exception
  when appropriate, rather than the less-specific |:library/exceptions.txt/ImportError:ImportError|. To provide future
  compatibility with such consumers, implementors of alternative import systems
  that completely replace |:library/functions.txt/import__:__import__()| will need to update their implementations
  to raise the new subclass when a module can’t be found at all. Implementors of
  compliant plugins to the default import system shouldn’t need to make any
  changes, as the default import system will raise the new subclass when
  appropriate.

## changes-in-the-c-api:Changes in the C API

* The |:c-api/memory.txt/c.PyMem_Malloc:PyMem_Malloc()| allocator family now uses the |:c-api/memory.txt/pymalloc:pymalloc allocator| rather
  than the system "malloc()". Applications calling |:c-api/memory.txt/c.PyMem_Malloc:PyMem_Malloc()| without
  holding the GIL can now crash. Set the *|index-38:⚓|* |:using/cmdline.txt/envvar-PYTHONMALLOC:PYTHONMALLOC| environment
  variable to "debug" to validate the usage of memory allocators in your
  application. See |:bugs.python.org/issue26249:bpo-26249|.

* |:c-api/sys.txt/c.Py_Exit:Py_Exit()| (and the main interpreter) now override the exit status with 120 if
  flushing buffered data failed.  See |:bugs.python.org/issue5319:bpo-5319|.

## cpython-bytecode-changes:CPython bytecode changes

There have been several major changes to the |:glossary.txt/term-bytecode:bytecode| in Python 3.6.

* The Python interpreter now uses a 16-bit wordcode instead of bytecode.
  (Contributed by Demur Rumed with input and reviews from Serhiy Storchaka and
  Victor Stinner in |:bugs.python.org/issue26647:bpo-26647| and |:bugs.python.org/issue28050:bpo-28050|.)

* The new |:library/dis.txt/opcode-FORMAT_VALUE:FORMAT_VALUE| and |:library/dis.txt/opcode-BUILD_STRING:BUILD_STRING| opcodes as part of the
  |:whatsnew36-pep498:formatted string literal| implementation. (Contributed by Eric Smith in
  |:bugs.python.org/issue25483:bpo-25483| and Serhiy Storchaka in |:bugs.python.org/issue27078:bpo-27078|.)

* The new |:library/dis.txt/opcode-BUILD_CONST_KEY_MAP:BUILD_CONST_KEY_MAP| opcode to optimize the creation of dictionaries
  with constant keys. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue27140:bpo-27140|.)

* The function call opcodes have been heavily reworked for better performance and
  simpler implementation. The |:library/dis.txt/opcode-MAKE_FUNCTION:MAKE_FUNCTION|, |:library/dis.txt/opcode-CALL_FUNCTION:CALL_FUNCTION|, |:library/dis.txt/opcode-CALL_FUNCTION_KW:CALL_FUNCTION_KW|
  and |:library/dis.txt/opcode-BUILD_MAP_UNPACK_WITH_CALL:BUILD_MAP_UNPACK_WITH_CALL| opcodes have been modified, the new
  |:library/dis.txt/opcode-CALL_FUNCTION_EX:CALL_FUNCTION_EX| and |:library/dis.txt/opcode-BUILD_TUPLE_UNPACK_WITH_CALL:BUILD_TUPLE_UNPACK_WITH_CALL| have been added, and "
  CALL_FUNCTION_VAR", "CALL_FUNCTION_VAR_KW" and "MAKE_CLOSURE" opcodes have been
  removed. (Contributed by Demur Rumed in |:bugs.python.org/issue27095:bpo-27095|, and Serhiy Storchaka in
  |:bugs.python.org/issue27213:bpo-27213|, |:bugs.python.org/issue28257:bpo-28257|.)

* The new |:library/dis.txt/opcode-SETUP_ANNOTATIONS:SETUP_ANNOTATIONS| and "STORE_ANNOTATION" opcodes have been added to
  support the new |:glossary.txt/term-variable-annotation:variable annotation| syntax. (Contributed by Ivan Levkivskyi in
  |:bugs.python.org/issue27985:bpo-27985|.)

# notable-changes-in-python-3-6-2:Notable changes in Python 3.6.2## new-make-
regen-all-build-target:New "make regen-all" build target

To simplify cross-compilation, and to ensure that CPython can reliably be
compiled without requiring an existing version of Python to already be
available, the autotools-based build system no longer attempts to implicitly
recompile generated files based on file modification times.

Instead, a new "make regen-all" command has been added to force regeneration of
these files when desired (e.g. after an initial version of Python has already
been built based on the pregenerated versions).

More selective regeneration targets are also defined - see |:github.com/python/cpython/tree/3.8/Makefile.pre.in:Makefile.pre.in| for
details.

(Contributed by Victor Stinner in |:bugs.python.org/issue23404:bpo-23404|.)

New in version 3.6.2.

## removal-of-make-touch-build-target:Removal of "make touch" build target

The "make touch" build target previously used to request implicit regeneration
of generated files by updating their modification times has been removed.

It has been replaced by the new "make regen-all" target.

(Contributed by Victor Stinner in |:bugs.python.org/issue23404:bpo-23404|.)

Changed in version 3.6.2.

# notable-changes-in-python-3-6-4:Notable changes in Python 3.6.4

The "PyExc_RecursionErrorInst" singleton that was part of the public API has
been removed as its members being never cleared may cause a segfault during
finalization of the interpreter. (Contributed by Xavier de Gaye in |:bugs.python.org/issue22898:bpo-22898|
and |:bugs.python.org/issue30697:bpo-30697|.)

# notable-changes-in-python-3-6-5:Notable changes in Python 3.6.5

The |:library/locale.txt/locale.localeconv:locale.localeconv()| function now sets temporarily the "LC_CTYPE" locale to
the "LC_NUMERIC" locale in some cases. (Contributed by Victor Stinner in
|:bugs.python.org/issue31900:bpo-31900|.)

# notable-changes-in-python-3-6-7:Notable changes in Python 3.6.7

In 3.6.7 the |:library/tokenize.txt/module-tokenize:tokenize| module now implicitly emits a "NEWLINE" token when
provided with input that does not have a trailing new line.  This behavior now
matches what the C tokenizer does internally. (Contributed by Ammar Askar in
|:bugs.python.org/issue33899:bpo-33899|.)

# notable-changes-in-python-3-6-10:Notable changes in Python 3.6.10

Due to significant security concerns, the *reuse_address* parameter of
|:library/asyncio-eventloop.txt/asyncio.loop.create_datagram_endpoint:asyncio.loop.create_datagram_endpoint()| is no longer supported. This is
because of the behavior of the socket option "SO_REUSEADDR" in UDP. For more
details, see the documentation for "loop.create_datagram_endpoint()".
(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in |:bugs.python.org/issue37228:bpo-37228|
.)

# notable-changes-in-python-3-6-13:Notable changes in Python 3.6.13

Earlier Python versions allowed using both ";" and "&" as query parameter
separators in |:library/urllib.parse.txt/urllib.parse.parse_qs:urllib.parse.parse_qs()| and |:library/urllib.parse.txt/urllib.parse.parse_qsl:urllib.parse.parse_qsl()|.  Due to
security concerns, and to conform with newer W3C recommendations, this has been
changed to allow only a single separator key, with "&" as the default.  This
change also affects |:library/cgi.txt/cgi.parse:cgi.parse()| and |:library/cgi.txt/cgi.parse_multipart:cgi.parse_multipart()| as they use the
affected functions internally. For more details, please see their respective
documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in
|:bugs.python.org/issue42967:bpo-42967|.)



