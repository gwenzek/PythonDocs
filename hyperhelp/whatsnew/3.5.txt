%hyperhelp title="What’s New In Python 3.5" date="2021-07-11"
*|what-s-new-in-python-3-5:⚓|*

Editors:
   Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>

This article explains the new features in Python 3.5, compared to 3.4. Python
3.5 was released on September 13, 2015.  See the |:docs.python.org/3.5/whatsnew/changelog.html:changelog|*|changelog:⚓|*  for
a full list of changes.

See also:

  *|index-0:⚓|* |:www.python.org/dev/peps/pep-0478:PEP 478| - Python 3.5 Release Schedule

# summary-release-highlights:Summary – Release highlights

New syntax features:

* |:whatsnew-pep-492:PEP 492|, coroutines with async and await syntax.

* |:whatsnew-pep-465:PEP 465|, a new matrix multiplication operator: "a @ b".

* |:whatsnew-pep-448:PEP 448|, additional unpacking generalizations.

New library modules:

* |:library/typing.txt/module-typing:typing|: |:whatsnew-pep-484:PEP 484 – Type Hints|.

* |:library/zipapp.txt/module-zipapp:zipapp|: |:whatsnew-zipapp:PEP 441 Improving Python ZIP Application Support|.

New built-in features:

* "bytes % args", "bytearray % args": |:whatsnew-pep-461:PEP 461| – Adding "%" formatting to bytes
  and bytearray.

* New |:library/stdtypes.txt/bytes.hex:bytes.hex()|, |:library/stdtypes.txt/bytearray.hex:bytearray.hex()| and |:library/stdtypes.txt/memoryview.hex:memoryview.hex()| methods.
  (Contributed by Arnon Yaari in |:bugs.python.org/issue9951:bpo-9951|.)

* |:library/stdtypes.txt/memoryview:memoryview| now supports tuple indexing (including multi-dimensional).
  (Contributed by Antoine Pitrou in |:bugs.python.org/issue23632:bpo-23632|.)

* Generators have a new "gi_yieldfrom" attribute, which returns the object being
  iterated by "yield from" expressions. (Contributed by Benno Leslie and Yury
  Selivanov in |:bugs.python.org/issue24450:bpo-24450|.)

* A new |:library/exceptions.txt/RecursionError:RecursionError| exception is now raised when maximum recursion depth is
  reached.  (Contributed by Georg Brandl in |:bugs.python.org/issue19235:bpo-19235|.)

CPython implementation improvements:

* When the "LC_TYPE" locale is the POSIX locale ("C" locale), |:library/sys.txt/sys.stdin:sys.stdin| and
  |:library/sys.txt/sys.stdout:sys.stdout| now use the "surrogateescape" error handler, instead of the "strict
  " error handler. (Contributed by Victor Stinner in |:bugs.python.org/issue19977:bpo-19977|.)

* ".pyo" files are no longer used and have been replaced by a more flexible scheme
  that includes the optimization level explicitly in ".pyc" name. (See
  |:whatsnew-pep-488:PEP 488 overview|.)

* Builtin and extension modules are now initialized in a multi-phase process,
  which is similar to how Python modules are loaded. (See |:whatsnew-pep-489:PEP 489 overview|.)

Significant improvements in the standard library:

* |:library/collections.txt/collections.OrderedDict:collections.OrderedDict| is now |:whatsnew-ordereddict:implemented in C|, which makes it 4 to 100
  times faster.

* The |:library/ssl.txt/module-ssl:ssl| module gained |:whatsnew-sslmemorybio:support for Memory BIO|, which decouples SSL protocol
  handling from network IO.

* The new |:library/os.txt/os.scandir:os.scandir()| function provides a |:whatsnew-pep-471:better and significantly faster way|
  of directory traversal.

* |:library/functools.txt/functools.lru_cache:functools.lru_cache()| has been mostly |:whatsnew-lrucache:reimplemented in C|, yielding much
  better performance.

* The new |:library/subprocess.txt/subprocess.run:subprocess.run()| function provides a
  |:whatsnew-subprocess:streamlined way to run subprocesses|.

* The |:library/traceback.txt/module-traceback:traceback| module has been significantly |:whatsnew-traceback:enhanced| for improved
  performance and developer convenience.

Security improvements:

* SSLv3 is now disabled throughout the standard library. It can still be enabled
  by instantiating a |:library/ssl.txt/ssl.SSLContext:ssl.SSLContext| manually.  (See |:bugs.python.org/issue22638:bpo-22638| for more
  details; this change was backported to CPython 3.4 and 2.7.)

* HTTP cookie parsing is now stricter, in order to protect against potential
  injection attacks. (Contributed by Antoine Pitrou in |:bugs.python.org/issue22796:bpo-22796|.)

Windows improvements:

* A new installer for Windows has replaced the old MSI. See
  |:using/windows.txt/using-on-windows:Using Python on Windows| for more information.

* Windows builds now use Microsoft Visual C++ 14.0, and extension modules should
  use the same.

Please read on for a comprehensive list of user-facing changes, including many
other smaller improvements, CPython optimizations, deprecations, and potential
porting issues.

# new-features:New Features## pep-492-coroutines-with-async-and-await-syntax:PEP
492 - Coroutines with async and await syntax

*|index-1:⚓|* |:www.python.org/dev/peps/pep-0492:PEP 492| greatly improves support for asynchronous programming in
Python by adding |:glossary.txt/term-awaitable:awaitable objects|, |:glossary.txt/term-coroutine-function:coroutine functions|,
|:glossary.txt/term-asynchronous-iterable:asynchronous iteration|, and |:glossary.txt/term-asynchronous-context-manager:asynchronous context managers|.

Coroutine functions are declared using the new |:reference/compound_stmts.txt/async-def:async def| syntax:

```rst
>>> async def coro():
...     return 'spam'
```

Inside a coroutine function, the new |:reference/expressions.txt/await:await| expression can be used to suspend
coroutine execution until the result is available.  Any object can be *awaited*,
as long as it implements the |:glossary.txt/term-awaitable:awaitable| protocol by defining the "__await__()"
method.

PEP 492 also adds |:reference/compound_stmts.txt/async-for:async for| statement for convenient iteration over
asynchronous iterables.

An example of a rudimentary HTTP client written using the new syntax:

```rst
import asyncio

async def http_get(domain):
    reader, writer = await asyncio.open_connection(domain, 80)

    writer.write(b'\r\n'.join([
        b'GET / HTTP/1.1',
        b'Host: %b' % domain.encode('latin-1'),
        b'Connection: close',
        b'', b''
    ]))

    async for line in reader:
        print('>>>', line)

    writer.close()

loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(http_get('example.com'))
finally:
    loop.close()
```

Similarly to asynchronous iteration, there is a new syntax for asynchronous
context managers.  The following script:

```rst
import asyncio

async def coro(name, lock):
    print('coro {}: waiting for lock'.format(name))
    async with lock:
        print('coro {}: holding the lock'.format(name))
        await asyncio.sleep(1)
        print('coro {}: releasing the lock'.format(name))

loop = asyncio.get_event_loop()
lock = asyncio.Lock()
coros = asyncio.gather(coro(1, lock), coro(2, lock))
try:
    loop.run_until_complete(coros)
finally:
    loop.close()
```

will output:

```rst
coro 2: waiting for lock
coro 2: holding the lock
coro 1: waiting for lock
coro 2: releasing the lock
coro 1: holding the lock
coro 1: releasing the lock
```

Note that both |:reference/compound_stmts.txt/async-for:async for| and |:reference/compound_stmts.txt/async-with:async with| can only be used inside a coroutine
function declared with |:reference/compound_stmts.txt/async-def:async def|.

Coroutine functions are intended to be run inside a compatible event loop, such
as the |:library/asyncio-eventloop.txt/asyncio-event-loop:asyncio loop|.

Note:

  Changed in version 3.5.2: Starting with CPython 3.5.2, "__aiter__" can directly
  return |:glossary.txt/term-asynchronous-iterator:asynchronous iterators|.  Returning an |:glossary.txt/term-awaitable:awaitable| object will result in
  a |:library/exceptions.txt/PendingDeprecationWarning:PendingDeprecationWarning|.See more details in the |:reference/datamodel.txt/async-iterators:Asynchronous Iterators|
  documentation section.

See also:

  *|index-2:⚓|*
  |:www.python.org/dev/peps/pep-0492:PEP 492| – Coroutines with async and await syntax
     PEP written and implemented by Yury Selivanov.

*|whatsnew-pep-465:⚓|* ## pep-465-a-dedicated-infix-operator-for-matrix-
multiplication:PEP 465 - A dedicated infix operator for matrix multiplication

*|index-3:⚓|* |:www.python.org/dev/peps/pep-0465:PEP 465| adds the "@" infix operator for matrix multiplication.
Currently, no builtin Python types implement the new operator, however, it can
be implemented by defining "__matmul__()", "__rmatmul__()", and "__imatmul__()"
for regular, reflected, and in-place matrix multiplication.  The semantics of
these methods is similar to that of methods defining other infix arithmetic
operators.

Matrix multiplication is a notably common operation in many fields of
mathematics, science, engineering, and the addition of "@" allows writing
cleaner code:

```rst
S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)
```

instead of:

```rst
S = dot((dot(H, beta) - r).T,
        dot(inv(dot(dot(H, V), H.T)), dot(H, beta) - r))
```

NumPy 1.10 has support for the new operator:

```rst
>>> import numpy

>>> x = numpy.ones(3)
>>> x
array([ 1., 1., 1.])

>>> m = numpy.eye(3)
>>> m
array([[ 1., 0., 0.],
       [ 0., 1., 0.],
       [ 0., 0., 1.]])

>>> x @ m
array([ 1., 1., 1.])
```

See also:

  *|index-4:⚓|*
  |:www.python.org/dev/peps/pep-0465:PEP 465| – A dedicated infix operator for matrix multiplication
     PEP written by Nathaniel J. Smith; implemented by Benjamin Peterson.

*|whatsnew-pep-448:⚓|* ## pep-448-additional-unpacking-generalizations:PEP 448 -
Additional Unpacking Generalizations

*|index-5:⚓|* |:www.python.org/dev/peps/pep-0448:PEP 448| extends the allowed uses of the "*" iterable unpacking
operator and "**" dictionary unpacking operator.  It is now possible to use an
arbitrary number of unpackings in |:reference/expressions.txt/calls:function calls|:

```rst
>>> print(*[1], *[2], 3, *[4, 5])
1 2 3 4 5

>>> def fn(a, b, c, d):
...     print(a, b, c, d)
...

>>> fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})
1 2 3 4
```

Similarly, tuple, list, set, and dictionary displays allow multiple unpackings
(see |:reference/expressions.txt/exprlists:Expression lists| and |:reference/expressions.txt/dict:Dictionary displays|):

```rst
>>> *range(4), 4
(0, 1, 2, 3, 4)

>>> [*range(4), 4]
[0, 1, 2, 3, 4]

>>> {*range(4), 4, *(5, 6, 7)}
{0, 1, 2, 3, 4, 5, 6, 7}

>>> {'x': 1, **{'y': 2}}
{'x': 1, 'y': 2}
```

See also:

  *|index-6:⚓|*
  |:www.python.org/dev/peps/pep-0448:PEP 448| – Additional Unpacking Generalizations
     PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas Wouters, and
     Joshua Landau.

*|whatsnew-pep-461:⚓|* ## pep-461-percent-formatting-support-for-bytes-and-
bytearray:PEP 461 - percent formatting support for bytes and bytearray

*|index-7:⚓|* |:www.python.org/dev/peps/pep-0461:PEP 461| adds support for the "%" |:library/stdtypes.txt/bytes-formatting:interpolation operator| to
|:library/stdtypes.txt/bytes:bytes| and |:library/stdtypes.txt/bytearray:bytearray|.

While interpolation is usually thought of as a string operation, there are cases
where interpolation on "bytes" or "bytearrays" makes sense, and the work needed
to make up for this missing functionality detracts from the overall readability
of the code.  This issue is particularly important when dealing with wire format
protocols, which are often a mixture of binary and ASCII compatible text.

Examples:

```rst
>>> b'Hello %b!' % b'World'
b'Hello World!'

>>> b'x=%i y=%f' % (1, 2.5)
b'x=1 y=2.500000'
```

Unicode is not allowed for "%b", but it is accepted by "%a" (equivalent of "
repr(obj).encode('ascii', 'backslashreplace')"):

```rst
>>> b'Hello %b!' % 'World'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: %b requires bytes, or an object that implements __bytes__, not 'str'

>>> b'price: %a' % '10€'
b"price: '10\\u20ac'"
```

Note that "%s" and "%r" conversion types, although supported, should only be
used in codebases that need compatibility with Python 2.

See also:

  *|index-8:⚓|*
  |:www.python.org/dev/peps/pep-0461:PEP 461| – Adding % formatting to bytes and bytearray
     PEP written by Ethan Furman; implemented by Neil Schemenauer and Ethan Furman.

*|whatsnew-pep-484:⚓|* ## pep-484-type-hints:PEP 484 - Type Hints

Function annotation syntax has been a Python feature since version 3.0 (
*|index-9:⚓|* |:www.python.org/dev/peps/pep-3107:PEP 3107|), however the semantics of annotations has been left
undefined.

Experience has shown that the majority of function annotation uses were to
provide type hints to function parameters and return values.  It became evident
that it would be beneficial for Python users, if the standard library included
the base definitions and tools for type annotations.

*|index-10:⚓|* |:www.python.org/dev/peps/pep-0484:PEP 484| introduces a |:glossary.txt/term-provisional-API:provisional module| to provide these
standard definitions and tools, along with some conventions for situations where
annotations are not available.

For example, here is a simple function whose argument and return type are
declared in the annotations:

```rst
def greeting(name: str) -> str:
    return 'Hello ' + name
```

While these annotations are available at runtime through the usual "
__annotations__" attribute, *no automatic type checking happens at runtime*.
Instead, it is assumed that a separate off-line type checker (e.g. |:mypy-lang.org:mypy|
*|mypy:⚓|* ) will be used for on-demand source code analysis.

The type system supports unions, generic types, and a special type named |:library/typing.txt/typing.Any:Any|
which is consistent with (i.e. assignable to and from) all types.

See also:

  * |:library/typing.txt/module-typing:typing| module documentation

  * *|index-11:⚓|*
    |:www.python.org/dev/peps/pep-0484:PEP 484| – Type Hints
       PEP written by Guido van Rossum, Jukka Lehtosalo, and Łukasz Langa; implemented
       by Guido van Rossum.

  * *|index-12:⚓|*
    |:www.python.org/dev/peps/pep-0483:PEP 483| – The Theory of Type Hints
       PEP written by Guido van Rossum

*|whatsnew-pep-471:⚓|* ## pep-471-os-scandir-function-a-better-and-faster-
directory-iterator:PEP 471 - os.scandir() function – a better and faster
directory iterator

*|index-13:⚓|* |:www.python.org/dev/peps/pep-0471:PEP 471| adds a new directory iteration function, |:library/os.txt/os.scandir:os.scandir()|
, to the standard library.  Additionally, |:library/os.txt/os.walk:os.walk()| is now implemented using "
scandir", which makes it 3 to 5 times faster on POSIX systems and 7 to 20 times
faster on Windows systems.  This is largely achieved by greatly reducing the
number of calls to |:library/os.txt/os.stat:os.stat()| required to walk a directory tree.

Additionally, "scandir" returns an iterator, as opposed to returning a list of
file names, which improves memory efficiency when iterating over very large
directories.

The following example shows a simple use of |:library/os.txt/os.scandir:os.scandir()| to display all the
files (excluding directories) in the given *path* that don’t start with "'.'".
The |:library/os.txt/os.DirEntry.is_file:entry.is_file()| call will generally not make an additional system call:

```rst
for entry in os.scandir(path):
    if not entry.name.startswith('.') and entry.is_file():
        print(entry.name)
```

See also:

  *|index-14:⚓|*
  |:www.python.org/dev/peps/pep-0471:PEP 471| – os.scandir() function – a better and faster directory iterator
     PEP written and implemented by Ben Hoyt with the help of Victor Stinner.

*|whatsnew-pep-475:⚓|* ## pep-475-retry-system-calls-failing-with-eintr:PEP 475:
Retry system calls failing with EINTR

An |:library/errno.txt/errno.EINTR:errno.EINTR| error code is returned whenever a system call, that is waiting
for I/O, is interrupted by a signal.  Previously, Python would raise
|:library/exceptions.txt/InterruptedError:InterruptedError| in such cases.  This meant that, when writing a Python
application, the developer had two choices:

1. Ignore the "InterruptedError".

2. Handle the "InterruptedError" and attempt to restart the interrupted system call
   at every call site.

The first option makes an application fail intermittently. The second option
adds a large amount of boilerplate that makes the code nearly unreadable.
Compare:

```rst
print("Hello World")
```

and:

```rst
while True:
    try:
        print("Hello World")
        break
    except InterruptedError:
        continue
```

*|index-15:⚓|* |:www.python.org/dev/peps/pep-0475:PEP 475| implements automatic retry of system calls on "EINTR".
This removes the burden of dealing with "EINTR" or |:library/exceptions.txt/InterruptedError:InterruptedError| in user
code in most situations and makes Python programs, including the standard
library, more robust.  Note that the system call is only retried if the signal
handler does not raise an exception.

Below is a list of functions which are now retried when interrupted by a signal:

* |:library/functions.txt/open:open()| and |:library/io.txt/io.open:io.open()|;

* functions of the |:library/faulthandler.txt/module-faulthandler:faulthandler| module;

* |:library/os.txt/module-os:os| functions: |:library/os.txt/os.fchdir:fchdir()|, |:library/os.txt/os.fchmod:fchmod()|, |:library/os.txt/os.fchown:fchown()|, |:library/os.txt/os.fdatasync:fdatasync()|, |:library/os.txt/os.fstat:fstat()|,
  |:library/os.txt/os.fstatvfs:fstatvfs()|, |:library/os.txt/os.fsync:fsync()|, |:library/os.txt/os.ftruncate:ftruncate()|, |:library/os.txt/os.mkfifo:mkfifo()|, |:library/os.txt/os.mknod:mknod()|, |:library/os.txt/os.open:open()|,
  |:library/os.txt/os.posix_fadvise:posix_fadvise()|, |:library/os.txt/os.posix_fallocate:posix_fallocate()|, |:library/os.txt/os.pread:pread()|, |:library/os.txt/os.pwrite:pwrite()|, |:library/os.txt/os.read:read()|,
  |:library/os.txt/os.readv:readv()|, |:library/os.txt/os.sendfile:sendfile()|, |:library/os.txt/os.wait3:wait3()|, |:library/os.txt/os.wait4:wait4()|, |:library/os.txt/os.wait:wait()|, |:library/os.txt/os.waitid:waitid()|, |:library/os.txt/os.waitpid:waitpid()|
  , |:library/os.txt/os.write:write()|, |:library/os.txt/os.writev:writev()|;

* special cases: |:library/os.txt/os.close:os.close()| and |:library/os.txt/os.dup2:os.dup2()| now ignore |:library/errno.txt/errno.EINTR:EINTR| errors; the
  syscall is not retried (see the PEP for the rationale);

* |:library/select.txt/module-select:select| functions: |:library/select.txt/select.devpoll.poll:devpoll.poll()|, |:library/select.txt/select.epoll.poll:epoll.poll()|, |:library/select.txt/select.kqueue.control:kqueue.control()|,
  |:library/select.txt/select.poll.poll:poll.poll()|, |:library/select.txt/select.select:select()|;

* methods of the |:library/socket.txt/socket.socket:socket| class: |:library/socket.txt/socket.socket.accept:accept()|, |:library/socket.txt/socket.socket.connect:connect()| (except for non-blocking
  sockets), |:library/socket.txt/socket.socket.recv:recv()|, |:library/socket.txt/socket.socket.recvfrom:recvfrom()|, |:library/socket.txt/socket.socket.recvmsg:recvmsg()|, |:library/socket.txt/socket.socket.send:send()|, |:library/socket.txt/socket.socket.sendall:sendall()|,
  |:library/socket.txt/socket.socket.sendmsg:sendmsg()|, |:library/socket.txt/socket.socket.sendto:sendto()|;

* |:library/signal.txt/signal.sigtimedwait:signal.sigtimedwait()| and |:library/signal.txt/signal.sigwaitinfo:signal.sigwaitinfo()|;

* |:library/time.txt/time.sleep:time.sleep()|.

See also:

  *|index-16:⚓|*
  |:www.python.org/dev/peps/pep-0475:PEP 475| – Retry system calls failing with EINTR
     PEP and implementation written by Charles-François Natali and Victor Stinner,
     with the help of Antoine Pitrou (the French connection).

*|whatsnew-pep-479:⚓|* ## pep-479-change-stopiteration-handling-inside-
generators:PEP 479: Change StopIteration handling inside generators

The interaction of generators and |:library/exceptions.txt/StopIteration:StopIteration| in Python 3.4 and earlier was
sometimes surprising, and could conceal obscure bugs.  Previously, "
StopIteration" raised accidentally inside a generator function was interpreted
as the end of the iteration by the loop construct driving the generator.

*|index-17:⚓|* |:www.python.org/dev/peps/pep-0479:PEP 479| changes the behavior of generators: when a "
StopIteration" exception is raised inside a generator, it is replaced with a
|:library/exceptions.txt/RuntimeError:RuntimeError| before it exits the generator frame.  The main goal of this
change is to ease debugging in the situation where an unguarded |:library/functions.txt/next:next()| call
raises "StopIteration" and causes the iteration controlled by the generator to
terminate silently. This is particularly pernicious in combination with the "
yield from" construct.

This is a backwards incompatible change, so to enable the new behavior, a
|:glossary.txt/term-__future__:__future__| import is necessary:

```rst
>>> from __future__ import generator_stop

>>> def gen():
...     next(iter([]))
...     yield
...
>>> next(gen())
Traceback (most recent call last):
  File "<stdin>", line 2, in gen
StopIteration

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
RuntimeError: generator raised StopIteration
```

Without a "__future__" import, a |:library/exceptions.txt/PendingDeprecationWarning:PendingDeprecationWarning| will be raised
whenever a |:library/exceptions.txt/StopIteration:StopIteration| exception is raised inside a generator.

See also:

  *|index-18:⚓|*
  |:www.python.org/dev/peps/pep-0479:PEP 479| – Change StopIteration handling inside generators
     PEP written by Chris Angelico and Guido van Rossum. Implemented by Chris
     Angelico, Yury Selivanov and Nick Coghlan.

*|whatsnew-pep-485:⚓|* ## pep-485-a-function-for-testing-approximate-equality:
PEP 485: A function for testing approximate equality

*|index-19:⚓|* |:www.python.org/dev/peps/pep-0485:PEP 485| adds the |:library/math.txt/math.isclose:math.isclose()| and |:library/cmath.txt/cmath.isclose:cmath.isclose()|
functions which tell whether two values are approximately equal or “close” to
each other.  Whether or not two values are considered close is determined
according to given absolute and relative tolerances. Relative tolerance is the
maximum allowed difference between "isclose" arguments, relative to the larger
absolute value:

```rst
>>> import math
>>> a = 5.0
>>> b = 4.99998
>>> math.isclose(a, b, rel_tol=1e-5)
True
>>> math.isclose(a, b, rel_tol=1e-6)
False
```

It is also possible to compare two values using absolute tolerance, which must
be a non-negative value:

```rst
>>> import math
>>> a = 5.0
>>> b = 4.99998
>>> math.isclose(a, b, abs_tol=0.00003)
True
>>> math.isclose(a, b, abs_tol=0.00001)
False
```

See also:

  *|index-20:⚓|*
  |:www.python.org/dev/peps/pep-0485:PEP 485| – A function for testing approximate equality
     PEP written by Christopher Barker; implemented by Chris Barker and Tal Einat.

*|whatsnew-pep-486:⚓|* ## pep-486-make-the-python-launcher-aware-of-virtual-
environments:PEP 486: Make the Python Launcher aware of virtual environments

*|index-21:⚓|* |:www.python.org/dev/peps/pep-0486:PEP 486| makes the Windows launcher (see *|index-22:⚓|*
|:www.python.org/dev/peps/pep-0397:PEP 397|) aware of an active virtual environment. When the default interpreter
would be used and the "VIRTUAL_ENV" environment variable is set, the interpreter
in the virtual environment will be used.

See also:

  *|index-23:⚓|*
  |:www.python.org/dev/peps/pep-0486:PEP 486| – Make the Python Launcher aware of virtual environments
     PEP written and implemented by Paul Moore.

*|whatsnew-pep-488:⚓|* ## pep-488-elimination-of-pyo-files:PEP 488: Elimination
of PYO files

*|index-24:⚓|* |:www.python.org/dev/peps/pep-0488:PEP 488| does away with the concept of ".pyo" files. This means
that ".pyc" files represent both unoptimized and optimized bytecode. To prevent
the need to constantly regenerate bytecode files, ".pyc" files now have an
optional "opt-" tag in their name when the bytecode is optimized. This has the
side-effect of no more bytecode file name clashes when running under either |:using/cmdline.txt/cmdoption-O:-O|
or |:using/cmdline.txt/cmdoption-OO:-OO|. Consequently, bytecode files generated from |:using/cmdline.txt/cmdoption-O:-O|, and |:using/cmdline.txt/cmdoption-OO:-OO| may now
exist simultaneously. |:library/importlib.txt/importlib.util.cache_from_source:importlib.util.cache_from_source()| has an updated API to
help with this change.

See also:

  *|index-25:⚓|*
  |:www.python.org/dev/peps/pep-0488:PEP 488| – Elimination of PYO files
     PEP written and implemented by Brett Cannon.

*|whatsnew-pep-489:⚓|* ## pep-489-multi-phase-extension-module-initialization:
PEP 489: Multi-phase extension module initialization

*|index-26:⚓|* |:www.python.org/dev/peps/pep-0489:PEP 489| updates extension module initialization to take
advantage of the two step module loading mechanism introduced by *|index-27:⚓|*
|:www.python.org/dev/peps/pep-0451:PEP 451| in Python 3.4.

This change brings the import semantics of extension modules that opt-in to
using the new mechanism much closer to those of Python source and bytecode
modules, including the ability to use any valid identifier as a module name,
rather than being restricted to ASCII.

See also:

  *|index-28:⚓|*
  |:www.python.org/dev/peps/pep-0489:PEP 489| – Multi-phase extension module initialization
     PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan; implemented by
     Petr Viktorin.

# other-language-changes:Other Language Changes

Some smaller changes made to the core Python language are:

* Added the ""namereplace"" error handlers.  The ""backslashreplace"" error
  handlers now work with decoding and translating. (Contributed by Serhiy
  Storchaka in |:bugs.python.org/issue19676:bpo-19676| and |:bugs.python.org/issue22286:bpo-22286|.)

* The |:using/cmdline.txt/cmdoption-b:-b| option now affects comparisons of |:library/stdtypes.txt/bytes:bytes| with |:library/functions.txt/int:int|.  (Contributed by
  Serhiy Storchaka in |:bugs.python.org/issue23681:bpo-23681|.)

* New Kazakh "kz1048" and Tajik "koi8_t" |:library/codecs.txt/standard-encodings:codecs|. (Contributed by Serhiy
  Storchaka in |:bugs.python.org/issue22682:bpo-22682| and |:bugs.python.org/issue22681:bpo-22681|.)

* Property docstrings are now writable. This is especially useful for
  |:library/collections.txt/collections.namedtuple:collections.namedtuple()| docstrings. (Contributed by Berker Peksag in
  |:bugs.python.org/issue24064:bpo-24064|.)

* Circular imports involving relative imports are now supported. (Contributed by
  Brett Cannon and Antoine Pitrou in |:bugs.python.org/issue17636:bpo-17636|.)

# new-modules:New Modules## typing:typing

The new |:library/typing.txt/module-typing:typing| |:glossary.txt/term-provisional-API:provisional| module provides standard definitions and tools
for function type annotations. See |:whatsnew-pep-484:Type Hints| for more information.

*|whatsnew-zipapp:⚓|* ## zipapp:zipapp

The new |:library/zipapp.txt/module-zipapp:zipapp| module (specified in *|index-29:⚓|* |:www.python.org/dev/peps/pep-0441:PEP 441|) provides an API
and command line tool for creating executable Python Zip Applications, which
were introduced in Python 2.6 in |:bugs.python.org/issue1739468:bpo-1739468|, but which were not well
publicized, either at the time or since.

With the new module, bundling your application is as simple as putting all the
files, including a "__main__.py" file, into a directory "myapp" and running:

```rst
$ python -m zipapp myapp
$ python myapp.pyz
```

The module implementation has been contributed by Paul Moore in |:bugs.python.org/issue23491:bpo-23491|.

See also:

  *|index-30:⚓|* |:www.python.org/dev/peps/pep-0441:PEP 441| – Improving Python ZIP Application Support

# improved-modules:Improved Modules## argparse:argparse

The |:library/argparse.txt/argparse.ArgumentParser:ArgumentParser| class now allows disabling |:library/argparse.txt/prefix-matching:abbreviated usage| of long
options by setting |:library/argparse.txt/allow-abbrev:allow_abbrev| to "False".  (Contributed by Jonathan Paugh,
Steven Bethard, paul j3 and Daniel Eriksson in |:bugs.python.org/issue14910:bpo-14910|.)

## asyncio:asyncio

Since the |:library/asyncio.txt/module-asyncio:asyncio| module is |:glossary.txt/term-provisional-API:provisional|, all changes introduced in Python
3.5 have also been backported to Python 3.4.x.

Notable changes in the |:library/asyncio.txt/module-asyncio:asyncio| module since Python 3.4.0:

* New debugging APIs: |:library/asyncio-eventloop.txt/asyncio.loop.set_debug:loop.set_debug()| and |:library/asyncio-eventloop.txt/asyncio.loop.get_debug:loop.get_debug()| methods.
  (Contributed by Victor Stinner.)

* The proactor event loop now supports SSL. (Contributed by Antoine Pitrou and
  Victor Stinner in |:bugs.python.org/issue22560:bpo-22560|.)

* A new |:library/asyncio-eventloop.txt/asyncio.loop.is_closed:loop.is_closed()| method to check if the event loop is closed.
  (Contributed by Victor Stinner in |:bugs.python.org/issue21326:bpo-21326|.)

* A new |:library/asyncio-eventloop.txt/asyncio.loop.create_task:loop.create_task()| to conveniently create and schedule a new |:library/asyncio-task.txt/asyncio.Task:Task| for
  a coroutine.  The "create_task" method is also used by all asyncio functions
  that wrap coroutines into tasks, such as |:library/asyncio-task.txt/asyncio.wait:asyncio.wait()|, |:library/asyncio-task.txt/asyncio.gather:asyncio.gather()|,
  etc. (Contributed by Victor Stinner.)

* A new |:library/asyncio-protocol.txt/asyncio.WriteTransport.get_write_buffer_limits:transport.get_write_buffer_limits()| method to inquire for *high-* and *
  low-* water limits of the flow control. (Contributed by Victor Stinner.)

* The "async()" function is deprecated in favor of |:library/asyncio-future.txt/asyncio.ensure_future:ensure_future()|. (Contributed
  by Yury Selivanov.)

* New |:library/asyncio-eventloop.txt/asyncio.loop.set_task_factory:loop.set_task_factory()| and |:library/asyncio-eventloop.txt/asyncio.loop.get_task_factory:loop.get_task_factory()| methods to customize
  the task factory that |:library/asyncio-eventloop.txt/asyncio.loop.create_task:loop.create_task()| method uses.  (Contributed by Yury
  Selivanov.)

* New |:library/asyncio-queue.txt/asyncio.Queue.join:Queue.join()| and |:library/asyncio-queue.txt/asyncio.Queue.task_done:Queue.task_done()| queue methods. (Contributed by Victor
  Stinner.)

* The "JoinableQueue" class was removed, in favor of the |:library/asyncio-queue.txt/asyncio.Queue:asyncio.Queue| class.
  (Contributed by Victor Stinner.)

Updates in 3.5.1:

* The |:library/asyncio-future.txt/asyncio.ensure_future:ensure_future()| function and all functions that use it, such as
  |:library/asyncio-eventloop.txt/asyncio.loop.run_until_complete:loop.run_until_complete()|, now accept all kinds of |:glossary.txt/term-awaitable:awaitable objects|.
  (Contributed by Yury Selivanov.)

* New |:library/asyncio-task.txt/asyncio.run_coroutine_threadsafe:run_coroutine_threadsafe()| function to submit coroutines to event loops
  from other threads. (Contributed by Vincent Michel.)

* New |:library/asyncio-protocol.txt/asyncio.BaseTransport.is_closing:Transport.is_closing()| method to check if the transport is closing or
  closed. (Contributed by Yury Selivanov.)

* The |:library/asyncio-eventloop.txt/asyncio.loop.create_server:loop.create_server()| method can now accept a list of hosts. (Contributed
  by Yann Sionneau.)

Updates in 3.5.2:

* New |:library/asyncio-eventloop.txt/asyncio.loop.create_future:loop.create_future()| method to create Future objects.  This allows
  alternative event loop implementations, such as |:github.com/MagicStack/uvloop:uvloop|*|uvloop:⚓|* , to
  provide a faster |:library/asyncio-future.txt/asyncio.Future:asyncio.Future| implementation. (Contributed by Yury
  Selivanov.)

* New |:library/asyncio-eventloop.txt/asyncio.loop.get_exception_handler:loop.get_exception_handler()| method to get the current exception handler.
  (Contributed by Yury Selivanov.)

* New |:library/asyncio-stream.txt/asyncio.StreamReader.readuntil:StreamReader.readuntil()| method to read data from the stream until a
  separator bytes sequence appears. (Contributed by Mark Korenberg.)

* The |:library/asyncio-eventloop.txt/asyncio.loop.create_connection:loop.create_connection()| and |:library/asyncio-eventloop.txt/asyncio.loop.create_server:loop.create_server()| methods are optimized
  to avoid calling the system "getaddrinfo" function if the address is already
  resolved. (Contributed by A. Jesse Jiryu Davis.)

* The |:library/asyncio-eventloop.txt/asyncio.loop.sock_connect:loop.sock_connect(sock, address)| no longer requires the *address* to be
  resolved prior to the call. (Contributed by A. Jesse Jiryu Davis.)

## bz2:bz2

The |:library/bz2.txt/bz2.BZ2Decompressor.decompress:BZ2Decompressor.decompress| method now accepts an optional *max_length*
argument to limit the maximum size of decompressed data. (Contributed by
Nikolaus Rath in |:bugs.python.org/issue15955:bpo-15955|.)

## cgi:cgi

The "FieldStorage" class now supports the |:glossary.txt/term-context-manager:context manager| protocol.
(Contributed by Berker Peksag in |:bugs.python.org/issue20289:bpo-20289|.)

## cmath:cmath

A new function |:library/cmath.txt/cmath.isclose:isclose()| provides a way to test for approximate equality.
(Contributed by Chris Barker and Tal Einat in |:bugs.python.org/issue24270:bpo-24270|.)

## code:code

The |:library/code.txt/code.InteractiveInterpreter.showtraceback:InteractiveInterpreter.showtraceback()| method now prints the full chained
traceback, just like the interactive interpreter.  (Contributed by Claudiu Popa
in |:bugs.python.org/issue17442:bpo-17442|.)

## collections:collections*|whatsnew-ordereddict:⚓|*

The |:library/collections.txt/collections.OrderedDict:OrderedDict| class is now implemented in C, which makes it 4 to 100 times
faster.  (Contributed by Eric Snow in |:bugs.python.org/issue16991:bpo-16991|.)

"OrderedDict.items()", "OrderedDict.keys()", "OrderedDict.values()" views now
support |:library/functions.txt/reversed:reversed()| iteration. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue19505:bpo-19505|
.)

The |:library/collections.txt/collections.deque:deque| class now defines |:library/collections.txt/collections.deque.index:index()|, |:library/collections.txt/collections.deque.insert:insert()|, and |:library/collections.txt/collections.deque.copy:copy()|, and supports
the "+" and "*" operators. This allows deques to be recognized as a
|:library/collections.abc.txt/collections.abc.MutableSequence:MutableSequence| and improves their substitutability for lists. (Contributed by
Raymond Hettinger in |:bugs.python.org/issue23704:bpo-23704|.)

Docstrings produced by |:library/collections.txt/collections.namedtuple:namedtuple()| can now be updated:

```rst
Point = namedtuple('Point', ['x', 'y'])
Point.__doc__ += ': Cartesian coodinate'
Point.x.__doc__ = 'abscissa'
Point.y.__doc__ = 'ordinate'
```

(Contributed by Berker Peksag in |:bugs.python.org/issue24064:bpo-24064|.)

The |:library/collections.txt/collections.UserString:UserString| class now implements the "__getnewargs__()", "__rmod__()",
|:library/stdtypes.txt/str.casefold:casefold()|, |:library/stdtypes.txt/str.format_map:format_map()|, |:library/stdtypes.txt/str.isprintable:isprintable()|, and |:library/stdtypes.txt/str.maketrans:maketrans()| methods to
match the corresponding methods of |:library/stdtypes.txt/str:str|. (Contributed by Joe Jevnik in
|:bugs.python.org/issue22189:bpo-22189|.)

## collections-abc:collections.abc

The "Sequence.index()" method now accepts *start* and *stop* arguments to match
the corresponding methods of |:library/stdtypes.txt/tuple:tuple|, |:library/stdtypes.txt/list:list|, etc. (Contributed by Devin
Jeanpierre in |:bugs.python.org/issue23086:bpo-23086|.)

A new |:library/collections.abc.txt/collections.abc.Generator:Generator| abstract base class. (Contributed by Stefan Behnel in
|:bugs.python.org/issue24018:bpo-24018|.)

New |:library/collections.abc.txt/collections.abc.Awaitable:Awaitable|, |:library/collections.abc.txt/collections.abc.Coroutine:Coroutine|, |:library/collections.abc.txt/collections.abc.AsyncIterator:AsyncIterator|, and |:library/collections.abc.txt/collections.abc.AsyncIterable:AsyncIterable| abstract base
classes. (Contributed by Yury Selivanov in |:bugs.python.org/issue24184:bpo-24184|.)

For earlier Python versions, a backport of the new ABCs is available in an
external |:pypi.org/project/backports_abc:PyPI package|*|pypi-package:⚓|* .

## compileall:compileall

A new |:library/compileall.txt/module-compileall:compileall| option, "-j *N*", allows running *N* workers simultaneously
to perform parallel bytecode compilation. The |:library/compileall.txt/compileall.compile_dir:compile_dir()| function has a
corresponding "workers" parameter.  (Contributed by Claudiu Popa in |:bugs.python.org/issue16104:bpo-16104|
.)

Another new option, "-r", allows controlling the maximum recursion level for
subdirectories.  (Contributed by Claudiu Popa in |:bugs.python.org/issue19628:bpo-19628|.)

The "-q" command line option can now be specified more than once, in which case
all output, including errors, will be suppressed.  The corresponding "quiet"
parameter in |:library/compileall.txt/compileall.compile_dir:compile_dir()|, |:library/compileall.txt/compileall.compile_file:compile_file()|, and |:library/compileall.txt/compileall.compile_path:compile_path()| can now
accept an integer value indicating the level of output suppression. (Contributed
by Thomas Kluyver in |:bugs.python.org/issue21338:bpo-21338|.)

## concurrent-futures:concurrent.futures

The |:library/concurrent.futures.txt/concurrent.futures.Executor.map:Executor.map()| method now accepts a *chunksize* argument to allow batching
of tasks to improve performance when |:library/concurrent.futures.txt/concurrent.futures.ProcessPoolExecutor:ProcessPoolExecutor()| is used.
(Contributed by Dan O’Reilly in |:bugs.python.org/issue11271:bpo-11271|.)

The number of workers in the |:library/concurrent.futures.txt/concurrent.futures.ThreadPoolExecutor:ThreadPoolExecutor| constructor is optional now.
The default value is 5 times the number of CPUs. (Contributed by Claudiu Popa in
|:bugs.python.org/issue21527:bpo-21527|.)

## configparser:configparser

|:library/configparser.txt/module-configparser:configparser| now provides a way to customize the conversion of values by
specifying a dictionary of converters in the |:library/configparser.txt/configparser.ConfigParser:ConfigParser| constructor, or by
defining them as methods in "ConfigParser" subclasses.  Converters defined in a
parser instance are inherited by its section proxies.

Example:

```rst
>>> import configparser
>>> conv = {}
>>> conv['list'] = lambda v: [e.strip() for e in v.split() if e.strip()]
>>> cfg = configparser.ConfigParser(converters=conv)
>>> cfg.read_string("""
... [s]
... list = a b c d e f g
... """)
>>> cfg.get('s', 'list')
'a b c d e f g'
>>> cfg.getlist('s', 'list')
['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> section = cfg['s']
>>> section.getlist('list')
['a', 'b', 'c', 'd', 'e', 'f', 'g']
```

(Contributed by Łukasz Langa in |:bugs.python.org/issue18159:bpo-18159|.)

## contextlib:contextlib

The new |:library/contextlib.txt/contextlib.redirect_stderr:redirect_stderr()| |:glossary.txt/term-context-manager:context manager| (similar to |:library/contextlib.txt/contextlib.redirect_stdout:redirect_stdout()|)
makes it easier for utility scripts to handle inflexible APIs that write their
output to |:library/sys.txt/sys.stderr:sys.stderr| and don’t provide any options to redirect it:

```rst
>>> import contextlib, io, logging
>>> f = io.StringIO()
>>> with contextlib.redirect_stderr(f):
...     logging.warning('warning')
...
>>> f.getvalue()
'WARNING:root:warning\n'
```

(Contributed by Berker Peksag in |:bugs.python.org/issue22389:bpo-22389|.)

## csv:csv

The |:library/csv.txt/csv.csvwriter.writerow:writerow()| method now supports arbitrary iterables, not just sequences.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue23171:bpo-23171|.)

## curses:curses

The new |:library/curses.txt/curses.update_lines_cols:update_lines_cols()| function updates the *|index-31:⚓|* "LINES" and
*|index-32:⚓|* "COLS" environment variables.  This is useful for detecting
manual screen resizing.  (Contributed by Arnon Yaari in |:bugs.python.org/issue4254:bpo-4254|.)

## dbm:dbm

|:library/dbm.txt/dbm.dumb.open:dumb.open| always creates a new database when the flag has the value ""n"".
(Contributed by Claudiu Popa in |:bugs.python.org/issue18039:bpo-18039|.)

## difflib:difflib

The charset of HTML documents generated by |:library/difflib.txt/difflib.HtmlDiff.make_file:HtmlDiff.make_file()| can now be
customized by using a new *charset* keyword-only argument. The default charset
of HTML document changed from ""ISO-8859-1"" to ""utf-8"". (Contributed by
Berker Peksag in |:bugs.python.org/issue2052:bpo-2052|.)

The |:library/difflib.txt/difflib.diff_bytes:diff_bytes()| function can now compare lists of byte strings.  This fixes a
regression from Python 2. (Contributed by Terry J. Reedy and Greg Ward in
|:bugs.python.org/issue17445:bpo-17445|.)

## distutils:distutils

Both the "build" and "build_ext" commands now accept a "-j" option to enable
parallel building of extension modules. (Contributed by Antoine Pitrou in
|:bugs.python.org/issue5309:bpo-5309|.)

The |:library/distutils.txt/module-distutils:distutils| module now supports "xz" compression, and can be enabled by
passing "xztar" as an argument to "bdist --format". (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue16314:bpo-16314|.)

## doctest:doctest

The |:library/doctest.txt/doctest.DocTestSuite:DocTestSuite()| function returns an empty |:library/unittest.txt/unittest.TestSuite:unittest.TestSuite| if *module*
contains no docstrings, instead of raising |:library/exceptions.txt/ValueError:ValueError|.  (Contributed by Glenn
Jones in |:bugs.python.org/issue15916:bpo-15916|.)

## email:email

A new policy option |:library/email.policy.txt/email.policy.Policy.mangle_from_:Policy.mangle_from_| controls whether or not lines that
start with ""From "" in email bodies are prefixed with a "">"" character by
generators.  The default is "True" for |:library/email.policy.txt/email.policy.compat32:compat32| and "False" for all other
policies. (Contributed by Milan Oberkirch in |:bugs.python.org/issue20098:bpo-20098|.)

A new |:library/email.compat32-message.txt/email.message.Message.get_content_disposition:Message.get_content_disposition()| method provides easy access to a
canonical value for the *Content-Disposition* header. (Contributed by Abhilash
Raj in |:bugs.python.org/issue21083:bpo-21083|.)

A new policy option |:library/email.policy.txt/email.policy.EmailPolicy.utf8:EmailPolicy.utf8| can be set to "True" to encode email
headers using the UTF-8 charset instead of using encoded words.  This allows "
Messages" to be formatted according to *|index-33:⚓|* |:tools.ietf.org/html/rfc6532.html:RFC 6532| and used with
an SMTP server that supports the *|index-34:⚓|* |:tools.ietf.org/html/rfc6531.html:RFC 6531| "SMTPUTF8" extension.
(Contributed by R. David Murray in |:bugs.python.org/issue24211:bpo-24211|.)

The |:library/email.mime.txt/email.mime.text.MIMEText:mime.text.MIMEText| constructor now accepts a |:library/email.charset.txt/email.charset.Charset:charset.Charset| instance.
(Contributed by Claude Paroz and Berker Peksag in |:bugs.python.org/issue16324:bpo-16324|.)

## enum:enum

The |:library/enum.txt/enum.Enum:Enum| callable has a new parameter *start* to specify the initial number of
enum values if only *names* are provided:

```rst
>>> Animal = enum.Enum('Animal', 'cat dog', start=10)
>>> Animal.cat
<Animal.cat: 10>
>>> Animal.dog
<Animal.dog: 11>
```

(Contributed by Ethan Furman in |:bugs.python.org/issue21706:bpo-21706|.)

## faulthandler:faulthandler

The |:library/faulthandler.txt/faulthandler.enable:enable()|, |:library/faulthandler.txt/faulthandler.register:register()|, |:library/faulthandler.txt/faulthandler.dump_traceback:dump_traceback()| and |:library/faulthandler.txt/faulthandler.dump_traceback_later:dump_traceback_later()|
functions now accept file descriptors in addition to file-like objects.
(Contributed by Wei Wu in |:bugs.python.org/issue23566:bpo-23566|.)

## functools:functools*|whatsnew-lrucache:⚓|*

Most of the |:library/functools.txt/functools.lru_cache:lru_cache()| machinery is now implemented in C, making it
significantly faster.  (Contributed by Matt Joiner, Alexey Kachayev, and Serhiy
Storchaka in |:bugs.python.org/issue14373:bpo-14373|.)

## glob:glob

The |:library/glob.txt/glob.iglob:iglob()| and |:library/glob.txt/glob.glob:glob()| functions now support recursive search in
subdirectories, using the ""**"" pattern. (Contributed by Serhiy Storchaka in
|:bugs.python.org/issue13968:bpo-13968|.)

## gzip:gzip

The *mode* argument of the |:library/gzip.txt/gzip.GzipFile:GzipFile| constructor now accepts ""x"" to request
exclusive creation. (Contributed by Tim Heaney in |:bugs.python.org/issue19222:bpo-19222|.)

## heapq:heapq

Element comparison in |:library/heapq.txt/heapq.merge:merge()| can now be customized by passing a
|:glossary.txt/term-key-function:key function| in a new optional *key* keyword argument, and a new optional *
reverse* keyword argument can be used to reverse element comparison:

```rst
>>> import heapq
>>> a = ['9', '777', '55555']
>>> b = ['88', '6666']
>>> list(heapq.merge(a, b, key=len))
['9', '88', '777', '6666', '55555']
>>> list(heapq.merge(reversed(a), reversed(b), key=len, reverse=True))
['55555', '6666', '777', '88', '9']
```

(Contributed by Raymond Hettinger in |:bugs.python.org/issue13742:bpo-13742|.)

## http:http

A new |:library/http.txt/http.HTTPStatus:HTTPStatus| enum that defines a set of HTTP status codes, reason phrases
and long descriptions written in English. (Contributed by Demian Brecht in
|:bugs.python.org/issue21793:bpo-21793|.)

## http-client:http.client

|:library/http.client.txt/http.client.HTTPConnection.getresponse:HTTPConnection.getresponse()| now raises a |:library/http.client.txt/http.client.RemoteDisconnected:RemoteDisconnected| exception when
a remote server connection is closed unexpectedly.  Additionally, if a
|:library/exceptions.txt/ConnectionError:ConnectionError| (of which "RemoteDisconnected" is a subclass) is raised, the
client socket is now closed automatically, and will reconnect on the next
request:

```rst
import http.client
conn = http.client.HTTPConnection('www.python.org')
for retries in range(3):
    try:
        conn.request('GET', '/')
        resp = conn.getresponse()
    except http.client.RemoteDisconnected:
        pass
```

(Contributed by Martin Panter in |:bugs.python.org/issue3566:bpo-3566|.)

## idlelib-and-idle:idlelib and IDLE

Since idlelib implements the IDLE shell and editor and is not intended for
import by other programs, it gets improvements with every release.  See "
Lib/idlelib/NEWS.txt" for a cumulative list of changes since 3.4.0, as well as
changes made in future 3.5.x releases. This file is also available from the IDLE
Help ‣ About IDLE dialog.

## imaplib:imaplib

The |:library/imaplib.txt/imaplib.IMAP4:IMAP4| class now supports the |:glossary.txt/term-context-manager:context manager| protocol. When used in a
|:reference/compound_stmts.txt/with:with| statement, the IMAP4 "LOGOUT" command will be called automatically at the
end of the block. (Contributed by Tarek Ziadé and Serhiy Storchaka in |:bugs.python.org/issue4972:bpo-4972|
.)

The |:library/imaplib.txt/module-imaplib:imaplib| module now supports *|index-35:⚓|* |:tools.ietf.org/html/rfc5161.html:RFC 5161| (ENABLE Extension)
and *|index-36:⚓|* |:tools.ietf.org/html/rfc6855.html:RFC 6855| (UTF-8 Support) via the |:library/imaplib.txt/imaplib.IMAP4.enable:IMAP4.enable()| method.
A new |:library/imaplib.txt/imaplib.IMAP4.utf8_enabled:IMAP4.utf8_enabled| attribute tracks whether or not *|index-37:⚓|*
|:tools.ietf.org/html/rfc6855.html:RFC 6855| support is enabled. (Contributed by Milan Oberkirch, R. David Murray,
and Maciej Szulik in |:bugs.python.org/issue21800:bpo-21800|.)

The |:library/imaplib.txt/module-imaplib:imaplib| module now automatically encodes non-ASCII string usernames and
passwords using UTF-8, as recommended by the RFCs.  (Contributed by Milan
Oberkirch in |:bugs.python.org/issue21800:bpo-21800|.)

## imghdr:imghdr

The |:library/imghdr.txt/imghdr.what:what()| function now recognizes the |:www.openexr.com:OpenEXR|*|openexr:⚓|*  format
(contributed by Martin Vignali and Claudiu Popa in |:bugs.python.org/issue20295:bpo-20295|), and the |:en.wikipedia.org/wiki/WebP:WebP|
*|webp:⚓|*  format (contributed by Fabrice Aneche and Claudiu Popa in
|:bugs.python.org/issue20197:bpo-20197|.)

## importlib:importlib

The |:library/importlib.txt/importlib.util.LazyLoader:util.LazyLoader| class allows for lazy loading of modules in applications
where startup time is important. (Contributed by Brett Cannon in |:bugs.python.org/issue17621:bpo-17621|.)

The |:library/importlib.txt/importlib.abc.InspectLoader.source_to_code:abc.InspectLoader.source_to_code()| method is now a static method.  This
makes it easier to initialize a module object with code compiled from a string
by running "exec(code, module.__dict__)". (Contributed by Brett Cannon in
|:bugs.python.org/issue21156:bpo-21156|.)

The new |:library/importlib.txt/importlib.util.module_from_spec:util.module_from_spec()| function is now the preferred way to create a
new module.  As opposed to creating a |:library/types.txt/types.ModuleType:types.ModuleType| instance directly, this
new function will set the various import-controlled attributes based on the
passed-in spec object.  (Contributed by Brett Cannon in |:bugs.python.org/issue20383:bpo-20383|.)

## inspect:inspect

Both the |:library/inspect.txt/inspect.Signature:Signature| and |:library/inspect.txt/inspect.Parameter:Parameter| classes are now picklable and hashable.
(Contributed by Yury Selivanov in |:bugs.python.org/issue20726:bpo-20726| and |:bugs.python.org/issue20334:bpo-20334|.)

A new |:library/inspect.txt/inspect.BoundArguments.apply_defaults:BoundArguments.apply_defaults()| method provides a way to set default
values for missing arguments:

```rst
>>> def foo(a, b='ham', *args): pass
>>> ba = inspect.signature(foo).bind('spam')
>>> ba.apply_defaults()
>>> ba.arguments
OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])
```

(Contributed by Yury Selivanov in |:bugs.python.org/issue24190:bpo-24190|.)

A new class method |:library/inspect.txt/inspect.Signature.from_callable:Signature.from_callable()| makes subclassing of |:library/inspect.txt/inspect.Signature:Signature|
easier.  (Contributed by Yury Selivanov and Eric Snow in |:bugs.python.org/issue17373:bpo-17373|.)

The |:library/inspect.txt/inspect.signature:signature()| function now accepts a *follow_wrapped* optional keyword
argument, which, when set to "False", disables automatic following of "
__wrapped__" links. (Contributed by Yury Selivanov in |:bugs.python.org/issue20691:bpo-20691|.)

A set of new functions to inspect |:glossary.txt/term-coroutine-function:coroutine functions| and |:glossary.txt/term-coroutine:coroutine objects|
has been added: |:library/inspect.txt/inspect.iscoroutine:iscoroutine()|, |:library/inspect.txt/inspect.iscoroutinefunction:iscoroutinefunction()|, |:library/inspect.txt/inspect.isawaitable:isawaitable()|,
|:library/inspect.txt/inspect.getcoroutinelocals:getcoroutinelocals()|, and |:library/inspect.txt/inspect.getcoroutinestate:getcoroutinestate()|. (Contributed by Yury
Selivanov in |:bugs.python.org/issue24017:bpo-24017| and |:bugs.python.org/issue24400:bpo-24400|.)

The |:library/inspect.txt/inspect.stack:stack()|, |:library/inspect.txt/inspect.trace:trace()|, |:library/inspect.txt/inspect.getouterframes:getouterframes()|, and |:library/inspect.txt/inspect.getinnerframes:getinnerframes()| functions
now return a list of named tuples. (Contributed by Daniel Shahaf in |:bugs.python.org/issue16808:bpo-16808|
.)

## io:io

A new |:library/io.txt/io.BufferedIOBase.readinto1:BufferedIOBase.readinto1()| method, that uses at most one call to the
underlying raw stream’s |:library/io.txt/io.RawIOBase.read:RawIOBase.read()| or |:library/io.txt/io.RawIOBase.readinto:RawIOBase.readinto()| methods.
(Contributed by Nikolaus Rath in |:bugs.python.org/issue20578:bpo-20578|.)

## ipaddress:ipaddress

Both the |:library/ipaddress.txt/ipaddress.IPv4Network:IPv4Network| and |:library/ipaddress.txt/ipaddress.IPv6Network:IPv6Network| classes now accept an "(address,
netmask)" tuple argument, so as to easily construct network objects from
existing addresses:

```rst
>>> import ipaddress
>>> ipaddress.IPv4Network(('127.0.0.0', 8))
IPv4Network('127.0.0.0/8')
>>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))
IPv4Network('127.0.0.0/8')
```

(Contributed by Peter Moody and Antoine Pitrou in |:bugs.python.org/issue16531:bpo-16531|.)

A new "reverse_pointer" attribute for the |:library/ipaddress.txt/ipaddress.IPv4Network:IPv4Network| and |:library/ipaddress.txt/ipaddress.IPv6Network:IPv6Network|
classes returns the name of the reverse DNS PTR record:

```rst
>>> import ipaddress
>>> addr = ipaddress.IPv4Address('127.0.0.1')
>>> addr.reverse_pointer
'1.0.0.127.in-addr.arpa'
>>> addr6 = ipaddress.IPv6Address('::1')
>>> addr6.reverse_pointer
'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'
```

(Contributed by Leon Weber in |:bugs.python.org/issue20480:bpo-20480|.)

## json:json

The |:library/json.txt/module-json.tool:json.tool| command line interface now preserves the order of keys in JSON
objects passed in input.  The new "--sort-keys" option can be used to sort the
keys alphabetically. (Contributed by Berker Peksag in |:bugs.python.org/issue21650:bpo-21650|.)

JSON decoder now raises |:library/json.txt/json.JSONDecodeError:JSONDecodeError| instead of |:library/exceptions.txt/ValueError:ValueError| to provide
better context information about the error. (Contributed by Serhiy Storchaka in
|:bugs.python.org/issue19361:bpo-19361|.)

## linecache:linecache

A new |:library/linecache.txt/linecache.lazycache:lazycache()| function can be used to capture information about a non-
file-based module to permit getting its lines later via |:library/linecache.txt/linecache.getline:getline()|. This avoids
doing I/O until a line is actually needed, without having to carry the module
globals around indefinitely. (Contributed by Robert Collins in |:bugs.python.org/issue17911:bpo-17911|.)

## locale:locale

A new |:library/locale.txt/locale.delocalize:delocalize()| function can be used to convert a string into a normalized
number string, taking the "LC_NUMERIC" settings into account:

```rst
>>> import locale
>>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')
'de_DE.UTF-8'
>>> locale.delocalize('1.234,56')
'1234.56'
>>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')
'en_US.UTF-8'
>>> locale.delocalize('1,234.56')
'1234.56'
```

(Contributed by Cédric Krier in |:bugs.python.org/issue13918:bpo-13918|.)

## logging:logging

All logging methods (|:library/logging.txt/logging.Logger:Logger| |:library/logging.txt/logging.Logger.log:log()|, |:library/logging.txt/logging.Logger.exception:exception()|, |:library/logging.txt/logging.Logger.critical:critical()|, |:library/logging.txt/logging.Logger.debug:debug()|,
etc.), now accept exception instances as an *exc_info* argument, in addition to
boolean values and exception tuples:

```rst
>>> import logging
>>> try:
...     1/0
... except ZeroDivisionError as ex:
...     logging.error('exception', exc_info=ex)
ERROR:root:exception
```

(Contributed by Yury Selivanov in |:bugs.python.org/issue20537:bpo-20537|.)

The |:library/logging.handlers.txt/logging.handlers.HTTPHandler:handlers.HTTPHandler| class now accepts an optional |:library/ssl.txt/ssl.SSLContext:ssl.SSLContext|
instance to configure SSL settings used in an HTTP connection. (Contributed by
Alex Gaynor in |:bugs.python.org/issue22788:bpo-22788|.)

The |:library/logging.handlers.txt/logging.handlers.QueueListener:handlers.QueueListener| class now takes a *respect_handler_level* keyword
argument which, if set to "True", will pass messages to handlers taking handler
levels into account. (Contributed by Vinay Sajip.)

## lzma:lzma

The |:library/lzma.txt/lzma.LZMADecompressor.decompress:LZMADecompressor.decompress()| method now accepts an optional *max_length*
argument to limit the maximum size of decompressed data. (Contributed by Martin
Panter in |:bugs.python.org/issue15955:bpo-15955|.)

## math:math

Two new constants have been added to the |:library/math.txt/module-math:math| module: |:library/math.txt/math.inf:inf| and |:library/math.txt/math.nan:nan|.
(Contributed by Mark Dickinson in |:bugs.python.org/issue23185:bpo-23185|.)

A new function |:library/math.txt/math.isclose:isclose()| provides a way to test for approximate equality.
(Contributed by Chris Barker and Tal Einat in |:bugs.python.org/issue24270:bpo-24270|.)

A new |:library/math.txt/math.gcd:gcd()| function has been added.  The |:library/fractions.txt/fractions.gcd:fractions.gcd()| function is now
deprecated. (Contributed by Mark Dickinson and Serhiy Storchaka in |:bugs.python.org/issue22486:bpo-22486|.)

## multiprocessing:multiprocessing

|:library/multiprocessing.txt/multiprocessing.sharedctypes.synchronized:sharedctypes.synchronized()| objects now support the |:glossary.txt/term-context-manager:context manager|
protocol. (Contributed by Charles-François Natali in |:bugs.python.org/issue21565:bpo-21565|.)

## operator:operator

|:library/operator.txt/operator.attrgetter:attrgetter()|, |:library/operator.txt/operator.itemgetter:itemgetter()|, and |:library/operator.txt/operator.methodcaller:methodcaller()| objects now support
pickling. (Contributed by Josh Rosenberg and Serhiy Storchaka in |:bugs.python.org/issue22955:bpo-22955|.)

New |:library/operator.txt/operator.matmul:matmul()| and |:library/operator.txt/operator.imatmul:imatmul()| functions to perform matrix multiplication.
(Contributed by Benjamin Peterson in |:bugs.python.org/issue21176:bpo-21176|.)

## os:os

The new |:library/os.txt/os.scandir:scandir()| function returning an iterator of |:library/os.txt/os.DirEntry:DirEntry| objects has
been added.  If possible, |:library/os.txt/os.scandir:scandir()| extracts file attributes while scanning a
directory, removing the need to perform subsequent system calls to determine
file type or attributes, which may significantly improve performance.
(Contributed by Ben Hoyt with the help of Victor Stinner in |:bugs.python.org/issue22524:bpo-22524|.)

On Windows, a new |:library/os.txt/os.stat_result.st_file_attributes:stat_result.st_file_attributes| attribute is now available.
It corresponds to the "dwFileAttributes" member of the "
BY_HANDLE_FILE_INFORMATION" structure returned by "GetFileInformationByHandle()"
.  (Contributed by Ben Hoyt in |:bugs.python.org/issue21719:bpo-21719|.)

The |:library/os.txt/os.urandom:urandom()| function now uses the "getrandom()" syscall on Linux 3.17 or
newer, and "getentropy()" on OpenBSD 5.6 and newer, removing the need to use "
/dev/urandom" and avoiding failures due to potential file descriptor exhaustion.
(Contributed by Victor Stinner in |:bugs.python.org/issue22181:bpo-22181|.)

New |:library/os.txt/os.get_blocking:get_blocking()| and |:library/os.txt/os.set_blocking:set_blocking()| functions allow getting and setting a
file descriptor’s blocking mode (|:library/os.txt/os.O_NONBLOCK:O_NONBLOCK|.) (Contributed by Victor Stinner
in |:bugs.python.org/issue22054:bpo-22054|.)

The |:library/os.txt/os.truncate:truncate()| and |:library/os.txt/os.ftruncate:ftruncate()| functions are now supported on Windows.
(Contributed by Steve Dower in |:bugs.python.org/issue23668:bpo-23668|.)

There is a new |:library/os.path.txt/os.path.commonpath:os.path.commonpath()| function returning the longest common sub-
path of each passed pathname.  Unlike the |:library/os.path.txt/os.path.commonprefix:os.path.commonprefix()| function, it
always returns a valid path:

```rst
>>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])
'/usr/l'

>>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])
'/usr'
```

(Contributed by Rafik Draoui and Serhiy Storchaka in |:bugs.python.org/issue10395:bpo-10395|.)

## pathlib:pathlib

The new |:library/pathlib.txt/pathlib.Path.samefile:Path.samefile()| method can be used to check whether the path points to
the same file as another path, which can be either another |:library/pathlib.txt/pathlib.Path:Path| object, or a
string:

```rst
>>> import pathlib
>>> p1 = pathlib.Path('/etc/hosts')
>>> p2 = pathlib.Path('/etc/../etc/hosts')
>>> p1.samefile(p2)
True
```

(Contributed by Vajrasky Kok and Antoine Pitrou in |:bugs.python.org/issue19775:bpo-19775|.)

The |:library/pathlib.txt/pathlib.Path.mkdir:Path.mkdir()| method now accepts a new optional *exist_ok* argument to
match "mkdir -p" and |:library/os.txt/os.makedirs:os.makedirs()| functionality.  (Contributed by Berker
Peksag in |:bugs.python.org/issue21539:bpo-21539|.)

There is a new |:library/pathlib.txt/pathlib.Path.expanduser:Path.expanduser()| method to expand "~" and "~user" prefixes.
(Contributed by Serhiy Storchaka and Claudiu Popa in |:bugs.python.org/issue19776:bpo-19776|.)

A new |:library/pathlib.txt/pathlib.Path.home:Path.home()| class method can be used to get a |:library/pathlib.txt/pathlib.Path:Path| instance
representing the user’s home directory. (Contributed by Victor Salgado and
Mayank Tripathi in |:bugs.python.org/issue19777:bpo-19777|.)

New |:library/pathlib.txt/pathlib.Path.write_text:Path.write_text()|, |:library/pathlib.txt/pathlib.Path.read_text:Path.read_text()|, |:library/pathlib.txt/pathlib.Path.write_bytes:Path.write_bytes()|,
|:library/pathlib.txt/pathlib.Path.read_bytes:Path.read_bytes()| methods to simplify read/write operations on files.

The following code snippet will create or rewrite existing file "~/spam42":

```rst
>>> import pathlib
>>> p = pathlib.Path('~/spam42')
>>> p.expanduser().write_text('ham')
3
```

(Contributed by Christopher Welborn in |:bugs.python.org/issue20218:bpo-20218|.)

## pickle:pickle

Nested objects, such as unbound methods or nested classes, can now be pickled
using |:library/pickle.txt/pickle-protocols:pickle protocols| older than protocol version 4. Protocol version 4
already supports these cases.  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue23611:bpo-23611|.)

## poplib:poplib

A new |:library/poplib.txt/poplib.POP3.utf8:POP3.utf8()| command enables *|index-38:⚓|* |:tools.ietf.org/html/rfc6856.html:RFC 6856| (Internationalized
Email) support, if a POP server supports it. (Contributed by Milan OberKirch in
|:bugs.python.org/issue21804:bpo-21804|.)

## re:re

References and conditional references to groups with fixed length are now
allowed in lookbehind assertions:

```rst
>>> import re
>>> pat = re.compile(r'(a|b).(?<=\1)c')
>>> pat.match('aac')
<_sre.SRE_Match object; span=(0, 3), match='aac'>
>>> pat.match('bbc')
<_sre.SRE_Match object; span=(0, 3), match='bbc'>
```

(Contributed by Serhiy Storchaka in |:bugs.python.org/issue9179:bpo-9179|.)

The number of capturing groups in regular expressions is no longer limited to
100.  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue22437:bpo-22437|.)

The |:library/re.txt/re.sub:sub()| and |:library/re.txt/re.subn:subn()| functions now replace unmatched groups with empty
strings instead of raising an exception. (Contributed by Serhiy Storchaka in
|:bugs.python.org/issue1519638:bpo-1519638|.)

The |:library/re.txt/re.error:re.error| exceptions have new attributes, |:library/re.txt/re.error.msg:msg|, |:library/re.txt/re.error.pattern:pattern|, |:library/re.txt/re.error.pos:pos|, |:library/re.txt/re.error.lineno:lineno|
, and |:library/re.txt/re.error.colno:colno|, that provide better context information about the error:

```rst
>>> re.compile("""
...     (?x)
...     .++
... """)
Traceback (most recent call last):
   ...
sre_constants.error: multiple repeat at position 16 (line 3, column 7)
```

(Contributed by Serhiy Storchaka in |:bugs.python.org/issue22578:bpo-22578|.)

## readline:readline

A new |:library/readline.txt/readline.append_history_file:append_history_file()| function can be used to append the specified
number of trailing elements in history to the given file. (Contributed by Bruno
Cauet in |:bugs.python.org/issue22940:bpo-22940|.)

## selectors:selectors

The new |:library/selectors.txt/selectors.DevpollSelector:DevpollSelector| supports efficient "/dev/poll" polling on Solaris.
(Contributed by Giampaolo Rodola’ in |:bugs.python.org/issue18931:bpo-18931|.)

## shutil:shutil

The |:library/shutil.txt/shutil.move:move()| function now accepts a *copy_function* argument, allowing, for
example, the |:library/shutil.txt/shutil.copy:copy()| function to be used instead of the default |:library/shutil.txt/shutil.copy2:copy2()| if
there is a need to ignore file metadata when moving. (Contributed by Claudiu
Popa in |:bugs.python.org/issue19840:bpo-19840|.)

The |:library/shutil.txt/shutil.make_archive:make_archive()| function now supports the *xztar* format. (Contributed by
Serhiy Storchaka in |:bugs.python.org/issue5411:bpo-5411|.)

## signal:signal

On Windows, the |:library/signal.txt/signal.set_wakeup_fd:set_wakeup_fd()| function now also supports socket handles.
(Contributed by Victor Stinner in |:bugs.python.org/issue22018:bpo-22018|.)

Various "SIG*" constants in the |:library/signal.txt/module-signal:signal| module have been converted into |:library/enum.txt/module-enum:Enums|
.  This allows meaningful names to be printed during debugging, instead of
integer “magic numbers”. (Contributed by Giampaolo Rodola’ in |:bugs.python.org/issue21076:bpo-21076|.)

## smtpd:smtpd

Both the |:library/smtpd.txt/smtpd.SMTPServer:SMTPServer| and |:library/smtpd.txt/smtpd.SMTPChannel:SMTPChannel| classes now accept a *decode_data*
keyword argument to determine if the "DATA" portion of the SMTP transaction is
decoded using the ""utf-8"" codec or is instead provided to the
|:library/smtpd.txt/smtpd.SMTPServer.process_message:SMTPServer.process_message()| method as a byte string.  The default is "True"
for backward compatibility reasons, but will change to "False" in Python 3.6.
If *decode_data* is set to "False", the "process_message" method must be
prepared to accept keyword arguments. (Contributed by Maciej Szulik in
|:bugs.python.org/issue19662:bpo-19662|.)

The |:library/smtpd.txt/smtpd.SMTPServer:SMTPServer| class now advertises the "8BITMIME" extension (*|index-39:⚓|*
|:tools.ietf.org/html/rfc6152.html:RFC 6152|) if *decode_data* has been set "True".  If the client specifies "
BODY=8BITMIME" on the "MAIL" command, it is passed to
|:library/smtpd.txt/smtpd.SMTPServer.process_message:SMTPServer.process_message()| via the *mail_options* keyword. (Contributed by
Milan Oberkirch and R.  David Murray in |:bugs.python.org/issue21795:bpo-21795|.)

The |:library/smtpd.txt/smtpd.SMTPServer:SMTPServer| class now also supports the "SMTPUTF8" extension (
*|index-40:⚓|* |:tools.ietf.org/html/rfc6531.html:RFC 6531|: Internationalized Email).  If the client specified "
SMTPUTF8 BODY=8BITMIME" on the "MAIL" command, they are passed to
|:library/smtpd.txt/smtpd.SMTPServer.process_message:SMTPServer.process_message()| via the *mail_options* keyword.  It is the
responsibility of the "process_message" method to correctly handle the "SMTPUTF8
" data. (Contributed by Milan Oberkirch in |:bugs.python.org/issue21725:bpo-21725|.)

It is now possible to provide, directly or via name resolution, IPv6 addresses
in the |:library/smtpd.txt/smtpd.SMTPServer:SMTPServer| constructor, and have it successfully connect.  (Contributed
by Milan Oberkirch in |:bugs.python.org/issue14758:bpo-14758|.)

## smtplib:smtplib

A new |:library/smtplib.txt/smtplib.SMTP.auth:SMTP.auth()| method provides a convenient way to implement custom
authentication mechanisms. (Contributed by Milan Oberkirch in |:bugs.python.org/issue15014:bpo-15014|.)

The |:library/smtplib.txt/smtplib.SMTP.set_debuglevel:SMTP.set_debuglevel()| method now accepts an additional debuglevel (2),
which enables timestamps in debug messages. (Contributed by Gavin Chappell and
Maciej Szulik in |:bugs.python.org/issue16914:bpo-16914|.)

Both the |:library/smtplib.txt/smtplib.SMTP.sendmail:SMTP.sendmail()| and |:library/smtplib.txt/smtplib.SMTP.send_message:SMTP.send_message()| methods now support
*|index-41:⚓|* |:tools.ietf.org/html/rfc6531.html:RFC 6531| (SMTPUTF8). (Contributed by Milan Oberkirch and R.
David Murray in |:bugs.python.org/issue22027:bpo-22027|.)

## sndhdr:sndhdr

The |:library/sndhdr.txt/sndhdr.what:what()| and |:library/sndhdr.txt/sndhdr.whathdr:whathdr()| functions  now return a |:library/collections.txt/collections.namedtuple:namedtuple()|.
(Contributed by Claudiu Popa in |:bugs.python.org/issue18615:bpo-18615|.)

## socket:socket

Functions with timeouts now use a monotonic clock, instead of a system clock.
(Contributed by Victor Stinner in |:bugs.python.org/issue22043:bpo-22043|.)

A new |:library/socket.txt/socket.socket.sendfile:socket.sendfile()| method allows sending a file over a socket by using
the high-performance |:library/os.txt/os.sendfile:os.sendfile()| function on UNIX, resulting in uploads
being from 2 to 3 times faster than when using plain |:library/socket.txt/socket.socket.send:socket.send()|.
(Contributed by Giampaolo Rodola’ in |:bugs.python.org/issue17552:bpo-17552|.)

The |:library/socket.txt/socket.socket.sendall:socket.sendall()| method no longer resets the socket timeout every time
bytes are received or sent.  The socket timeout is now the maximum total
duration to send all data. (Contributed by Victor Stinner in |:bugs.python.org/issue23853:bpo-23853|.)

The *backlog* argument of the |:library/socket.txt/socket.socket.listen:socket.listen()| method is now optional.  By
default it is set to |:library/socket.txt/socket.SOMAXCONN:SOMAXCONN| or to "128", whichever is less. (Contributed by
Charles-François Natali in |:bugs.python.org/issue21455:bpo-21455|.)

## ssl:ssl### memory-bio-support:Memory BIO Support

(Contributed by Geert Jansen in |:bugs.python.org/issue21965:bpo-21965|.)

The new |:library/ssl.txt/ssl.SSLObject:SSLObject| class has been added to provide SSL protocol support for
cases when the network I/O capabilities of |:library/ssl.txt/ssl.SSLSocket:SSLSocket| are not necessary or are
suboptimal.  "SSLObject" represents an SSL protocol instance, but does not
implement any network I/O methods, and instead provides a memory buffer
interface.  The new |:library/ssl.txt/ssl.MemoryBIO:MemoryBIO| class can be used to pass data between Python
and an SSL protocol instance.

The memory BIO SSL support is primarily intended to be used in frameworks
implementing asynchronous I/O for which |:library/ssl.txt/ssl.SSLSocket:SSLSocket|’s readiness model
(“select/poll”) is inefficient.

A new |:library/ssl.txt/ssl.SSLContext.wrap_bio:SSLContext.wrap_bio()| method can be used to create a new "SSLObject"
instance.

### application-layer-protocol-negotiation-support:Application-Layer Protocol
Negotiation Support

(Contributed by Benjamin Peterson in |:bugs.python.org/issue20188:bpo-20188|.)

Where OpenSSL support is present, the |:library/ssl.txt/module-ssl:ssl| module now implements the *
Application-Layer Protocol Negotiation* TLS extension as described in
*|index-42:⚓|* |:tools.ietf.org/html/rfc7301.html:RFC 7301|.

The new |:library/ssl.txt/ssl.SSLContext.set_alpn_protocols:SSLContext.set_alpn_protocols()| can be used to specify which protocols
a socket should advertise during the TLS handshake.

The new |:library/ssl.txt/ssl.SSLSocket.selected_alpn_protocol:SSLSocket.selected_alpn_protocol()| returns the protocol that was
selected during the TLS handshake. The |:library/ssl.txt/ssl.HAS_ALPN:HAS_ALPN| flag indicates whether ALPN
support is present.

### other-changes:Other Changes

There is a new |:library/ssl.txt/ssl.SSLSocket.version:SSLSocket.version()| method to query the actual protocol version
in use. (Contributed by Antoine Pitrou in |:bugs.python.org/issue20421:bpo-20421|.)

The |:library/ssl.txt/ssl.SSLSocket:SSLSocket| class now implements a "SSLSocket.sendfile()" method.
(Contributed by Giampaolo Rodola’ in |:bugs.python.org/issue17552:bpo-17552|.)

The "SSLSocket.send()" method now raises either the |:library/ssl.txt/ssl.SSLWantReadError:ssl.SSLWantReadError| or
|:library/ssl.txt/ssl.SSLWantWriteError:ssl.SSLWantWriteError| exception on a non-blocking socket if the operation
would block. Previously, it would return "0".  (Contributed by Nikolaus Rath in
|:bugs.python.org/issue20951:bpo-20951|.)

The |:library/ssl.txt/ssl.cert_time_to_seconds:cert_time_to_seconds()| function now interprets the input time as UTC and
not as local time, per *|index-43:⚓|* |:tools.ietf.org/html/rfc5280.html:RFC 5280|.  Additionally, the return
value is always an |:library/functions.txt/int:int|. (Contributed by Akira Li in |:bugs.python.org/issue19940:bpo-19940|.)

New "SSLObject.shared_ciphers()" and |:library/ssl.txt/ssl.SSLSocket.shared_ciphers:SSLSocket.shared_ciphers()| methods return
the list of ciphers sent by the client during the handshake. (Contributed by
Benjamin Peterson in |:bugs.python.org/issue23186:bpo-23186|.)

The |:library/ssl.txt/ssl.SSLSocket.do_handshake:SSLSocket.do_handshake()|, |:library/ssl.txt/ssl.SSLSocket.read:SSLSocket.read()|, "SSLSocket.shutdown()", and
|:library/ssl.txt/ssl.SSLSocket.write:SSLSocket.write()| methods of the |:library/ssl.txt/ssl.SSLSocket:SSLSocket| class no longer reset the socket
timeout every time bytes are received or sent. The socket timeout is now the
maximum total duration of the method. (Contributed by Victor Stinner in
|:bugs.python.org/issue23853:bpo-23853|.)

The |:library/ssl.txt/ssl.match_hostname:match_hostname()| function now supports matching of IP addresses.
(Contributed by Antoine Pitrou in |:bugs.python.org/issue23239:bpo-23239|.)

## sqlite3:sqlite3

The |:library/sqlite3.txt/sqlite3.Row:Row| class now fully supports the sequence protocol, in particular
|:library/functions.txt/reversed:reversed()| iteration and slice indexing. (Contributed by Claudiu Popa in
|:bugs.python.org/issue10203:bpo-10203|; by Lucas Sinclair, Jessica McKellar, and  Serhiy Storchaka in
|:bugs.python.org/issue13583:bpo-13583|.)

*|whatsnew-subprocess:⚓|* ## subprocess:subprocess

The new |:library/subprocess.txt/subprocess.run:run()| function has been added. It runs the specified command and
returns a |:library/subprocess.txt/subprocess.CompletedProcess:CompletedProcess| object, which describes a finished process.  The
new API is more consistent and is the recommended approach to invoking
subprocesses in Python code that does not need to maintain compatibility with
earlier Python versions. (Contributed by Thomas Kluyver in |:bugs.python.org/issue23342:bpo-23342|.)

Examples:

```rst
>>> subprocess.run(["ls", "-l"])  # doesn't capture output
CompletedProcess(args=['ls', '-l'], returncode=0)

>>> subprocess.run("exit 1", shell=True, check=True)
Traceback (most recent call last):
  ...
subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1

>>> subprocess.run(["ls", "-l", "/dev/null"], stdout=subprocess.PIPE)
CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,
stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n')
```

## sys:sys

A new "set_coroutine_wrapper()" function allows setting a global hook that will
be called whenever a |:glossary.txt/term-coroutine:coroutine object| is created by an |:reference/compound_stmts.txt/async-def:async def| function.
A corresponding "get_coroutine_wrapper()" can be used to obtain a currently set
wrapper.  Both functions are |:glossary.txt/term-provisional-API:provisional|, and are intended for debugging
purposes only.  (Contributed by Yury Selivanov in |:bugs.python.org/issue24017:bpo-24017|.)

A new |:library/sys.txt/sys.is_finalizing:is_finalizing()| function can be used to check if the Python interpreter
is |:glossary.txt/term-interpreter-shutdown:shutting down|. (Contributed by Antoine Pitrou in |:bugs.python.org/issue22696:bpo-22696|.)

## sysconfig:sysconfig

The name of the user scripts directory on Windows now includes the first two
components of the Python version. (Contributed by Paul Moore in |:bugs.python.org/issue23437:bpo-23437|.)

## tarfile:tarfile

The *mode* argument of the |:library/tarfile.txt/tarfile.open:open()| function now accepts ""x"" to request
exclusive creation.  (Contributed by Berker Peksag in |:bugs.python.org/issue21717:bpo-21717|.)

The |:library/tarfile.txt/tarfile.TarFile.extractall:TarFile.extractall()| and |:library/tarfile.txt/tarfile.TarFile.extract:TarFile.extract()| methods now take a keyword
argument *numeric_owner*.  If set to "True", the extracted files and directories
will be owned by the numeric "uid" and "gid" from the tarfile. If set to "False"
(the default, and the behavior in versions prior to 3.5), they will be owned by
the named user and group in the tarfile. (Contributed by Michael Vogt and Eric
Smith in |:bugs.python.org/issue23193:bpo-23193|.)

The |:library/tarfile.txt/tarfile.TarFile.list:TarFile.list()| now accepts an optional *members* keyword argument that can
be set to a subset of the list returned by |:library/tarfile.txt/tarfile.TarFile.getmembers:TarFile.getmembers()|. (Contributed
by Serhiy Storchaka in |:bugs.python.org/issue21549:bpo-21549|.)

## threading:threading

Both the |:library/threading.txt/threading.Lock.acquire:Lock.acquire()| and |:library/threading.txt/threading.RLock.acquire:RLock.acquire()| methods now use a monotonic
clock for timeout management. (Contributed by Victor Stinner in |:bugs.python.org/issue22043:bpo-22043|.)

## time:time

The |:library/time.txt/time.monotonic:monotonic()| function is now always available. (Contributed by Victor
Stinner in |:bugs.python.org/issue22043:bpo-22043|.)

## timeit:timeit

A new command line option "-u" or "--unit=*U*" can be used to specify the time
unit for the timer output.  Supported options are "usec", "msec", or "sec".
(Contributed by Julian Gindi in |:bugs.python.org/issue18983:bpo-18983|.)

The |:library/timeit.txt/timeit.timeit:timeit()| function has a new *globals* parameter for specifying the
namespace in which the code will be running. (Contributed by Ben Roberts in
|:bugs.python.org/issue2527:bpo-2527|.)

## tkinter:tkinter

The "tkinter._fix" module used for setting up the Tcl/Tk environment on Windows
has been replaced by a private function in the "_tkinter" module which makes no
permanent changes to environment variables. (Contributed by Zachary Ware in
|:bugs.python.org/issue20035:bpo-20035|.)

*|whatsnew-traceback:⚓|* ## traceback:traceback

New |:library/traceback.txt/traceback.walk_stack:walk_stack()| and |:library/traceback.txt/traceback.walk_tb:walk_tb()| functions to conveniently traverse frame and
traceback objects. (Contributed by Robert Collins in |:bugs.python.org/issue17911:bpo-17911|.)

New lightweight classes: |:library/traceback.txt/traceback.TracebackException:TracebackException|, |:library/traceback.txt/traceback.StackSummary:StackSummary|, and
|:library/traceback.txt/traceback.FrameSummary:FrameSummary|. (Contributed by Robert Collins in |:bugs.python.org/issue17911:bpo-17911|.)

Both the |:library/traceback.txt/traceback.print_tb:print_tb()| and |:library/traceback.txt/traceback.print_stack:print_stack()| functions now support negative values
for the *limit* argument. (Contributed by Dmitry Kazakov in |:bugs.python.org/issue22619:bpo-22619|.)

## types:types

A new |:library/types.txt/types.coroutine:coroutine()| function to transform |:glossary.txt/term-generator-iterator:generator| and |:library/collections.abc.txt/collections.abc.Generator:generator-like|
objects into |:glossary.txt/term-awaitable:awaitables|. (Contributed by Yury Selivanov in |:bugs.python.org/issue24017:bpo-24017|.)

A new type called |:library/types.txt/types.CoroutineType:CoroutineType|, which is used for |:glossary.txt/term-coroutine:coroutine| objects created
by |:reference/compound_stmts.txt/async-def:async def| functions. (Contributed by Yury Selivanov in |:bugs.python.org/issue24400:bpo-24400|.)

## unicodedata:unicodedata

The |:library/unicodedata.txt/module-unicodedata:unicodedata| module now uses data from |:unicode.org/versions/Unicode8.0.0:Unicode 8.0.0|*|unicode-8-0-0:⚓|* .

## unittest:unittest

The |:library/unittest.txt/unittest.TestLoader.loadTestsFromModule:TestLoader.loadTestsFromModule()| method now accepts a keyword-only
argument *pattern* which is passed to "load_tests" as the third argument.  Found
packages are now checked for "load_tests" regardless of whether their path
matches *pattern*, because it is impossible for a package name to match the
default pattern. (Contributed by Robert Collins and Barry A. Warsaw in
|:bugs.python.org/issue16662:bpo-16662|.)

Unittest discovery errors now are exposed in the |:library/unittest.txt/unittest.TestLoader.errors:TestLoader.errors| attribute
of the |:library/unittest.txt/unittest.TestLoader:TestLoader| instance. (Contributed by Robert Collins in |:bugs.python.org/issue19746:bpo-19746|.)

A new command line option "--locals" to show local variables in tracebacks.
(Contributed by Robert Collins in |:bugs.python.org/issue22936:bpo-22936|.)

## unittest-mock:unittest.mock

The |:library/unittest.mock.txt/unittest.mock.Mock:Mock| class has the following improvements:

* The class constructor has a new *unsafe* parameter, which causes mock objects to
  raise |:library/exceptions.txt/AttributeError:AttributeError| on attribute names starting with ""assert"". (Contributed
  by Kushal Das in |:bugs.python.org/issue21238:bpo-21238|.)

* A new |:library/unittest.mock.txt/unittest.mock.Mock.assert_not_called:Mock.assert_not_called()| method to check if the mock object was called.
  (Contributed by Kushal Das in |:bugs.python.org/issue21262:bpo-21262|.)

The |:library/unittest.mock.txt/unittest.mock.MagicMock:MagicMock| class now supports "__truediv__()", "__divmod__()" and "
__matmul__()" operators. (Contributed by Johannes Baiter in |:bugs.python.org/issue20968:bpo-20968|, and
Håkan Lövdahl in |:bugs.python.org/issue23581:bpo-23581| and |:bugs.python.org/issue23568:bpo-23568|.)

It is no longer necessary to explicitly pass "create=True" to the |:library/unittest.mock.txt/unittest.mock.patch:patch()|
function when patching builtin names. (Contributed by Kushal Das in |:bugs.python.org/issue17660:bpo-17660|
.)

## urllib:urllib

A new |:library/urllib.request.txt/urllib.request.HTTPPasswordMgrWithPriorAuth:request.HTTPPasswordMgrWithPriorAuth| class allows HTTP Basic
Authentication credentials to be managed so as to eliminate unnecessary "401"
response handling, or to unconditionally send credentials on the first request
in order to communicate with servers that return a "404" response instead of a "
401" if the "Authorization" header is not sent. (Contributed by Matej Cepl in
|:bugs.python.org/issue19494:bpo-19494| and Akshit Khurana in |:bugs.python.org/issue7159:bpo-7159|.)

A new *quote_via* argument for the |:library/urllib.parse.txt/urllib.parse.urlencode:parse.urlencode()| function provides a way
to control the encoding of query parts if needed. (Contributed by Samwyse and
Arnon Yaari in |:bugs.python.org/issue13866:bpo-13866|.)

The |:library/urllib.request.txt/urllib.request.urlopen:request.urlopen()| function accepts an |:library/ssl.txt/ssl.SSLContext:ssl.SSLContext| object as a *
context* argument, which will be used for the HTTPS connection.  (Contributed by
Alex Gaynor in |:bugs.python.org/issue22366:bpo-22366|.)

The |:library/urllib.parse.txt/urllib.parse.urljoin:parse.urljoin()| was updated to use the *|index-44:⚓|* |:tools.ietf.org/html/rfc3986.html:RFC 3986| semantics
for the resolution of relative URLs, rather than *|index-45:⚓|* |:tools.ietf.org/html/rfc1808.html:RFC 1808| and
*|index-46:⚓|* |:tools.ietf.org/html/rfc2396.html:RFC 2396|. (Contributed by Demian Brecht and Senthil Kumaran in
|:bugs.python.org/issue22118:bpo-22118|.)

## wsgiref:wsgiref

The *headers* argument of the |:library/wsgiref.txt/wsgiref.headers.Headers:headers.Headers| class constructor is now
optional. (Contributed by Pablo Torres Navarrete and SilentGhost in |:bugs.python.org/issue5800:bpo-5800|.)

## xmlrpc:xmlrpc

The |:library/xmlrpc.client.txt/xmlrpc.client.ServerProxy:client.ServerProxy| class now supports the |:glossary.txt/term-context-manager:context manager| protocol.
(Contributed by Claudiu Popa in |:bugs.python.org/issue20627:bpo-20627|.)

The |:library/xmlrpc.client.txt/xmlrpc.client.ServerProxy:client.ServerProxy| constructor now accepts an optional |:library/ssl.txt/ssl.SSLContext:ssl.SSLContext|
instance. (Contributed by Alex Gaynor in |:bugs.python.org/issue22960:bpo-22960|.)

## xml-sax:xml.sax

SAX parsers now support a character stream of the |:library/xml.sax.reader.txt/xml.sax.xmlreader.InputSource:xmlreader.InputSource|
object. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue2175:bpo-2175|.)

|:library/xml.sax.txt/xml.sax.parseString:parseString()| now accepts a |:library/stdtypes.txt/str:str| instance. (Contributed by Serhiy Storchaka
in |:bugs.python.org/issue10590:bpo-10590|.)

## zipfile:zipfile

ZIP output can now be written to unseekable streams. (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue23252:bpo-23252|.)

The *mode* argument of |:library/zipfile.txt/zipfile.ZipFile.open:ZipFile.open()| method now accepts ""x"" to request
exclusive creation. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue21717:bpo-21717|.)

# other-module-level-changes:Other module-level changes

Many functions in the |:library/mmap.txt/module-mmap:mmap|, |:library/ossaudiodev.txt/module-ossaudiodev:ossaudiodev|, |:library/socket.txt/module-socket:socket|, |:library/ssl.txt/module-ssl:ssl|, and |:library/codecs.txt/module-codecs:codecs|
modules now accept writable |:glossary.txt/term-bytes-like-object:bytes-like objects|. (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue23001:bpo-23001|.)

# optimizations:Optimizations

The |:library/os.txt/os.walk:os.walk()| function has been sped up by 3 to 5 times on POSIX systems, and
by 7 to 20 times on Windows.  This was done using the new |:library/os.txt/os.scandir:os.scandir()|
function, which exposes file information from the underlying "readdir" or "
FindFirstFile"/"FindNextFile" system calls.  (Contributed by Ben Hoyt with help
from Victor Stinner in |:bugs.python.org/issue23605:bpo-23605|.)

Construction of "bytes(int)" (filled by zero bytes) is faster and uses less
memory for large objects. "calloc()" is used instead of "malloc()" to allocate
memory for these objects. (Contributed by Victor Stinner in |:bugs.python.org/issue21233:bpo-21233|.)

Some operations on |:library/ipaddress.txt/module-ipaddress:ipaddress| |:library/ipaddress.txt/ipaddress.IPv4Network:IPv4Network| and |:library/ipaddress.txt/ipaddress.IPv6Network:IPv6Network| have been
massively sped up, such as |:library/ipaddress.txt/ipaddress.IPv4Network.subnets:subnets()|, |:library/ipaddress.txt/ipaddress.IPv4Network.supernet:supernet()|,
|:library/ipaddress.txt/ipaddress.summarize_address_range:summarize_address_range()|, |:library/ipaddress.txt/ipaddress.collapse_addresses:collapse_addresses()|. The speed up can range from
3 to 15 times. (Contributed by Antoine Pitrou, Michel Albert, and Markus in
|:bugs.python.org/issue21486:bpo-21486|, |:bugs.python.org/issue21487:bpo-21487|, |:bugs.python.org/issue20826:bpo-20826|, |:bugs.python.org/issue23266:bpo-23266|.)

Pickling of |:library/ipaddress.txt/module-ipaddress:ipaddress| objects was optimized to produce significantly smaller
output.  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue23133:bpo-23133|.)

Many operations on |:library/io.txt/io.BytesIO:io.BytesIO| are now 50% to 100% faster. (Contributed by
Serhiy Storchaka in |:bugs.python.org/issue15381:bpo-15381| and David Wilson in |:bugs.python.org/issue22003:bpo-22003|.)

The |:library/marshal.txt/marshal.dumps:marshal.dumps()| function is now faster: 65–85% with versions 3 and 4,
20–25% with versions 0 to 2 on typical data, and up to 5 times in best cases.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue20416:bpo-20416| and |:bugs.python.org/issue23344:bpo-23344|.)

The UTF-32 encoder is now 3 to 7 times faster. (Contributed by Serhiy Storchaka
in |:bugs.python.org/issue15027:bpo-15027|.)

Regular expressions are now parsed up to 10% faster. (Contributed by Serhiy
Storchaka in |:bugs.python.org/issue19380:bpo-19380|.)

The |:library/json.txt/json.dumps:json.dumps()| function was optimized to run with "ensure_ascii=False" as
fast as with "ensure_ascii=True". (Contributed by Naoki Inada in |:bugs.python.org/issue23206:bpo-23206|.)

The |:c-api/object.txt/c.PyObject_IsInstance:PyObject_IsInstance()| and |:c-api/object.txt/c.PyObject_IsSubclass:PyObject_IsSubclass()| functions have been sped
up in the common case that the second argument has |:library/functions.txt/type:type| as its metaclass.
(Contributed Georg Brandl by in |:bugs.python.org/issue22540:bpo-22540|.)

Method caching was slightly improved, yielding up to 5% performance improvement
in some benchmarks. (Contributed by Antoine Pitrou in |:bugs.python.org/issue22847:bpo-22847|.)

Objects from the |:library/random.txt/module-random:random| module now use 50% less memory on 64-bit builds.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue23488:bpo-23488|.)

The |:library/functions.txt/property:property()| getter calls are up to 25% faster. (Contributed by Joe Jevnik
in |:bugs.python.org/issue23910:bpo-23910|.)

Instantiation of |:library/fractions.txt/fractions.Fraction:fractions.Fraction| is now up to 30% faster. (Contributed by
Stefan Behnel in |:bugs.python.org/issue22464:bpo-22464|.)

String methods |:library/stdtypes.txt/str.find:find()|, |:library/stdtypes.txt/str.rfind:rfind()|, |:library/stdtypes.txt/str.split:split()|, |:library/stdtypes.txt/str.partition:partition()| and the |:reference/expressions.txt/in:in| string
operator are now significantly faster for searching 1-character substrings.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue23573:bpo-23573|.)

# build-and-c-api-changes:Build and C API Changes

New "calloc" functions were added:

* |:c-api/memory.txt/c.PyMem_RawCalloc:PyMem_RawCalloc()|,

* |:c-api/memory.txt/c.PyMem_Calloc:PyMem_Calloc()|,

* |:c-api/memory.txt/c.PyObject_Calloc:PyObject_Calloc()|.

(Contributed by Victor Stinner in |:bugs.python.org/issue21233:bpo-21233|.)

New encoding/decoding helper functions:

* |:c-api/sys.txt/c.Py_DecodeLocale:Py_DecodeLocale()| (replaced "_Py_char2wchar()"),

* |:c-api/sys.txt/c.Py_EncodeLocale:Py_EncodeLocale()| (replaced "_Py_wchar2char()").

(Contributed by Victor Stinner in |:bugs.python.org/issue18395:bpo-18395|.)

A new |:c-api/codec.txt/c.PyCodec_NameReplaceErrors:PyCodec_NameReplaceErrors()| function to replace the unicode encode error
with "\N{...}" escapes. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue19676:bpo-19676|.)

A new |:c-api/exceptions.txt/c.PyErr_FormatV:PyErr_FormatV()| function similar to |:c-api/exceptions.txt/c.PyErr_Format:PyErr_Format()|, but accepts a "
va_list" argument. (Contributed by Antoine Pitrou in |:bugs.python.org/issue18711:bpo-18711|.)

A new "PyExc_RecursionError" exception. (Contributed by Georg Brandl in
|:bugs.python.org/issue19235:bpo-19235|.)

New |:c-api/module.txt/c.PyModule_FromDefAndSpec:PyModule_FromDefAndSpec()|, |:c-api/module.txt/c.PyModule_FromDefAndSpec2:PyModule_FromDefAndSpec2()|, and
|:c-api/module.txt/c.PyModule_ExecDef:PyModule_ExecDef()| functions introduced by *|index-47:⚓|* |:www.python.org/dev/peps/pep-0489:PEP 489| – multi-
phase extension module initialization. (Contributed by Petr Viktorin in
|:bugs.python.org/issue24268:bpo-24268|.)

New |:c-api/number.txt/c.PyNumber_MatrixMultiply:PyNumber_MatrixMultiply()| and |:c-api/number.txt/c.PyNumber_InPlaceMatrixMultiply:PyNumber_InPlaceMatrixMultiply()| functions
to perform matrix multiplication. (Contributed by Benjamin Peterson in
|:bugs.python.org/issue21176:bpo-21176|.  See also *|index-48:⚓|* |:www.python.org/dev/peps/pep-0465:PEP 465| for details.)

The |:c-api/typeobj.txt/c.PyTypeObject.tp_finalize:PyTypeObject.tp_finalize| slot is now part of the stable ABI.

Windows builds now require Microsoft Visual C++ 14.0, which is available as part
of |:www.visualstudio.com:Visual Studio 2015|*|visual-studio-2015:⚓|* .

Extension modules now include a platform information tag in their filename on
some platforms (the tag is optional, and CPython will import extensions without
it, although if the tag is present and mismatched, the extension won’t be
loaded):

* On Linux, extension module filenames end with "
  .cpython-<major><minor>m-<architecture>-<os>.pyd":

  * "<major>" is the major number of the Python version; for Python 3.5 this is "3".

  * "<minor>" is the minor number of the Python version; for Python 3.5 this is "5".

  * "<architecture>" is the hardware architecture the extension module was built to
    run on. It’s most commonly either "i386" for 32-bit Intel platforms or "x86_64"
    for 64-bit Intel (and AMD) platforms.

  * "<os>" is always "linux-gnu", except for extensions built to talk to the 32-bit
    ABI on 64-bit platforms, in which case it is "linux-gnu32" (and "<architecture>"
    will be "x86_64").

* On Windows, extension module filenames end with "
  <debug>.cp<major><minor>-<platform>.pyd":

  * "<major>" is the major number of the Python version; for Python 3.5 this is "3".

  * "<minor>" is the minor number of the Python version; for Python 3.5 this is "5".

  * "<platform>" is the platform the extension module was built for, either "win32"
    for Win32, "win_amd64" for Win64, "win_ia64" for Windows Itanium 64, and "
    win_arm" for Windows on ARM.

  * If built in debug mode, "<debug>" will be "_d", otherwise it will be blank.

* On OS X platforms, extension module filenames now end with "-darwin.so".

* On all other platforms, extension module filenames are the same as they were
  with Python 3.4.

# deprecated:Deprecated## new-keywords:New Keywords

"async" and "await" are not recommended to be used as variable, class, function
or module names.  Introduced by *|index-49:⚓|* |:www.python.org/dev/peps/pep-0492:PEP 492| in Python 3.5, they
will become proper keywords in Python 3.7.

## deprecated-python-behavior:Deprecated Python Behavior

Raising the |:library/exceptions.txt/StopIteration:StopIteration| exception inside a generator will now generate a
silent |:library/exceptions.txt/PendingDeprecationWarning:PendingDeprecationWarning|, which will become a non-silent deprecation
warning in Python 3.6 and will trigger a |:library/exceptions.txt/RuntimeError:RuntimeError| in Python 3.7. See
|:whatsnew-pep-479:PEP 479: Change StopIteration handling inside generators| for details.

## unsupported-operating-systems:Unsupported Operating Systems

Windows XP is no longer supported by Microsoft, thus, per *|index-50:⚓|*
|:www.python.org/dev/peps/pep-0011:PEP 11|, CPython 3.5 is no longer officially supported on this OS.

## deprecated-python-modules-functions-and-methods:Deprecated Python modules,
functions and methods

The |:library/formatter.txt/module-formatter:formatter| module has now graduated to full deprecation and is still slated
for removal in Python 3.6.

The "asyncio.async()" function is deprecated in favor of |:library/asyncio-future.txt/asyncio.ensure_future:ensure_future()|.

The |:library/smtpd.txt/module-smtpd:smtpd| module has in the past always decoded the DATA portion of email
messages using the "utf-8" codec.  This can now be controlled by the new *
decode_data* keyword to |:library/smtpd.txt/smtpd.SMTPServer:SMTPServer|.  The default value is "True", but this
default is deprecated.  Specify the *decode_data* keyword with an appropriate
value to avoid the deprecation warning.

Directly assigning values to the |:library/http.cookies.txt/http.cookies.Morsel.key:key|, |:library/http.cookies.txt/http.cookies.Morsel.value:value| and |:library/http.cookies.txt/http.cookies.Morsel.coded_value:coded_value| of
|:library/http.cookies.txt/http.cookies.Morsel:http.cookies.Morsel| objects is deprecated.  Use the |:library/http.cookies.txt/http.cookies.Morsel.set:set()| method instead.
In addition, the undocumented *LegalChars* parameter of |:library/http.cookies.txt/http.cookies.Morsel.set:set()| is deprecated,
and is now ignored.

Passing a format string as keyword argument *format_string* to the |:library/string.txt/string.Formatter.format:format()|
method of the |:library/string.txt/string.Formatter:string.Formatter| class has been deprecated. (Contributed by
Serhiy Storchaka in |:bugs.python.org/issue23671:bpo-23671|.)

The "platform.dist()" and "platform.linux_distribution()" functions are now
deprecated.  Linux distributions use too many different ways of describing
themselves, so the functionality is left to a package. (Contributed by Vajrasky
Kok and Berker Peksag in |:bugs.python.org/issue1322:bpo-1322|.)

The previously undocumented "from_function" and "from_builtin" methods of
|:library/inspect.txt/inspect.Signature:inspect.Signature| are deprecated.  Use the new |:library/inspect.txt/inspect.Signature.from_callable:Signature.from_callable()|
method instead. (Contributed by Yury Selivanov in |:bugs.python.org/issue24248:bpo-24248|.)

The |:library/inspect.txt/inspect.getargspec:inspect.getargspec()| function is deprecated and scheduled to be removed in
Python 3.6.  (See |:bugs.python.org/issue20438:bpo-20438| for details.)

The |:library/inspect.txt/module-inspect:inspect| |:library/inspect.txt/inspect.getfullargspec:getfullargspec()|, |:library/inspect.txt/inspect.getcallargs:getcallargs()|, and |:library/inspect.txt/inspect.formatargspec:formatargspec()|
functions are deprecated in favor of the |:library/inspect.txt/inspect.signature:inspect.signature()| API. (Contributed
by Yury Selivanov in |:bugs.python.org/issue20438:bpo-20438|.)

|:library/inspect.txt/inspect.getargvalues:getargvalues()| and |:library/inspect.txt/inspect.formatargvalues:formatargvalues()| functions were inadvertently marked as
deprecated with the release of Python 3.5.0.

Use of |:library/re.txt/re.LOCALE:re.LOCALE| flag with str patterns or |:library/re.txt/re.ASCII:re.ASCII| is now deprecated.
(Contributed by Serhiy Storchaka in |:bugs.python.org/issue22407:bpo-22407|.)

Use of unrecognized special sequences consisting of "'\'" and an ASCII letter in
regular expression patterns and replacement patterns now raises a deprecation
warning and will be forbidden in Python 3.6. (Contributed by Serhiy Storchaka in
|:bugs.python.org/issue23622:bpo-23622|.)

The undocumented and unofficial *use_load_tests* default argument of the
|:library/unittest.txt/unittest.TestLoader.loadTestsFromModule:unittest.TestLoader.loadTestsFromModule()| method now is deprecated and
ignored. (Contributed by Robert Collins and Barry A. Warsaw in |:bugs.python.org/issue16662:bpo-16662|.)

# removed:Removed## api-and-feature-removals:API and Feature Removals

The following obsolete and previously deprecated APIs and features have been
removed:

* The "__version__" attribute has been dropped from the email package.  The email
  code hasn’t been shipped separately from the stdlib for a long time, and the "
  __version__" string was not updated in the last few releases.

* The internal "Netrc" class in the |:library/ftplib.txt/module-ftplib:ftplib| module was deprecated in 3.4, and has
  now been removed. (Contributed by Matt Chaput in |:bugs.python.org/issue6623:bpo-6623|.)

* The concept of ".pyo" files has been removed.

* The JoinableQueue class in the provisional |:library/asyncio.txt/module-asyncio:asyncio| module was deprecated in
  3.4.4 and is now removed. (Contributed by A. Jesse Jiryu Davis in |:bugs.python.org/issue23464:bpo-23464|.)

# porting-to-python-3-5:Porting to Python 3.5

This section lists previously described changes and other bugfixes that may
require changes to your code.

## changes-in-python-behavior:Changes in Python behavior

* Due to an oversight, earlier Python versions erroneously accepted the following
  syntax:

```rst
f(1 for x in [1], *args)
f(1 for x in [1], **kwargs)
```

  Python 3.5 now correctly raises a |:library/exceptions.txt/SyntaxError:SyntaxError|, as generator expressions must
  be put in parentheses if not a sole argument to a function.

## changes-in-the-python-api:Changes in the Python API

* *|index-51:⚓|* |:www.python.org/dev/peps/pep-0475:PEP 475|: System calls are now retried when interrupted by a
  signal instead of raising |:library/exceptions.txt/InterruptedError:InterruptedError| if the Python signal handler does
  not raise an exception.

* Before Python 3.5, a |:library/datetime.txt/datetime.time:datetime.time| object was considered to be false if it
  represented midnight in UTC.  This behavior was considered obscure and error-
  prone and has been removed in Python 3.5.  See |:bugs.python.org/issue13936:bpo-13936| for full details.

* The "ssl.SSLSocket.send()" method now raises either |:library/ssl.txt/ssl.SSLWantReadError:ssl.SSLWantReadError| or
  |:library/ssl.txt/ssl.SSLWantWriteError:ssl.SSLWantWriteError| on a non-blocking socket if the operation would block.
  Previously, it would return "0".  (Contributed by Nikolaus Rath in |:bugs.python.org/issue20951:bpo-20951|.)

* The "__name__" attribute of generators is now set from the function name,
  instead of being set from the code name. Use "gen.gi_code.co_name" to retrieve
  the code name. Generators also have a new "__qualname__" attribute, the
  qualified name, which is now used for the representation of a generator ("
  repr(gen)"). (Contributed by Victor Stinner in |:bugs.python.org/issue21205:bpo-21205|.)

* The deprecated “strict” mode and argument of |:library/html.parser.txt/html.parser.HTMLParser:HTMLParser|, "HTMLParser.error()",
  and the "HTMLParserError" exception have been removed.  (Contributed by Ezio
  Melotti in |:bugs.python.org/issue15114:bpo-15114|.) The *convert_charrefs* argument of |:library/html.parser.txt/html.parser.HTMLParser:HTMLParser| is now
  "True" by default.  (Contributed by Berker Peksag in |:bugs.python.org/issue21047:bpo-21047|.)

* Although it is not formally part of the API, it is worth noting for porting
  purposes (ie: fixing tests) that error messages that were previously of the form
  “‘sometype’ does not support the buffer protocol” are now of the form “a
  |:glossary.txt/term-bytes-like-object:bytes-like object| is required, not ‘sometype’”. (Contributed by Ezio Melotti
  in |:bugs.python.org/issue16518:bpo-16518|.)

* If the current directory is set to a directory that no longer exists then
  |:library/exceptions.txt/FileNotFoundError:FileNotFoundError| will no longer be raised and instead |:library/importlib.txt/importlib.machinery.FileFinder.find_spec:find_spec()| will
  return "None" *without* caching "None" in |:library/sys.txt/sys.path_importer_cache:sys.path_importer_cache|, which is
  different than the typical case (|:bugs.python.org/issue22834:bpo-22834|).

* HTTP status code and messages from |:library/http.client.txt/module-http.client:http.client| and |:library/http.server.txt/module-http.server:http.server| were
  refactored into a common |:library/http.txt/http.HTTPStatus:HTTPStatus| enum.  The values in |:library/http.client.txt/module-http.client:http.client| and
  |:library/http.server.txt/module-http.server:http.server| remain available for backwards compatibility.  (Contributed by
  Demian Brecht in |:bugs.python.org/issue21793:bpo-21793|.)

* When an import loader defines "importlib.machinery.Loader.exec_module()" it is
  now expected to also define "create_module()" (raises a |:library/exceptions.txt/DeprecationWarning:DeprecationWarning|
  now, will be an error in Python 3.6). If the loader inherits from
  |:library/importlib.txt/importlib.abc.Loader:importlib.abc.Loader| then there is nothing to do, else simply define "
  create_module()" to return "None".  (Contributed by Brett Cannon in |:bugs.python.org/issue23014:bpo-23014|
  .)

* The |:library/re.txt/re.split:re.split()| function always ignored empty pattern matches, so the ""x*""
  pattern worked the same as ""x+"", and the ""\b"" pattern never worked.  Now
  |:library/re.txt/re.split:re.split()| raises a warning if the pattern could match an empty string.  For
  compatibility, use patterns that never match an empty string (e.g. ""x+""
  instead of ""x*"").  Patterns that could only match an empty string (such as "
  "\b"") now raise an error. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue22818:bpo-22818|.)

* The |:library/http.cookies.txt/http.cookies.Morsel:http.cookies.Morsel| dict-like interface has been made self consistent:
  morsel comparison now takes the |:library/http.cookies.txt/http.cookies.Morsel.key:key| and |:library/http.cookies.txt/http.cookies.Morsel.value:value| into account, |:library/http.cookies.txt/http.cookies.Morsel.copy:copy()| now
  results in a |:library/http.cookies.txt/http.cookies.Morsel:Morsel| instance rather than a |:library/stdtypes.txt/dict:dict|, and |:library/http.cookies.txt/http.cookies.Morsel.update:update()| will now
  raise an exception if any of the keys in the update dictionary are invalid.  In
  addition, the undocumented *LegalChars* parameter of |:library/http.cookies.txt/http.cookies.Morsel.set:set()| is deprecated and
  is now ignored.  (Contributed by Demian Brecht in |:bugs.python.org/issue2211:bpo-2211|.)

* *|index-52:⚓|* |:www.python.org/dev/peps/pep-0488:PEP 488| has removed ".pyo" files from Python and introduced the
  optional "opt-" tag in ".pyc" file names. The
  |:library/importlib.txt/importlib.util.cache_from_source:importlib.util.cache_from_source()| has gained an *optimization* parameter to
  help control the "opt-" tag. Because of this, the *debug_override* parameter of
  the function is now deprecated. *.pyo* files are also no longer supported as a
  file argument to the Python interpreter and thus serve no purpose when
  distributed on their own (i.e. sourceless code distribution). Due to the fact
  that the magic number for bytecode has changed in Python 3.5, all old *.pyo*
  files from previous versions of Python are invalid regardless of this PEP.

* The |:library/socket.txt/module-socket:socket| module now exports the |:library/socket.txt/socket.CAN_RAW_FD_FRAMES:CAN_RAW_FD_FRAMES| constant on linux 3.6
  and greater.

* The |:library/ssl.txt/ssl.cert_time_to_seconds:ssl.cert_time_to_seconds()| function now interprets the input time as UTC
  and not as local time, per *|index-53:⚓|* |:tools.ietf.org/html/rfc5280.html:RFC 5280|.  Additionally, the return
  value is always an |:library/functions.txt/int:int|. (Contributed by Akira Li in |:bugs.python.org/issue19940:bpo-19940|.)

* The "pygettext.py" Tool now uses the standard +NNNN format for timezones in the
  POT-Creation-Date header.

* The |:library/smtplib.txt/module-smtplib:smtplib| module now uses |:library/sys.txt/sys.stderr:sys.stderr| instead of the previous module-level
  "stderr" variable for debug output.  If your (test) program depends on patching
  the module-level variable to capture the debug output, you will need to update
  it to capture sys.stderr instead.

* The |:library/stdtypes.txt/str.startswith:str.startswith()| and |:library/stdtypes.txt/str.endswith:str.endswith()| methods no longer return "True" when
  finding the empty string and the indexes are completely out of range.
  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue24284:bpo-24284|.)

* The |:library/inspect.txt/inspect.getdoc:inspect.getdoc()| function now returns documentation strings inherited from
  base classes.  Documentation strings no longer need to be duplicated if the
  inherited documentation is appropriate.  To suppress an inherited string, an
  empty string must be specified (or the documentation may be filled in).  This
  change affects the output of the |:library/pydoc.txt/module-pydoc:pydoc| module and the |:library/functions.txt/help:help()| function.
  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue15582:bpo-15582|.)

* Nested |:library/functools.txt/functools.partial:functools.partial()| calls are now flattened.  If you were relying on
  the previous behavior, you can now either add an attribute to a
  |:library/functools.txt/functools.partial:functools.partial()| object or you can create a subclass of
  |:library/functools.txt/functools.partial:functools.partial()|. (Contributed by Alexander Belopolsky in |:bugs.python.org/issue7830:bpo-7830|.)

## changes-in-the-c-api:Changes in the C API

* The undocumented "format" member of the (non-public) "PyMemoryViewObject"
  structure has been removed. All extensions relying on the relevant parts in "
  memoryobject.h" must be rebuilt.

* The "PyMemAllocator" structure was renamed to |:c-api/memory.txt/c.PyMemAllocatorEx:PyMemAllocatorEx| and a new "
  calloc" field was added.

* Removed non-documented macro "PyObject_REPR" which leaked references. Use format
  character "%R" in |:c-api/unicode.txt/c.PyUnicode_FromFormat:PyUnicode_FromFormat()|-like functions to format the |:library/functions.txt/repr:repr()|
  of the object. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue22453:bpo-22453|.)

* Because the lack of the "__module__" attribute breaks pickling and
  introspection, a deprecation warning is now raised for builtin types without the
  "__module__" attribute.  This would be an AttributeError in the future.
  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue20204:bpo-20204|.)

* As part of the *|index-54:⚓|* |:www.python.org/dev/peps/pep-0492:PEP 492| implementation, the "tp_reserved" slot
  of |:c-api/type.txt/c.PyTypeObject:PyTypeObject| was replaced with a "tp_as_async" slot.  Refer to
  |:c-api/coro.txt/coro-objects:Coroutine Objects| for new types, structures and functions.

# notable-changes-in-python-3-5-4:Notable changes in Python 3.5.4## new-make-
regen-all-build-target:New "make regen-all" build target

To simplify cross-compilation, and to ensure that CPython can reliably be
compiled without requiring an existing version of Python to already be
available, the autotools-based build system no longer attempts to implicitly
recompile generated files based on file modification times.

Instead, a new "make regen-all" command has been added to force regeneration of
these files when desired (e.g. after an initial version of Python has already
been built based on the pregenerated versions).

More selective regeneration targets are also defined - see |:github.com/python/cpython/tree/3.8/Makefile.pre.in:Makefile.pre.in| for
details.

(Contributed by Victor Stinner in |:bugs.python.org/issue23404:bpo-23404|.)

New in version 3.5.4.

## removal-of-make-touch-build-target:Removal of "make touch" build target

The "make touch" build target previously used to request implicit regeneration
of generated files by updating their modification times has been removed.

It has been replaced by the new "make regen-all" target.

(Contributed by Victor Stinner in |:bugs.python.org/issue23404:bpo-23404|.)

Changed in version 3.5.4.



