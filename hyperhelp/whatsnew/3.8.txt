%hyperhelp title="What’s New In Python 3.8" date="2021-07-11"
*|what-s-new-in-python-3-8:⚓|*

Editor:
   Raymond Hettinger

This article explains the new features in Python 3.8, compared to 3.7. For full
details, see the |:whatsnew/changelog.txt/changelog:changelog|.

Python 3.8 was released on October 14th, 2019.

# summary-release-highlights:Summary – Release highlights# new-features:New
Features## assignment-expressions:Assignment expressions

There is new syntax ":=" that assigns values to variables as part of a larger
expression. It is affectionately known as “the walrus operator” due to its
resemblance to
|:en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168).jpg:the eyes and tusks of a walrus|*|the-
eyes-and-tusks-of-a-walrus:⚓|* .

In this example, the assignment expression helps avoid calling |:library/functions.txt/len:len()| twice:

```rst
if (n := len(a)) > 10:
    print(f"List is too long ({n} elements, expected <= 10)")
```

A similar benefit arises during regular expression matching where match objects
are needed twice, once to test whether a match occurred and another to extract a
subgroup:

```rst
discount = 0.0
if (mo := re.search(r'(\d+)% discount', advertisement)):
    discount = float(mo.group(1)) / 100.0
```

The operator is also useful with while-loops that compute a value to test loop
termination and then need that same value again in the body of the loop:

```rst
# Loop over fixed length blocks
while (block := f.read(256)) != '':
    process(block)
```

Another motivating use case arises in list comprehensions where a value computed
in a filtering condition is also needed in the expression body:

```rst
[clean_name.title() for name in names
 if (clean_name := normalize('NFC', name)) in allowed_names]
```

Try to limit use of the walrus operator to clean cases that reduce complexity
and improve readability.

See *|index-0:⚓|* |:www.python.org/dev/peps/pep-0572:PEP 572| for a full description.

(Contributed by Emily Morehouse in |:bugs.python.org/issue35224:bpo-35224|.)

## positional-only-parameters:Positional-only parameters

There is a new function parameter syntax "/" to indicate that some function
parameters must be specified positionally and cannot be used as keyword
arguments.  This is the same notation shown by "help()" for C functions
annotated with Larry Hastings’ |:docs.python.org/3/howto/clinic.html:Argument Clinic|*|argument-clinic:⚓|*  tool.

In the following example, parameters *a* and *b* are positional-only, while *c*
or *d* can be positional or keyword, and *e* or *f* are required to be keywords:

```rst
def f(a, b, /, c, d, *, e, f):
    print(a, b, c, d, e, f)
```

The following is a valid call:

```rst
f(10, 20, 30, d=40, e=50, f=60)
```

However, these are invalid calls:

```rst
f(10, b=20, c=30, d=40, e=50, f=60)   # b cannot be a keyword argument
f(10, 20, 30, 40, 50, f=60)           # e must be a keyword argument
```

One use case for this notation is that it allows pure Python functions to fully
emulate behaviors of existing C coded functions.  For example, the built-in
|:library/functions.txt/divmod:divmod()| function does not accept keyword arguments:

```rst
def divmod(a, b, /):
    "Emulate the built in divmod() function"
    return (a // b, a % b)
```

Another use case is to preclude keyword arguments when the parameter name is not
helpful.  For example, the builtin |:library/functions.txt/len:len()| function has the signature "len(obj,
/)".  This precludes awkward calls such as:

```rst
len(obj='hello')  # The "obj" keyword argument impairs readability
```

A further benefit of marking a parameter as positional-only is that it allows
the parameter name to be changed in the future without risk of breaking client
code.  For example, in the |:library/statistics.txt/module-statistics:statistics| module, the parameter name *dist* may be
changed in the future.  This was made possible with the following function
specification:

```rst
def quantiles(dist, /, *, n=4, method='exclusive')
    ...
```

Since the parameters to the left of "/" are not exposed as possible keywords,
the parameters names remain available for use in "**kwargs":

```rst
>>> def f(a, b, /, **kwargs):
...     print(a, b, kwargs)
...
>>> f(10, 20, a=1, b=2, c=3)         # a and b are used in two ways
10 20 {'a': 1, 'b': 2, 'c': 3}
```

This greatly simplifies the implementation of functions and methods that need to
accept arbitrary keyword arguments.  For example, here is an excerpt from code
in the |:library/collections.txt/module-collections:collections| module:

```rst
class Counter(dict):

    def __init__(self, iterable=None, /, **kwds):
        # Note "iterable" is a possible keyword argument
```

See *|index-1:⚓|* |:www.python.org/dev/peps/pep-0570:PEP 570| for a full description.

(Contributed by Pablo Galindo in |:bugs.python.org/issue36540:bpo-36540|.)

## parallel-filesystem-cache-for-compiled-bytecode-files:Parallel filesystem
cache for compiled bytecode files

The new *|index-2:⚓|* |:using/cmdline.txt/envvar-PYTHONPYCACHEPREFIX:PYTHONPYCACHEPREFIX| setting (also available as |:using/cmdline.txt/cmdoption-X:-X| "
pycache_prefix") configures the implicit bytecode cache to use a separate
parallel filesystem tree, rather than the default "__pycache__" subdirectories
within each source directory.

The location of the cache is reported in |:library/sys.txt/sys.pycache_prefix:sys.pycache_prefix| (|:library/constants.txt/None:None| indicates
the default location in "__pycache__" subdirectories).

(Contributed by Carl Meyer in |:bugs.python.org/issue33499:bpo-33499|.)

## debug-build-uses-the-same-abi-as-release-build:Debug build uses the same ABI
as release build

Python now uses the same ABI whether it’s built in release or debug mode. On
Unix, when Python is built in debug mode, it is now possible to load C
extensions built in release mode and C extensions built using the stable ABI.

Release builds and debug builds are now ABI compatible: defining the "Py_DEBUG"
macro no longer implies the "Py_TRACE_REFS" macro, which introduces the only ABI
incompatibility. The "Py_TRACE_REFS" macro, which adds the "sys.getobjects()"
function and the *|index-3:⚓|* |:using/cmdline.txt/envvar-PYTHONDUMPREFS:PYTHONDUMPREFS| environment variable, can be set
using the new "./configure --with-trace-refs" build option. (Contributed by
Victor Stinner in |:bugs.python.org/issue36465:bpo-36465|.)

On Unix, C extensions are no longer linked to libpython except on Android and
Cygwin. It is now possible for a statically linked Python to load a C extension
built using a shared library Python. (Contributed by Victor Stinner in
|:bugs.python.org/issue21536:bpo-21536|.)

On Unix, when Python is built in debug mode, import now also looks for C
extensions compiled in release mode and for C extensions compiled with the
stable ABI. (Contributed by Victor Stinner in |:bugs.python.org/issue36722:bpo-36722|.)

To embed Python into an application, a new "--embed" option must be passed to "
python3-config --libs --embed" to get "-lpython3.8" (link the application to
libpython). To support both 3.8 and older, try "python3-config --libs --embed"
first and fallback to "python3-config --libs" (without "--embed") if the
previous command fails.

Add a pkg-config "python-3.8-embed" module to embed Python into an application:
"pkg-config python-3.8-embed --libs" includes "-lpython3.8". To support both 3.8
and older, try "pkg-config python-X.Y-embed --libs" first and fallback to "pkg-
config python-X.Y --libs" (without "--embed") if the previous command fails
(replace "X.Y" with the Python version).

On the other hand, "pkg-config python3.8 --libs" no longer contains "-lpython3.8
". C extensions must not be linked to libpython (except on Android and Cygwin,
whose cases are handled by the script); this change is backward incompatible on
purpose. (Contributed by Victor Stinner in |:bugs.python.org/issue36721:bpo-36721|.)

## f-strings-support-for-self-documenting-expressions-and-debugging:f-strings
support "=" for self-documenting expressions and debugging

Added an "=" specifier to |:glossary.txt/term-f-string:f-string|s. An f-string such as "f'{expr=}'" will
expand to the text of the expression, an equal sign, then the representation of
the evaluated expression.  For example:

```python
>>> user = 'eric_idle'
>>> member_since = date(1975, 7, 31)
>>> f'{user=} {member_since=}'
"user='eric_idle' member_since=datetime.date(1975, 7, 31)"
```

The usual |:reference/lexical_analysis.txt/f-strings:f-string format specifiers| allow more control over how the result of
the expression is displayed:

```rst
>>> delta = date.today() - member_since
>>> f'{user=!s}  {delta.days=:,d}'
'user=eric_idle  delta.days=16,075'
```

The "=" specifier will display the whole expression so that calculations can be
shown:

```rst
>>> print(f'{theta=}  {cos(radians(theta))=:.3f}')
theta=30  cos(radians(theta))=0.866
```

(Contributed by Eric V. Smith and Larry Hastings in |:bugs.python.org/issue36817:bpo-36817|.)

## pep-578-python-runtime-audit-hooks:PEP 578: Python Runtime Audit Hooks

The PEP adds an Audit Hook and Verified Open Hook. Both are available from
Python and native code, allowing applications and frameworks written in pure
Python code to take advantage of extra notifications, while also allowing
embedders or system administrators to deploy builds of Python where auditing is
always enabled.

See *|index-4:⚓|* |:www.python.org/dev/peps/pep-0578:PEP 578| for full details.

## pep-587-python-initialization-configuration:PEP 587: Python Initialization
Configuration

The *|index-5:⚓|* |:www.python.org/dev/peps/pep-0587:PEP 587| adds a new C API to configure the Python
Initialization providing finer control on the whole configuration and better
error reporting.

New structures:

* |:c-api/init_config.txt/c.PyConfig:PyConfig|

* |:c-api/init_config.txt/c.PyPreConfig:PyPreConfig|

* |:c-api/init_config.txt/c.PyStatus:PyStatus|

* |:c-api/init_config.txt/c.PyWideStringList:PyWideStringList|

New functions:

* "PyConfig_Clear()"

* "PyConfig_InitIsolatedConfig()"

* "PyConfig_InitPythonConfig()"

* "PyConfig_Read()"

* "PyConfig_SetArgv()"

* "PyConfig_SetBytesArgv()"

* "PyConfig_SetBytesString()"

* "PyConfig_SetString()"

* "PyPreConfig_InitIsolatedConfig()"

* "PyPreConfig_InitPythonConfig()"

* "PyStatus_Error()"

* "PyStatus_Exception()"

* "PyStatus_Exit()"

* "PyStatus_IsError()"

* "PyStatus_IsExit()"

* "PyStatus_NoMemory()"

* "PyStatus_Ok()"

* "PyWideStringList_Append()"

* "PyWideStringList_Insert()"

* |:c-api/veryhigh.txt/c.Py_BytesMain:Py_BytesMain()|

* "Py_ExitStatusException()"

* |:c-api/init_config.txt/c.Py_InitializeFromConfig:Py_InitializeFromConfig()|

* |:c-api/init_config.txt/c.Py_PreInitialize:Py_PreInitialize()|

* |:c-api/init_config.txt/c.Py_PreInitializeFromArgs:Py_PreInitializeFromArgs()|

* |:c-api/init_config.txt/c.Py_PreInitializeFromBytesArgs:Py_PreInitializeFromBytesArgs()|

* |:c-api/init_config.txt/c.Py_RunMain:Py_RunMain()|

This PEP also adds "_PyRuntimeState.preconfig" (|:c-api/init_config.txt/c.PyPreConfig:PyPreConfig| type) and "
PyInterpreterState.config" (|:c-api/init_config.txt/c.PyConfig:PyConfig| type) fields to these internal
structures. "PyInterpreterState.config" becomes the new reference configuration,
replacing global configuration variables and other private variables.

See |:c-api/init_config.txt/init-config:Python Initialization Configuration| for the documentation.

See *|index-6:⚓|* |:www.python.org/dev/peps/pep-0587:PEP 587| for a full description.

(Contributed by Victor Stinner in |:bugs.python.org/issue36763:bpo-36763|.)

## vectorcall-a-fast-calling-protocol-for-cpython:Vectorcall: a fast calling
protocol for CPython

The “vectorcall” protocol is added to the Python/C API. It is meant to formalize
existing optimizations which were already done for various classes. Any
extension type implementing a callable can use this protocol.

This is currently provisional. The aim is to make it fully public in Python 3.9.

See *|index-7:⚓|* |:www.python.org/dev/peps/pep-0590:PEP 590| for a full description.

(Contributed by Jeroen Demeyer and Mark Shannon in |:bugs.python.org/issue36974:bpo-36974|.)

## pickle-protocol-5-with-out-of-band-data-buffers:Pickle protocol 5 with out-
of-band data buffers

When |:library/pickle.txt/module-pickle:pickle| is used to transfer large data between Python processes in order
to take advantage of multi-core or multi-machine processing, it is important to
optimize the transfer by reducing memory copies, and possibly by applying custom
techniques such as data-dependent compression.

The |:library/pickle.txt/module-pickle:pickle| protocol 5 introduces support for out-of-band buffers where
*|index-8:⚓|* |:www.python.org/dev/peps/pep-3118:PEP 3118|-compatible data can be transmitted separately from the
main pickle stream, at the discretion of the communication layer.

See *|index-9:⚓|* |:www.python.org/dev/peps/pep-0574:PEP 574| for a full description.

(Contributed by Antoine Pitrou in |:bugs.python.org/issue36785:bpo-36785|.)

# other-language-changes:Other Language Changes

* A |:reference/simple_stmts.txt/continue:continue| statement was illegal in the |:reference/compound_stmts.txt/finally:finally| clause due to a problem with
  the implementation.  In Python 3.8 this restriction was lifted. (Contributed by
  Serhiy Storchaka in |:bugs.python.org/issue32489:bpo-32489|.)

* The |:library/functions.txt/bool:bool|, |:library/functions.txt/int:int|, and |:library/fractions.txt/fractions.Fraction:fractions.Fraction| types now have an
  |:library/stdtypes.txt/int.as_integer_ratio:as_integer_ratio()| method like that found in |:library/functions.txt/float:float| and |:library/decimal.txt/decimal.Decimal:decimal.Decimal|.
  This minor API extension makes it possible to write "numerator, denominator =
  x.as_integer_ratio()" and have it work across multiple numeric types.
  (Contributed by Lisa Roach in |:bugs.python.org/issue33073:bpo-33073| and Raymond Hettinger in |:bugs.python.org/issue37819:bpo-37819|.)

* Constructors of |:library/functions.txt/int:int|, |:library/functions.txt/float:float| and |:library/functions.txt/complex:complex| will now use the |:reference/datamodel.txt/object.__index__:__index__()|
  special method, if available and the corresponding method |:reference/datamodel.txt/object.__int__:__int__()|,
  |:reference/datamodel.txt/object.__float__:__float__()| or |:reference/datamodel.txt/object.__complex__:__complex__()| is not available. (Contributed by Serhiy
  Storchaka in |:bugs.python.org/issue20092:bpo-20092|.)

* Added support of "\N{name}" escapes in |:library/re.txt/module-re:regular expressions|:

```rst
>>> notice = 'Copyright © 2019'
>>> copyright_year_pattern = re.compile(r'\N{copyright sign}\s*(\d{4})')
>>> int(copyright_year_pattern.search(notice).group(1))
2019
```

  (Contributed by Jonathan Eunice and Serhiy Storchaka in |:bugs.python.org/issue30688:bpo-30688|.)

* Dict and dictviews are now iterable in reversed insertion order using
  |:library/functions.txt/reversed:reversed()|. (Contributed by Rémi Lapeyre in |:bugs.python.org/issue33462:bpo-33462|.)

* The syntax allowed for keyword names in function calls was further restricted.
  In particular, "f((keyword)=arg)" is no longer allowed. It was never intended to
  permit more than a bare name on the left-hand side of a keyword argument
  assignment term. (Contributed by Benjamin Peterson in |:bugs.python.org/issue34641:bpo-34641|.)

* Generalized iterable unpacking in |:reference/simple_stmts.txt/yield:yield| and |:reference/simple_stmts.txt/return:return| statements no longer
  requires enclosing parentheses. This brings the *yield* and *return* syntax into
  better agreement with normal assignment syntax:

```rst
>>> def parse(family):
        lastname, *members = family.split()
        return lastname.upper(), *members

>>> parse('simpsons homer marge bart lisa sally')
('SIMPSONS', 'homer', 'marge', 'bart', 'lisa', 'sally')
```

  (Contributed by David Cuthbert and Jordan Chapman in |:bugs.python.org/issue32117:bpo-32117|.)

* When a comma is missed in code such as "[(10, 20) (30, 40)]", the compiler
  displays a |:library/exceptions.txt/SyntaxWarning:SyntaxWarning| with a helpful suggestion. This improves on just
  having a |:library/exceptions.txt/TypeError:TypeError| indicating that the first tuple was not callable.
  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue15248:bpo-15248|.)

* Arithmetic operations between subclasses of |:library/datetime.txt/datetime.date:datetime.date| or
  |:library/datetime.txt/datetime.datetime:datetime.datetime| and |:library/datetime.txt/datetime.timedelta:datetime.timedelta| objects now return an instance of
  the subclass, rather than the base class. This also affects the return type of
  operations whose implementation (directly or indirectly) uses
  |:library/datetime.txt/datetime.timedelta:datetime.timedelta| arithmetic, such as |:library/datetime.txt/datetime.datetime.astimezone:astimezone()|. (Contributed by Paul
  Ganssle in |:bugs.python.org/issue32417:bpo-32417|.)

* When the Python interpreter is interrupted by Ctrl-C (SIGINT) and the resulting
  |:library/exceptions.txt/KeyboardInterrupt:KeyboardInterrupt| exception is not caught, the Python process now exits via a
  SIGINT signal or with the correct exit code such that the calling process can
  detect that it died due to a Ctrl-C.  Shells on POSIX and Windows use this to
  properly terminate scripts in interactive sessions. (Contributed by Google via
  Gregory P. Smith in |:bugs.python.org/issue1054041:bpo-1054041|.)

* Some advanced styles of programming require updating the |:library/types.txt/types.CodeType:types.CodeType| object
  for an existing function.  Since code objects are immutable, a new code object
  needs to be created, one that is modeled on the existing code object.  With 19
  parameters, this was somewhat tedious.  Now, the new "replace()" method makes it
  possible to create a clone with a few altered parameters.

  Here’s an example that alters the |:library/statistics.txt/statistics.mean:statistics.mean()| function to prevent the *
  data* parameter from being used as a keyword argument:

```rst
>>> from statistics import mean
>>> mean(data=[10, 20, 90])
40
>>> mean.__code__ = mean.__code__.replace(co_posonlyargcount=1)
>>> mean(data=[10, 20, 90])
Traceback (most recent call last):
  ...
TypeError: mean() got some positional-only arguments passed as keyword arguments: 'data'
```

  (Contributed by Victor Stinner in |:bugs.python.org/issue37032:bpo-37032|.)

* For integers, the three-argument form of the |:library/functions.txt/pow:pow()| function now permits the
  exponent to be negative in the case where the base is relatively prime to the
  modulus. It then computes a modular inverse to the base when the exponent is "-1
  ", and a suitable power of that inverse for other negative exponents.  For
  example, to compute the |:en.wikipedia.org/wiki/Modular_multiplicative_inverse:modular multiplicative inverse|*|modular-
  multiplicative-inverse:⚓|*  of 38 modulo 137, write:

```rst
>>> pow(38, -1, 137)
119
>>> 119 * 38 % 137
1
```

  Modular inverses arise in the solution of |:en.wikipedia.org/wiki/Diophantine_equation:linear Diophantine
equations|
  *|linear-diophantine-equations:⚓|* . For example, to find integer solutions for
  "4258𝑥 + 147𝑦 = 369", first rewrite as "4258𝑥 ≡ 369 (mod 147)" then solve:

```python
>>> x = 369 * pow(4258, -1, 147) % 147
>>> y = (4258 * x - 369) // -147
>>> 4258 * x + 147 * y
369
```

  (Contributed by Mark Dickinson in |:bugs.python.org/issue36027:bpo-36027|.)

* Dict comprehensions have been synced-up with dict literals so that the key is
  computed first and the value second:

```rst
>>> # Dict comprehension
>>> cast = {input('role? '): input('actor? ') for i in range(2)}
role? King Arthur
actor? Chapman
role? Black Knight
actor? Cleese

>>> # Dict literal
>>> cast = {input('role? '): input('actor? ')}
role? Sir Robin
actor? Eric Idle
```

  The guaranteed execution order is helpful with assignment expressions because
  variables assigned in the key expression will be available in the value
  expression:

```rst
>>> names = ['Martin von Löwis', 'Łukasz Langa', 'Walter Dörwald']
>>> {(n := normalize('NFC', name)).casefold() : n for name in names}
{'martin von löwis': 'Martin von Löwis',
 'łukasz langa': 'Łukasz Langa',
 'walter dörwald': 'Walter Dörwald'}
```

  (Contributed by Jörn Heissler in |:bugs.python.org/issue35224:bpo-35224|.)

* The |:library/pickle.txt/object.__reduce__:object.__reduce__()| method can now return a tuple from two to six elements
  long. Formerly, five was the limit.  The new, optional sixth element is a
  callable with a "(obj, state)" signature.  This allows the direct control over
  the state-updating behavior of a specific object.  If not *None*, this callable
  will have priority over the object’s "__setstate__()" method. (Contributed by
  Pierre Glaser and Olivier Grisel in |:bugs.python.org/issue35900:bpo-35900|.)

# new-modules:New Modules

* The new "importlib.metadata" module provides (provisional) support for reading
  metadata from third-party packages.  For example, it can extract an installed
  package’s version number, list of entry points, and more:

```rst
>>> # Note following example requires that the popular "requests"
>>> # package has been installed.
>>>
>>> from importlib.metadata import version, requires, files
>>> version('requests')
'2.22.0'
>>> list(requires('requests'))
['chardet (<3.1.0,>=3.0.2)']
>>> list(files('requests'))[:5]
[PackagePath('requests-2.22.0.dist-info/INSTALLER'),
 PackagePath('requests-2.22.0.dist-info/LICENSE'),
 PackagePath('requests-2.22.0.dist-info/METADATA'),
 PackagePath('requests-2.22.0.dist-info/RECORD'),
 PackagePath('requests-2.22.0.dist-info/WHEEL')]
```

  (Contributed by Barry Warsaw and Jason R. Coombs in |:bugs.python.org/issue34632:bpo-34632|.)

# improved-modules:Improved Modules## ast:ast

AST nodes now have "end_lineno" and "end_col_offset" attributes, which give the
precise location of the end of the node.  (This only applies to nodes that have
"lineno" and "col_offset" attributes.)

New function |:library/ast.txt/ast.get_source_segment:ast.get_source_segment()| returns the source code for a specific
AST node.

(Contributed by Ivan Levkivskyi in |:bugs.python.org/issue33416:bpo-33416|.)

The |:library/ast.txt/ast.parse:ast.parse()| function has some new flags:

* "type_comments=True" causes it to return the text of *|index-10:⚓|* |:www.python.org/dev/peps/pep-0484:PEP 484|
  and *|index-11:⚓|* |:www.python.org/dev/peps/pep-0526:PEP 526| type comments associated with certain AST nodes;

* "mode='func_type'" can be used to parse *|index-12:⚓|* |:www.python.org/dev/peps/pep-0484:PEP 484| “signature type
  comments” (returned for function definition AST nodes);

* "feature_version=(3, N)" allows specifying an earlier Python 3 version.  For
  example, "feature_version=(3, 4)" will treat |:reference/compound_stmts.txt/async:async| and |:reference/expressions.txt/await:await| as non-reserved
  words.

(Contributed by Guido van Rossum in |:bugs.python.org/issue35766:bpo-35766|.)

## asyncio:asyncio

|:library/asyncio-task.txt/asyncio.run:asyncio.run()| has graduated from the provisional to stable API. This function
can be used to execute a |:glossary.txt/term-coroutine:coroutine| and return the result while automatically
managing the event loop. For example:

```rst
import asyncio

async def main():
    await asyncio.sleep(0)
    return 42

asyncio.run(main())
```

This is *roughly* equivalent to:

```rst
import asyncio

async def main():
    await asyncio.sleep(0)
    return 42

loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
try:
    loop.run_until_complete(main())
finally:
    asyncio.set_event_loop(None)
    loop.close()
```

The actual implementation is significantly more complex. Thus, |:library/asyncio-task.txt/asyncio.run:asyncio.run()|
should be the preferred way of running asyncio programs.

(Contributed by Yury Selivanov in |:bugs.python.org/issue32314:bpo-32314|.)

Running "python -m asyncio" launches a natively async REPL.  This allows rapid
experimentation with code that has a top-level |:reference/expressions.txt/await:await|.  There is no longer a
need to directly call "asyncio.run()" which would spawn a new event loop on
every invocation:

```rst
$ python -m asyncio
asyncio REPL 3.8.0
Use "await" directly instead of "asyncio.run()".
Type "help", "copyright", "credits" or "license" for more information.
>>> import asyncio
>>> await asyncio.sleep(10, result='hello')
hello
```

(Contributed by Yury Selivanov in |:bugs.python.org/issue37028:bpo-37028|.)

The exception |:library/asyncio-exceptions.txt/asyncio.CancelledError:asyncio.CancelledError| now inherits from |:library/exceptions.txt/BaseException:BaseException| rather
than |:library/exceptions.txt/Exception:Exception| and no longer inherits from |:library/concurrent.futures.txt/concurrent.futures.CancelledError:concurrent.futures.CancelledError|
. (Contributed by Yury Selivanov in |:bugs.python.org/issue32528:bpo-32528|.)

On Windows, the default event loop is now |:library/asyncio-eventloop.txt/asyncio.ProactorEventLoop:ProactorEventLoop|. (Contributed by
Victor Stinner in |:bugs.python.org/issue34687:bpo-34687|.)

|:library/asyncio-eventloop.txt/asyncio.ProactorEventLoop:ProactorEventLoop| now also supports UDP. (Contributed by Adam Meily and Andrew
Svetlov in |:bugs.python.org/issue29883:bpo-29883|.)

|:library/asyncio-eventloop.txt/asyncio.ProactorEventLoop:ProactorEventLoop| can now be interrupted by |:library/exceptions.txt/KeyboardInterrupt:KeyboardInterrupt| (“CTRL+C”).
(Contributed by Vladimir Matveev in |:bugs.python.org/issue23057:bpo-23057|.)

Added |:library/asyncio-task.txt/asyncio.Task.get_coro:asyncio.Task.get_coro()| for getting the wrapped coroutine within an
|:library/asyncio-task.txt/asyncio.Task:asyncio.Task|. (Contributed by Alex Grönholm in |:bugs.python.org/issue36999:bpo-36999|.)

Asyncio tasks can now be named, either by passing the "name" keyword argument to
|:library/asyncio-task.txt/asyncio.create_task:asyncio.create_task()| or the |:library/asyncio-eventloop.txt/asyncio.loop.create_task:create_task()| event loop method, or by calling
the |:library/asyncio-task.txt/asyncio.Task.set_name:set_name()| method on the task object. The task name is visible in the "
repr()" output of |:library/asyncio-task.txt/asyncio.Task:asyncio.Task| and can also be retrieved using the
|:library/asyncio-task.txt/asyncio.Task.get_name:get_name()| method. (Contributed by Alex Grönholm in |:bugs.python.org/issue34270:bpo-34270|.)

Added support for |:en.wikipedia.org/wiki/Happy_Eyeballs:Happy Eyeballs|*|happy-eyeballs:⚓|*  to
|:library/asyncio-eventloop.txt/asyncio.loop.create_connection:asyncio.loop.create_connection()|. To specify the behavior, two new parameters
have been added: *happy_eyeballs_delay* and *interleave*. The Happy Eyeballs
algorithm improves responsiveness in applications that support IPv4 and IPv6 by
attempting to simultaneously connect using both. (Contributed by twisteroid
ambassador in |:bugs.python.org/issue33530:bpo-33530|.)

## builtins:builtins

The |:library/functions.txt/compile:compile()| built-in has been improved to accept the "
ast.PyCF_ALLOW_TOP_LEVEL_AWAIT" flag. With this new flag passed, |:library/functions.txt/compile:compile()|
will allow top-level "await", "async for" and "async with" constructs that are
usually considered invalid syntax. Asynchronous code object marked with the "
CO_COROUTINE" flag may then be returned. (Contributed by Matthias Bussonnier in
|:bugs.python.org/issue34616:bpo-34616|)

## collections:collections

The |:library/collections.txt/collections.somenamedtuple._asdict:_asdict()| method for |:library/collections.txt/collections.namedtuple:collections.namedtuple()| now returns a |:library/stdtypes.txt/dict:dict|
instead of a |:library/collections.txt/collections.OrderedDict:collections.OrderedDict|. This works because regular dicts have
guaranteed ordering since Python 3.7. If the extra features of "OrderedDict" are
required, the suggested remediation is to cast the result to the desired type: "
OrderedDict(nt._asdict())". (Contributed by Raymond Hettinger in |:bugs.python.org/issue35864:bpo-35864|.)

## cprofile:cProfile

The |:library/profile.txt/profile.Profile:cProfile.Profile| class can now be used as a context manager. Profile a
block of code by running:

```rst
import cProfile

with cProfile.Profile() as profiler:
      # code to be profiled
      ...
```

(Contributed by Scott Sanderson in |:bugs.python.org/issue29235:bpo-29235|.)

## csv:csv

The |:library/csv.txt/csv.DictReader:csv.DictReader| now returns instances of |:library/stdtypes.txt/dict:dict| instead of a
|:library/collections.txt/collections.OrderedDict:collections.OrderedDict|.  The tool is now faster and uses less memory while
still preserving the field order. (Contributed by Michael Selik in |:bugs.python.org/issue34003:bpo-34003|.)

## curses:curses

Added a new variable holding structured version information for the underlying
ncurses library: |:library/curses.txt/curses.ncurses_version:ncurses_version|. (Contributed by Serhiy Storchaka in
|:bugs.python.org/issue31680:bpo-31680|.)

## ctypes:ctypes

On Windows, |:library/ctypes.txt/ctypes.CDLL:CDLL| and subclasses now accept a *winmode* parameter to specify
flags for the underlying "LoadLibraryEx" call. The default flags are set to only
load DLL dependencies from trusted locations, including the path where the DLL
is stored (if a full or partial path is used to load the initial DLL) and paths
added by |:library/os.txt/os.add_dll_directory:add_dll_directory()|. (Contributed by Steve Dower in |:bugs.python.org/issue36085:bpo-36085|.)

## datetime:datetime

Added new alternate constructors |:library/datetime.txt/datetime.date.fromisocalendar:datetime.date.fromisocalendar()| and
|:library/datetime.txt/datetime.datetime.fromisocalendar:datetime.datetime.fromisocalendar()|, which construct "date" and |:library/datetime.txt/module-datetime:datetime|
objects respectively from ISO year, week number, and weekday; these are the
inverse of each class’s "isocalendar" method. (Contributed by Paul Ganssle in
|:bugs.python.org/issue36004:bpo-36004|.)

## functools:functools

|:library/functools.txt/functools.lru_cache:functools.lru_cache()| can now be used as a straight decorator rather than as a
function returning a decorator.  So both of these are now supported:

```rst
@lru_cache
def f(x):
    ...

@lru_cache(maxsize=256)
def f(x):
    ...
```

(Contributed by Raymond Hettinger in |:bugs.python.org/issue36772:bpo-36772|.)

Added a new |:library/functools.txt/functools.cached_property:functools.cached_property()| decorator, for computed properties
cached for the life of the instance.

```rst
import functools
import statistics

class Dataset:
   def __init__(self, sequence_of_numbers):
      self.data = sequence_of_numbers

   @functools.cached_property
   def variance(self):
      return statistics.variance(self.data)
```

(Contributed by Carl Meyer in |:bugs.python.org/issue21145:bpo-21145|)

Added a new |:library/functools.txt/functools.singledispatchmethod:functools.singledispatchmethod()| decorator that converts methods
into |:glossary.txt/term-generic-function:generic functions| using |:glossary.txt/term-single-dispatch:single dispatch|:

```rst
from functools import singledispatchmethod
from contextlib import suppress

class TaskManager:

    def __init__(self, tasks):
        self.tasks = list(tasks)

    @singledispatchmethod
    def discard(self, value):
        with suppress(ValueError):
            self.tasks.remove(value)

    @discard.register(list)
    def _(self, tasks):
        targets = set(tasks)
        self.tasks = [x for x in self.tasks if x not in targets]
```

(Contributed by Ethan Smith in |:bugs.python.org/issue32380:bpo-32380|)

## gc:gc

|:library/gc.txt/gc.get_objects:get_objects()| can now receive an optional *generation* parameter indicating a
generation to get objects from. (Contributed by Pablo Galindo in |:bugs.python.org/issue36016:bpo-36016|.)

## gettext:gettext

Added |:library/gettext.txt/gettext.pgettext:pgettext()| and its variants. (Contributed by Franz Glasner, Éric Araujo,
and Cheryl Sabella in |:bugs.python.org/issue2504:bpo-2504|.)

## gzip:gzip

Added the *mtime* parameter to |:library/gzip.txt/gzip.compress:gzip.compress()| for reproducible output.
(Contributed by Guo Ci Teo in |:bugs.python.org/issue34898:bpo-34898|.)

A |:library/gzip.txt/gzip.BadGzipFile:BadGzipFile| exception is now raised instead of |:library/exceptions.txt/OSError:OSError| for certain types
of invalid or corrupt gzip files. (Contributed by Filip Gruszczyński, Michele
Orrù, and Zackery Spytz in |:bugs.python.org/issue6584:bpo-6584|.)

## idle-and-idlelib:IDLE and idlelib

Output over N lines (50 by default) is squeezed down to a button. N can be
changed in the PyShell section of the General page of the Settings dialog.
Fewer, but possibly extra long, lines can be squeezed by right clicking on the
output.  Squeezed output can be expanded in place by double-clicking the button
or into the clipboard or a separate window by right-clicking the button.
(Contributed by Tal Einat in |:bugs.python.org/issue1529353:bpo-1529353|.)

Add “Run Customized” to the Run menu to run a module with customized settings.
Any command line arguments entered are added to sys.argv. They also re-appear in
the box for the next customized run.  One can also suppress the normal Shell
main module restart.  (Contributed by Cheryl Sabella, Terry Jan Reedy, and
others in |:bugs.python.org/issue5680:bpo-5680| and |:bugs.python.org/issue37627:bpo-37627|.)

Added optional line numbers for IDLE editor windows. Windows open without line
numbers unless set otherwise in the General tab of the configuration dialog.
Line numbers for an existing window are shown and hidden in the Options menu.
(Contributed by Tal Einat and Saimadhav Heblikar in |:bugs.python.org/issue17535:bpo-17535|.)

OS native encoding is now used for converting between Python strings and Tcl
objects. This allows IDLE to work with emoji and other non-BMP characters. These
characters can be displayed or copied and pasted to or from the clipboard.
Converting strings from Tcl to Python and back now never fails. (Many people
worked on this for eight years but the problem was finally solved by Serhiy
Storchaka in |:bugs.python.org/issue13153:bpo-13153|.)

New in 3.8.1:

Add option to toggle cursor blink off.  (Contributed by Zackery Spytz in
|:bugs.python.org/issue4603:bpo-4603|.)

Escape key now closes IDLE completion windows.  (Contributed by Johnny Najera in
|:bugs.python.org/issue38944:bpo-38944|.)

The changes above have been backported to 3.7 maintenance releases.

Add keywords to module name completion list.  (Contributed by Terry J. Reedy in
|:bugs.python.org/issue37765:bpo-37765|.)

## inspect:inspect

The |:library/inspect.txt/inspect.getdoc:inspect.getdoc()| function can now find docstrings for "__slots__" if that
attribute is a |:library/stdtypes.txt/dict:dict| where the values are docstrings. This provides
documentation options similar to what we already have for |:library/functions.txt/property:property()|,
|:library/functions.txt/classmethod:classmethod()|, and |:library/functions.txt/staticmethod:staticmethod()|:

```rst
class AudioClip:
    __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal place',
                 'duration': 'in seconds, rounded up to an integer'}
    def __init__(self, bit_rate, duration):
        self.bit_rate = round(bit_rate / 1000.0, 1)
        self.duration = ceil(duration)
```

(Contributed by Raymond Hettinger in |:bugs.python.org/issue36326:bpo-36326|.)

## io:io

In development mode (|:using/cmdline.txt/cmdoption-X:-X| "env") and in debug build, the |:library/io.txt/io.IOBase:io.IOBase| finalizer
now logs the exception if the "close()" method fails. The exception is ignored
silently by default in release build. (Contributed by Victor Stinner in
|:bugs.python.org/issue18748:bpo-18748|.)

## itertools:itertools

The |:library/itertools.txt/itertools.accumulate:itertools.accumulate()| function added an option *initial* keyword argument
to specify an initial value:

```rst
>>> from itertools import accumulate
>>> list(accumulate([10, 5, 30, 15], initial=1000))
[1000, 1010, 1015, 1045, 1060]
```

(Contributed by Lisa Roach in |:bugs.python.org/issue34659:bpo-34659|.)

## json-tool:json.tool

Add option "--json-lines" to parse every input line as a separate JSON object.
(Contributed by Weipeng Hong in |:bugs.python.org/issue31553:bpo-31553|.)

## logging:logging

Added a *force* keyword argument to |:library/logging.txt/logging.basicConfig:logging.basicConfig()| When set to true,
any existing handlers attached to the root logger are removed and closed before
carrying out the configuration specified by the other arguments.

This solves a long-standing problem.  Once a logger or *basicConfig()* had been
called, subsequent calls to *basicConfig()* were silently ignored. This made it
difficult to update, experiment with, or teach the various logging configuration
options using the interactive prompt or a Jupyter notebook.

(Suggested by Raymond Hettinger, implemented by Dong-hee Na, and reviewed by
Vinay Sajip in |:bugs.python.org/issue33897:bpo-33897|.)

## math:math

Added new function |:library/math.txt/math.dist:math.dist()| for computing Euclidean distance between two
points.  (Contributed by Raymond Hettinger in |:bugs.python.org/issue33089:bpo-33089|.)

Expanded the |:library/math.txt/math.hypot:math.hypot()| function to handle multiple dimensions. Formerly, it
only supported the 2-D case. (Contributed by Raymond Hettinger in |:bugs.python.org/issue33089:bpo-33089|.)

Added new function, |:library/math.txt/math.prod:math.prod()|, as analogous function to |:library/functions.txt/sum:sum()| that returns
the product of a ‘start’ value (default: 1) times an iterable of numbers:

```rst
>>> prior = 0.8
>>> likelihoods = [0.625, 0.84, 0.30]
>>> math.prod(likelihoods, start=prior)
0.126
```

(Contributed by Pablo Galindo in |:bugs.python.org/issue35606:bpo-35606|.)

Added two new combinatoric functions |:library/math.txt/math.perm:math.perm()| and |:library/math.txt/math.comb:math.comb()|:

```rst
>>> math.perm(10, 3)    # Permutations of 10 things taken 3 at a time
720
>>> math.comb(10, 3)    # Combinations of 10 things taken 3 at a time
120
```

(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and Raymond
Hettinger in |:bugs.python.org/issue37128:bpo-37128|, |:bugs.python.org/issue37178:bpo-37178|, and |:bugs.python.org/issue35431:bpo-35431|.)

Added a new function |:library/math.txt/math.isqrt:math.isqrt()| for computing accurate integer square roots
without conversion to floating point.  The new function supports arbitrarily
large integers.  It is faster than "floor(sqrt(n))" but slower than
|:library/math.txt/math.sqrt:math.sqrt()|:

```rst
>>> r = 650320427
>>> s = r ** 2
>>> isqrt(s - 1)         # correct
650320426
>>> floor(sqrt(s - 1))   # incorrect
650320427
```

(Contributed by Mark Dickinson in |:bugs.python.org/issue36887:bpo-36887|.)

The function |:library/math.txt/math.factorial:math.factorial()| no longer accepts arguments that are not int-
like. (Contributed by Pablo Galindo in |:bugs.python.org/issue33083:bpo-33083|.)

## mmap:mmap

The |:library/mmap.txt/mmap.mmap:mmap.mmap| class now has an |:library/mmap.txt/mmap.mmap.madvise:madvise()| method to access the "madvise()"
system call. (Contributed by Zackery Spytz in |:bugs.python.org/issue32941:bpo-32941|.)

## multiprocessing:multiprocessing

Added new |:library/multiprocessing.shared_memory.txt/module-multiprocessing.shared_memory:multiprocessing.shared_memory| module. (Contributed by Davin Potts in
|:bugs.python.org/issue35813:bpo-35813|.)

On macOS, the *spawn* start method is now used by default. (Contributed by
Victor Stinner in |:bugs.python.org/issue33725:bpo-33725|.)

## os:os

Added new function |:library/os.txt/os.add_dll_directory:add_dll_directory()| on Windows for providing additional
search paths for native dependencies when importing extension modules or loading
DLLs using |:library/ctypes.txt/module-ctypes:ctypes|. (Contributed by Steve Dower in |:bugs.python.org/issue36085:bpo-36085|.)

A new |:library/os.txt/os.memfd_create:os.memfd_create()| function was added to wrap the "memfd_create()"
syscall. (Contributed by Zackery Spytz and Christian Heimes in |:bugs.python.org/issue26836:bpo-26836|.)

On Windows, much of the manual logic for handling reparse points (including
symlinks and directory junctions) has been delegated to the operating system.
Specifically, |:library/os.txt/os.stat:os.stat()| will now traverse anything supported by the operating
system, while |:library/os.txt/os.lstat:os.lstat()| will only open reparse points that identify as “name
surrogates” while others are opened as for |:library/os.txt/os.stat:os.stat()|. In all cases, "
stat_result.st_mode" will only have "S_IFLNK" set for symbolic links and not
other kinds of reparse points. To identify other kinds of reparse point, check
the new "stat_result.st_reparse_tag" attribute.

On Windows, |:library/os.txt/os.readlink:os.readlink()| is now able to read directory junctions. Note that
|:library/os.path.txt/os.path.islink:islink()| will return "False" for directory junctions, and so code that checks
"islink" first will continue to treat junctions as directories, while code that
handles errors from |:library/os.txt/os.readlink:os.readlink()| may now treat junctions as links.

(Contributed by Steve Dower in |:bugs.python.org/issue37834:bpo-37834|.)

## os-path:os.path

|:library/os.path.txt/module-os.path:os.path| functions that return a boolean result like |:library/os.path.txt/os.path.exists:exists()|, |:library/os.path.txt/os.path.lexists:lexists()|,
|:library/os.path.txt/os.path.isdir:isdir()|, |:library/os.path.txt/os.path.isfile:isfile()|, |:library/os.path.txt/os.path.islink:islink()|, and |:library/os.path.txt/os.path.ismount:ismount()| now return "False" instead of
raising |:library/exceptions.txt/ValueError:ValueError| or its subclasses |:library/exceptions.txt/UnicodeEncodeError:UnicodeEncodeError| and
|:library/exceptions.txt/UnicodeDecodeError:UnicodeDecodeError| for paths that contain characters or bytes unrepresentable
at the OS level. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue33721:bpo-33721|.)

|:library/os.path.txt/os.path.expanduser:expanduser()| on Windows now prefers the *|index-13:⚓|* "USERPROFILE"
environment variable and does not use *|index-14:⚓|* "HOME", which is not
normally set for regular user accounts. (Contributed by Anthony Sottile in
|:bugs.python.org/issue36264:bpo-36264|.)

|:library/os.path.txt/os.path.isdir:isdir()| on Windows no longer returns "True" for a link to a non-existent
directory.

|:library/os.path.txt/os.path.realpath:realpath()| on Windows now resolves reparse points, including symlinks and
directory junctions.

(Contributed by Steve Dower in |:bugs.python.org/issue37834:bpo-37834|.)

## pathlib:pathlib

|:library/pathlib.txt/pathlib.Path:pathlib.Path| methods that return a boolean result like |:library/pathlib.txt/pathlib.Path.exists:exists()|, |:library/pathlib.txt/pathlib.Path.is_dir:is_dir()|,
|:library/pathlib.txt/pathlib.Path.is_file:is_file()|, |:library/pathlib.txt/pathlib.Path.is_mount:is_mount()|, |:library/pathlib.txt/pathlib.Path.is_symlink:is_symlink()|, |:library/pathlib.txt/pathlib.Path.is_block_device:is_block_device()|,
|:library/pathlib.txt/pathlib.Path.is_char_device:is_char_device()|, |:library/pathlib.txt/pathlib.Path.is_fifo:is_fifo()|, |:library/pathlib.txt/pathlib.Path.is_socket:is_socket()| now return "False" instead of
raising |:library/exceptions.txt/ValueError:ValueError| or its subclass |:library/exceptions.txt/UnicodeEncodeError:UnicodeEncodeError| for paths that contain
characters unrepresentable at the OS level. (Contributed by Serhiy Storchaka in
|:bugs.python.org/issue33721:bpo-33721|.)

Added |:library/pathlib.txt/pathlib.Path.link_to:pathlib.Path.link_to()| which creates a hard link pointing to a path.
(Contributed by Joannah Nanjekye in |:bugs.python.org/issue26978:bpo-26978|)

## pickle:pickle

|:library/pickle.txt/module-pickle:pickle| extensions subclassing the C-optimized |:library/pickle.txt/pickle.Pickler:Pickler| can now override the
pickling logic of functions and classes by defining the special
|:library/pickle.txt/pickle.Pickler.reducer_override:reducer_override()| method. (Contributed by Pierre Glaser and Olivier Grisel in
|:bugs.python.org/issue35900:bpo-35900|.)

## plistlib:plistlib

Added new |:library/plistlib.txt/plistlib.UID:plistlib.UID| and enabled support for reading and writing
NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen in |:bugs.python.org/issue26707:bpo-26707|
.)

## pprint:pprint

The |:library/pprint.txt/module-pprint:pprint| module added a *sort_dicts* parameter to several functions. By
default, those functions continue to sort dictionaries before rendering or
printing.  However, if *sort_dicts* is set to false, the dictionaries retain the
order that keys were inserted.  This can be useful for comparison to JSON inputs
during debugging.

In addition, there is a convenience new function, |:library/pprint.txt/pprint.pp:pprint.pp()| that is like
|:library/pprint.txt/pprint.pprint:pprint.pprint()| but with *sort_dicts* defaulting to "False":

```rst
>>> from pprint import pprint, pp
>>> d = dict(source='input.txt', operation='filter', destination='output.txt')
>>> pp(d, width=40)                  # Original order
{'source': 'input.txt',
 'operation': 'filter',
 'destination': 'output.txt'}
>>> pprint(d, width=40)              # Keys sorted alphabetically
{'destination': 'output.txt',
 'operation': 'filter',
 'source': 'input.txt'}
```

(Contributed by Rémi Lapeyre in |:bugs.python.org/issue30670:bpo-30670|.)

## py-compile:py_compile

|:library/py_compile.txt/py_compile.compile:py_compile.compile()| now supports silent mode. (Contributed by Joannah
Nanjekye in |:bugs.python.org/issue22640:bpo-22640|.)

## shlex:shlex

The new |:library/shlex.txt/shlex.join:shlex.join()| function acts as the inverse of |:library/shlex.txt/shlex.split:shlex.split()|.
(Contributed by Bo Bayles in |:bugs.python.org/issue32102:bpo-32102|.)

## shutil:shutil

|:library/shutil.txt/shutil.copytree:shutil.copytree()| now accepts a new "dirs_exist_ok" keyword argument.
(Contributed by Josh Bronson in |:bugs.python.org/issue20849:bpo-20849|.)

|:library/shutil.txt/shutil.make_archive:shutil.make_archive()| now defaults to the modern pax (POSIX.1-2001) format for
new archives to improve portability and standards conformance, inherited from
the corresponding change to the |:library/tarfile.txt/module-tarfile:tarfile| module. (Contributed by C.A.M. Gerlach
in |:bugs.python.org/issue30661:bpo-30661|.)

|:library/shutil.txt/shutil.rmtree:shutil.rmtree()| on Windows now removes directory junctions without recursively
removing their contents first. (Contributed by Steve Dower in |:bugs.python.org/issue37834:bpo-37834|.)

## socket:socket

Added |:library/socket.txt/socket.create_server:create_server()| and |:library/socket.txt/socket.has_dualstack_ipv6:has_dualstack_ipv6()| convenience functions to
automate the necessary tasks usually involved when creating a server socket,
including accepting both IPv4 and IPv6 connections on the same socket.
(Contributed by Giampaolo Rodolà in |:bugs.python.org/issue17561:bpo-17561|.)

The |:library/socket.txt/socket.if_nameindex:socket.if_nameindex()|, |:library/socket.txt/socket.if_nametoindex:socket.if_nametoindex()|, and
|:library/socket.txt/socket.if_indextoname:socket.if_indextoname()| functions have been implemented on Windows.
(Contributed by Zackery Spytz in |:bugs.python.org/issue37007:bpo-37007|.)

## ssl:ssl

Added |:library/ssl.txt/ssl.SSLContext.post_handshake_auth:post_handshake_auth| to enable and |:library/ssl.txt/ssl.SSLSocket.verify_client_post_handshake:verify_client_post_handshake()| to
initiate TLS 1.3 post-handshake authentication. (Contributed by Christian Heimes
in |:bugs.python.org/issue34670:bpo-34670|.)

## statistics:statistics

Added |:library/statistics.txt/statistics.fmean:statistics.fmean()| as a faster, floating point variant of
|:library/statistics.txt/statistics.mean:statistics.mean()|.  (Contributed by Raymond Hettinger and Steven D’Aprano in
|:bugs.python.org/issue35904:bpo-35904|.)

Added |:library/statistics.txt/statistics.geometric_mean:statistics.geometric_mean()| (Contributed by Raymond Hettinger in
|:bugs.python.org/issue27181:bpo-27181|.)

Added |:library/statistics.txt/statistics.multimode:statistics.multimode()| that returns a list of the most common values.
(Contributed by Raymond Hettinger in |:bugs.python.org/issue35892:bpo-35892|.)

Added |:library/statistics.txt/statistics.quantiles:statistics.quantiles()| that divides data or a distribution in to
equiprobable intervals (e.g. quartiles, deciles, or percentiles). (Contributed
by Raymond Hettinger in |:bugs.python.org/issue36546:bpo-36546|.)

Added |:library/statistics.txt/statistics.NormalDist:statistics.NormalDist|, a tool for creating and manipulating normal
distributions of a random variable. (Contributed by Raymond Hettinger in
|:bugs.python.org/issue36018:bpo-36018|.)

```rst
>>> temperature_feb = NormalDist.from_samples([4, 12, -3, 2, 7, 14])
>>> temperature_feb.mean
6.0
>>> temperature_feb.stdev
6.356099432828281

>>> temperature_feb.cdf(3)            # Chance of being under 3 degrees
0.3184678262814532
>>> # Relative chance of being 7 degrees versus 10 degrees
>>> temperature_feb.pdf(7) / temperature_feb.pdf(10)
1.2039930378537762

>>> el_niño = NormalDist(4, 2.5)
>>> temperature_feb += el_niño        # Add in a climate effect
>>> temperature_feb
NormalDist(mu=10.0, sigma=6.830080526611674)

>>> temperature_feb * (9/5) + 32      # Convert to Fahrenheit
NormalDist(mu=50.0, sigma=12.294144947901014)
>>> temperature_feb.samples(3)        # Generate random samples
[7.672102882379219, 12.000027119750287, 4.647488369766392]
```

## sys:sys

Add new |:library/sys.txt/sys.unraisablehook:sys.unraisablehook()| function which can be overridden to control how
“unraisable exceptions” are handled. It is called when an exception has occurred
but there is no way for Python to handle it. For example, when a destructor
raises an exception or during garbage collection (|:library/gc.txt/gc.collect:gc.collect()|). (Contributed
by Victor Stinner in |:bugs.python.org/issue36829:bpo-36829|.)

## tarfile:tarfile

The |:library/tarfile.txt/module-tarfile:tarfile| module now defaults to the modern pax (POSIX.1-2001) format for
new archives, instead of the previous GNU-specific one. This improves cross-
platform portability with a consistent encoding (UTF-8) in a standardized and
extensible format, and offers several other benefits. (Contributed by C.A.M.
Gerlach in |:bugs.python.org/issue36268:bpo-36268|.)

## threading:threading

Add a new |:library/threading.txt/threading.excepthook:threading.excepthook()| function which handles uncaught
|:library/threading.txt/threading.Thread.run:threading.Thread.run()| exception. It can be overridden to control how uncaught
|:library/threading.txt/threading.Thread.run:threading.Thread.run()| exceptions are handled. (Contributed by Victor Stinner
in |:bugs.python.org/issue1230540:bpo-1230540|.)

Add a new |:library/threading.txt/threading.get_native_id:threading.get_native_id()| function and a |:library/threading.txt/threading.Thread.native_id:native_id| attribute to
the |:library/threading.txt/threading.Thread:threading.Thread| class. These return the native integral Thread ID of the
current thread assigned by the kernel. This feature is only available on certain
platforms, see |:library/threading.txt/threading.get_native_id:get_native_id| for more information. (Contributed by Jake Tesler
in |:bugs.python.org/issue36084:bpo-36084|.)

## tokenize:tokenize

The |:library/tokenize.txt/module-tokenize:tokenize| module now implicitly emits a "NEWLINE" token when provided with
input that does not have a trailing new line.  This behavior now matches what
the C tokenizer does internally. (Contributed by Ammar Askar in |:bugs.python.org/issue33899:bpo-33899|.)

## tkinter:tkinter

Added methods "selection_from()", "selection_present()", "selection_range()" and
"selection_to()" in the "tkinter.Spinbox" class. (Contributed by Juliette Monsel
in |:bugs.python.org/issue34829:bpo-34829|.)

Added method "moveto()" in the "tkinter.Canvas" class. (Contributed by Juliette
Monsel in |:bugs.python.org/issue23831:bpo-23831|.)

The "tkinter.PhotoImage" class now has "transparency_get()" and "
transparency_set()" methods.  (Contributed by Zackery Spytz in |:bugs.python.org/issue25451:bpo-25451|.)

## time:time

Added new clock |:library/time.txt/time.CLOCK_UPTIME_RAW:CLOCK_UPTIME_RAW| for macOS 10.12. (Contributed by Joannah
Nanjekye in |:bugs.python.org/issue35702:bpo-35702|.)

## typing:typing

The |:library/typing.txt/module-typing:typing| module incorporates several new features:

* A dictionary type with per-key types.  See *|index-15:⚓|* |:www.python.org/dev/peps/pep-0589:PEP 589| and
  |:library/typing.txt/typing.TypedDict:typing.TypedDict|. TypedDict uses only string keys.  By default, every key is
  required to be present. Specify “total=False” to allow keys to be optional:

```rst
class Location(TypedDict, total=False):
    lat_long: tuple
    grid_square: str
    xy_coordinate: tuple
```

* Literal types.  See *|index-16:⚓|* |:www.python.org/dev/peps/pep-0586:PEP 586| and |:library/typing.txt/typing.Literal:typing.Literal|. Literal types
  indicate that a parameter or return value is constrained to one or more specific
  literal values:

```rst
def get_status(port: int) -> Literal['connected', 'disconnected']:
    ...
```

* “Final” variables, functions, methods and classes.  See *|index-17:⚓|* |:www.python.org/dev/peps/pep-0591:PEP 591|
  , |:library/typing.txt/typing.Final:typing.Final| and |:library/typing.txt/typing.final:typing.final()|. The final qualifier instructs a static
  type checker to restrict subclassing, overriding, or reassignment:

```rst
pi: Final[float] = 3.1415926536
```

* Protocol definitions.  See *|index-18:⚓|* |:www.python.org/dev/peps/pep-0544:PEP 544|, |:library/typing.txt/typing.Protocol:typing.Protocol| and
  |:library/typing.txt/typing.runtime_checkable:typing.runtime_checkable()|.  Simple ABCs like |:library/typing.txt/typing.SupportsInt:typing.SupportsInt| are now "
  Protocol" subclasses.

* New protocol class |:library/typing.txt/typing.SupportsIndex:typing.SupportsIndex|.

* New functions |:library/typing.txt/typing.get_origin:typing.get_origin()| and |:library/typing.txt/typing.get_args:typing.get_args()|.

## unicodedata:unicodedata

The |:library/unicodedata.txt/module-unicodedata:unicodedata| module has been upgraded to use the |:blog.unicode.org/2019/05/unicode-12-1-en.html:Unicode 12.1.0|
*|unicode-12-1-0:⚓|*  release.

New function |:library/unicodedata.txt/unicodedata.is_normalized:is_normalized()| can be used to verify a string is in a specific
normal form, often much faster than by actually normalizing the string.
(Contributed by Max Belanger, David Euresti, and Greg Price in |:bugs.python.org/issue32285:bpo-32285| and
|:bugs.python.org/issue37966:bpo-37966|).

## unittest:unittest

Added |:library/unittest.mock.txt/unittest.mock.AsyncMock:AsyncMock| to support an asynchronous version of |:library/unittest.mock.txt/unittest.mock.Mock:Mock|.  Appropriate new
assert functions for testing have been added as well. (Contributed by Lisa Roach
in |:bugs.python.org/issue26467:bpo-26467|).

Added |:library/unittest.txt/unittest.addModuleCleanup:addModuleCleanup()| and |:library/unittest.txt/unittest.TestCase.addClassCleanup:addClassCleanup()| to unittest to support
cleanups for "setUpModule()" and |:library/unittest.txt/unittest.TestCase.setUpClass:setUpClass()|. (Contributed by Lisa Roach in
|:bugs.python.org/issue24412:bpo-24412|.)

Several mock assert functions now also print a list of actual calls upon
failure. (Contributed by Petter Strandmark in |:bugs.python.org/issue35047:bpo-35047|.)

|:library/unittest.txt/module-unittest:unittest| module gained support for coroutines to be used as test cases with
|:library/unittest.txt/unittest.IsolatedAsyncioTestCase:unittest.IsolatedAsyncioTestCase|. (Contributed by Andrew Svetlov in
|:bugs.python.org/issue32972:bpo-32972|.)

Example:

```rst
import unittest


class TestRequest(unittest.IsolatedAsyncioTestCase):

    async def asyncSetUp(self):
        self.connection = await AsyncConnection()

    async def test_get(self):
        response = await self.connection.get("https://example.com")
        self.assertEqual(response.status_code, 200)

    async def asyncTearDown(self):
        await self.connection.close()


if __name__ == "__main__":
    unittest.main()
```

## venv:venv

|:library/venv.txt/module-venv:venv| now includes an "Activate.ps1" script on all platforms for activating
virtual environments under PowerShell Core 6.1. (Contributed by Brett Cannon in
|:bugs.python.org/issue32718:bpo-32718|.)

## weakref:weakref

The proxy objects returned by |:library/weakref.txt/weakref.proxy:weakref.proxy()| now support the matrix
multiplication operators "@" and "@=" in addition to the other numeric
operators. (Contributed by Mark Dickinson in |:bugs.python.org/issue36669:bpo-36669|.)

## xml:xml

As mitigation against DTD and external entity retrieval, the |:library/xml.dom.minidom.txt/module-xml.dom.minidom:xml.dom.minidom|
and |:library/xml.sax.txt/module-xml.sax:xml.sax| modules no longer process external entities by default.
(Contributed by Christian Heimes in |:bugs.python.org/issue17239:bpo-17239|.)

The ".find*()" methods in the |:library/xml.etree.elementtree.txt/module-xml.etree.ElementTree:xml.etree.ElementTree| module support wildcard
searches like "{*}tag" which ignores the namespace and "{namespace}*" which
returns all tags in the given namespace. (Contributed by Stefan Behnel in
|:bugs.python.org/issue28238:bpo-28238|.)

The |:library/xml.etree.elementtree.txt/module-xml.etree.ElementTree:xml.etree.ElementTree| module provides a new function "
–xml.etree.ElementTree.canonicalize()" that implements C14N 2.0. (Contributed by
Stefan Behnel in |:bugs.python.org/issue13611:bpo-13611|.)

The target object of |:library/xml.etree.elementtree.txt/xml.etree.ElementTree.XMLParser:xml.etree.ElementTree.XMLParser| can receive namespace
declaration events through the new callback methods "start_ns()" and "end_ns()".
Additionally, the |:library/xml.etree.elementtree.txt/xml.etree.ElementTree.TreeBuilder:xml.etree.ElementTree.TreeBuilder| target can be configured
to process events about comments and processing instructions to include them in
the generated tree. (Contributed by Stefan Behnel in |:bugs.python.org/issue36676:bpo-36676| and |:bugs.python.org/issue36673:bpo-36673|
.)

## xmlrpc:xmlrpc

|:library/xmlrpc.client.txt/xmlrpc.client.ServerProxy:xmlrpc.client.ServerProxy| now supports an optional *headers* keyword argument
for a sequence of HTTP headers to be sent with each request.  Among other
things, this makes it possible to upgrade from default basic authentication to
faster session authentication. (Contributed by Cédric Krier in |:bugs.python.org/issue35153:bpo-35153|.)

# optimizations:Optimizations

* The |:library/subprocess.txt/module-subprocess:subprocess| module can now use the |:library/os.txt/os.posix_spawn:os.posix_spawn()| function in some
  cases for better performance. Currently, it is only used on macOS and Linux
  (using glibc 2.24 or newer) if all these conditions are met:

  * *close_fds* is false;

  * *preexec_fn*, *pass_fds*, *cwd* and *start_new_session* parameters are not set;

  * the *executable* path contains a directory.

  (Contributed by Joannah Nanjekye and Victor Stinner in |:bugs.python.org/issue35537:bpo-35537|.)

* |:library/shutil.txt/shutil.copyfile:shutil.copyfile()|, |:library/shutil.txt/shutil.copy:shutil.copy()|, |:library/shutil.txt/shutil.copy2:shutil.copy2()|, |:library/shutil.txt/shutil.copytree:shutil.copytree()| and
  |:library/shutil.txt/shutil.move:shutil.move()| use platform-specific “fast-copy” syscalls on Linux and macOS in
  order to copy the file more efficiently. “fast-copy” means that the copying
  operation occurs within the kernel, avoiding the use of userspace buffers in
  Python as in “"outfd.write(infd.read())"”. On Windows |:library/shutil.txt/shutil.copyfile:shutil.copyfile()| uses a
  bigger default buffer size (1 MiB instead of 16 KiB) and a |:library/stdtypes.txt/memoryview:memoryview()|-based
  variant of |:library/shutil.txt/shutil.copyfileobj:shutil.copyfileobj()| is used. The speedup for copying a 512 MiB
  file within the same partition is about +26% on Linux, +50% on macOS and +40% on
  Windows. Also, much less CPU cycles are consumed. See
  |:library/shutil.txt/shutil-platform-dependent-efficient-copy-operations:Platform-dependent efficient copy operations| section. (Contributed by
  Giampaolo Rodolà in |:bugs.python.org/issue33671:bpo-33671|.)

* |:library/shutil.txt/shutil.copytree:shutil.copytree()| uses |:library/os.txt/os.scandir:os.scandir()| function and all copy functions
  depending from it use cached |:library/os.txt/os.stat:os.stat()| values. The speedup for copying a
  directory with 8000 files is around +9% on Linux, +20% on Windows and +30% on a
  Windows SMB share. Also the number of |:library/os.txt/os.stat:os.stat()| syscalls is reduced by 38%
  making |:library/shutil.txt/shutil.copytree:shutil.copytree()| especially faster on network filesystems.
  (Contributed by Giampaolo Rodolà in |:bugs.python.org/issue33695:bpo-33695|.)

* The default protocol in the |:library/pickle.txt/module-pickle:pickle| module is now Protocol 4, first introduced
  in Python 3.4.  It offers better performance and smaller size compared to
  Protocol 3 available since Python 3.0.

* Removed one "Py_ssize_t" member from "PyGC_Head".  All GC tracked objects (e.g.
  tuple, list, dict) size is reduced 4 or 8 bytes. (Contributed by Inada Naoki in
  |:bugs.python.org/issue33597:bpo-33597|.)

* |:library/uuid.txt/uuid.UUID:uuid.UUID| now uses "__slots__" to reduce its memory footprint. (Contributed by
  Wouter Bolsterlee and Tal Einat in |:bugs.python.org/issue30977:bpo-30977|)

* Improved performance of |:library/operator.txt/operator.itemgetter:operator.itemgetter()| by 33%.  Optimized argument
  handling and added a fast path for the common case of a single non-negative
  integer index into a tuple (which is the typical use case in the standard
  library).  (Contributed by Raymond Hettinger in |:bugs.python.org/issue35664:bpo-35664|.)

* Sped-up field lookups in |:library/collections.txt/collections.namedtuple:collections.namedtuple()|.  They are now more than two
  times faster, making them the fastest form of instance variable lookup in
  Python. (Contributed by Raymond Hettinger, Pablo Galindo, and Joe Jevnik, Serhiy
  Storchaka in |:bugs.python.org/issue32492:bpo-32492|.)

* The |:library/stdtypes.txt/list:list| constructor does not overallocate the internal item buffer if the
  input iterable has a known length (the input implements "__len__"). This makes
  the created list 12% smaller on average. (Contributed by Raymond Hettinger and
  Pablo Galindo in |:bugs.python.org/issue33234:bpo-33234|.)

* Doubled the speed of class variable writes.  When a non-dunder attribute was
  updated, there was an unnecessary call to update slots. (Contributed by Stefan
  Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil Schemenauer, and Serhiy
  Storchaka in |:bugs.python.org/issue36012:bpo-36012|.)

* Reduced an overhead of converting arguments passed to many builtin functions and
  methods.  This sped up calling some simple builtin functions and methods up to
  20–50%.  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue23867:bpo-23867|, |:bugs.python.org/issue35582:bpo-35582| and
  |:bugs.python.org/issue36127:bpo-36127|.)

* "LOAD_GLOBAL" instruction now uses new “per opcode cache” mechanism. It is about
  40% faster now.  (Contributed by Yury Selivanov and Inada Naoki in |:bugs.python.org/issue26219:bpo-26219|.)

# build-and-c-api-changes:Build and C API Changes

* Default |:library/sys.txt/sys.abiflags:sys.abiflags| became an empty string: the "m" flag for pymalloc became
  useless (builds with and without pymalloc are ABI compatible) and so has been
  removed. (Contributed by Victor Stinner in |:bugs.python.org/issue36707:bpo-36707|.)

  Example of changes:

  * Only "python3.8" program is installed, "python3.8m" program is gone.

  * Only "python3.8-config" script is installed, "python3.8m-config" script is gone.

  * The "m" flag has been removed from the suffix of dynamic library filenames:
    extension modules in the standard library as well as those produced and
    installed by third-party packages, like those downloaded from PyPI. On Linux,
    for example, the Python 3.7 suffix ".cpython-37m-x86_64-linux-gnu.so" became "
    .cpython-38-x86_64-linux-gnu.so" in Python 3.8.

* The header files have been reorganized to better separate the different kinds of
  APIs:

  * "Include/*.h" should be the portable public stable C API.

  * "Include/cpython/*.h" should be the unstable C API specific to CPython; public
    API, with some private API prefixed by "_Py" or "_PY".

  * "Include/internal/*.h" is the private internal C API very specific to CPython.
    This API comes with no backward compatibility warranty and should not be used
    outside CPython. It is only exposed for very specific needs like debuggers and
    profiles which has to access to CPython internals without calling functions.
    This API is now installed by "make install".

  (Contributed by Victor Stinner in |:bugs.python.org/issue35134:bpo-35134| and |:bugs.python.org/issue35081:bpo-35081|, work initiated by
  Eric Snow in Python 3.7.)

* Some macros have been converted to static inline functions: parameter types and
  return type are well defined, they don’t have issues specific to macros,
  variables have a local scopes. Examples:

  * |:c-api/refcounting.txt/c.Py_INCREF:Py_INCREF()|, |:c-api/refcounting.txt/c.Py_DECREF:Py_DECREF()|

  * |:c-api/refcounting.txt/c.Py_XINCREF:Py_XINCREF()|, |:c-api/refcounting.txt/c.Py_XDECREF:Py_XDECREF()|

  * "PyObject_INIT()", "PyObject_INIT_VAR()"

  * Private functions: "_PyObject_GC_TRACK()", "_PyObject_GC_UNTRACK()", "
    _Py_Dealloc()"

  (Contributed by Victor Stinner in |:bugs.python.org/issue35059:bpo-35059|.)

* The "PyByteArray_Init()" and "PyByteArray_Fini()" functions have been removed.
  They did nothing since Python 2.7.4 and Python 3.2.0, were excluded from the
  limited API (stable ABI), and were not documented. (Contributed by Victor
  Stinner in |:bugs.python.org/issue35713:bpo-35713|.)

* The result of "PyExceptionClass_Name()" is now of type "const char *" rather of
  "char *". (Contributed by Serhiy Storchaka in |:bugs.python.org/issue33818:bpo-33818|.)

* The duality of "Modules/Setup.dist" and "Modules/Setup" has been removed.
  Previously, when updating the CPython source tree, one had to manually copy "
  Modules/Setup.dist" (inside the source tree) to "Modules/Setup" (inside the
  build tree) in order to reflect any changes upstream.  This was of a small
  benefit to packagers at the expense of a frequent annoyance to developers
  following CPython development, as forgetting to copy the file could produce
  build failures.

  Now the build system always reads from "Modules/Setup" inside the source tree.
  People who want to customize that file are encouraged to maintain their changes
  in a git fork of CPython or as patch files, as they would do for any other
  change to the source tree.

  (Contributed by Antoine Pitrou in |:bugs.python.org/issue32430:bpo-32430|.)

* Functions that convert Python number to C integer like |:c-api/long.txt/c.PyLong_AsLong:PyLong_AsLong()| and
  argument parsing functions like |:c-api/arg.txt/c.PyArg_ParseTuple:PyArg_ParseTuple()| with integer converting
  format units like "'i'" will now use the |:reference/datamodel.txt/object.__index__:__index__()| special method instead of
  |:reference/datamodel.txt/object.__int__:__int__()|, if available.  The deprecation warning will be emitted for objects
  with the "__int__()" method but without the "__index__()" method (like |:library/decimal.txt/decimal.Decimal:Decimal|
  and |:library/fractions.txt/fractions.Fraction:Fraction|).  |:c-api/number.txt/c.PyNumber_Check:PyNumber_Check()| will now return "1" for objects
  implementing "__index__()". |:c-api/number.txt/c.PyNumber_Long:PyNumber_Long()|, |:c-api/number.txt/c.PyNumber_Float:PyNumber_Float()| and
  |:c-api/float.txt/c.PyFloat_AsDouble:PyFloat_AsDouble()| also now use the "__index__()" method if available.
  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue36048:bpo-36048| and |:bugs.python.org/issue20092:bpo-20092|.)

* Heap-allocated type objects will now increase their reference count in
  |:c-api/allocation.txt/c.PyObject_Init:PyObject_Init()| (and its parallel macro "PyObject_INIT") instead of in
  |:c-api/type.txt/c.PyType_GenericAlloc:PyType_GenericAlloc()|. Types that modify instance allocation or deallocation
  may need to be adjusted. (Contributed by Eddie Elizondo in |:bugs.python.org/issue35810:bpo-35810|.)

* The new function |:c-api/code.txt/c.PyCode_NewWithPosOnlyArgs:PyCode_NewWithPosOnlyArgs()| allows to create code objects
  like |:c-api/code.txt/c.PyCode_New:PyCode_New()|, but with an extra *posonlyargcount* parameter for
  indicating the number of positional-only arguments. (Contributed by Pablo
  Galindo in |:bugs.python.org/issue37221:bpo-37221|.)

* |:c-api/init.txt/c.Py_SetPath:Py_SetPath()| now sets |:library/sys.txt/sys.executable:sys.executable| to the program full path (
  |:c-api/init.txt/c.Py_GetProgramFullPath:Py_GetProgramFullPath()|) rather than to the program name (
  |:c-api/init.txt/c.Py_GetProgramName:Py_GetProgramName()|). (Contributed by Victor Stinner in |:bugs.python.org/issue38234:bpo-38234|.)

# deprecated:Deprecated

* The distutils "bdist_wininst" command is now deprecated, use "bdist_wheel"
  (wheel packages) instead. (Contributed by Victor Stinner in |:bugs.python.org/issue37481:bpo-37481|.)

* Deprecated methods "getchildren()" and "getiterator()" in the |:library/xml.etree.elementtree.txt/module-xml.etree.ElementTree:ElementTree|
  module now emit a |:library/exceptions.txt/DeprecationWarning:DeprecationWarning| instead of |:library/exceptions.txt/PendingDeprecationWarning:PendingDeprecationWarning|.
  They will be removed in Python 3.9. (Contributed by Serhiy Storchaka in
  |:bugs.python.org/issue29209:bpo-29209|.)

* Passing an object that is not an instance of
  |:library/concurrent.futures.txt/concurrent.futures.ThreadPoolExecutor:concurrent.futures.ThreadPoolExecutor| to |:library/asyncio-eventloop.txt/asyncio.loop.set_default_executor:loop.set_default_executor()| is
  deprecated and will be prohibited in Python 3.9. (Contributed by Elvis
  Pranskevichus in |:bugs.python.org/issue34075:bpo-34075|.)

* The "__getitem__()" methods of |:library/xml.dom.pulldom.txt/xml.dom.pulldom.DOMEventStream:xml.dom.pulldom.DOMEventStream|,
  |:library/wsgiref.txt/wsgiref.util.FileWrapper:wsgiref.util.FileWrapper| and |:library/fileinput.txt/fileinput.FileInput:fileinput.FileInput| have been deprecated.

  Implementations of these methods have been ignoring their *index* parameter, and
  returning the next item instead. (Contributed by Berker Peksag in |:bugs.python.org/issue9372:bpo-9372|.)

* The |:library/typing.txt/typing.NamedTuple:typing.NamedTuple| class has deprecated the "_field_types" attribute in
  favor of the "__annotations__" attribute which has the same information.
  (Contributed by Raymond Hettinger in |:bugs.python.org/issue36320:bpo-36320|.)

* |:library/ast.txt/module-ast:ast| classes "Num", "Str", "Bytes", "NameConstant" and "Ellipsis" are
  considered deprecated and will be removed in future Python versions. "Constant"
  should be used instead. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue32892:bpo-32892|.)

* |:library/ast.txt/ast.NodeVisitor:ast.NodeVisitor| methods "visit_Num()", "visit_Str()", "visit_Bytes()", "
  visit_NameConstant()" and "visit_Ellipsis()" are deprecated now and will not be
  called in future Python versions. Add the "visit_Constant()" method to handle
  all constant nodes. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue36917:bpo-36917|.)

* The |:library/asyncio-task.txt/asyncio.coroutine:asyncio.coroutine()| |:glossary.txt/term-decorator:decorator| is deprecated and will be removed in
  version 3.10.  Instead of "@asyncio.coroutine", use |:reference/compound_stmts.txt/async-def:async def| instead.
  (Contributed by Andrew Svetlov in |:bugs.python.org/issue36921:bpo-36921|.)

* In |:library/asyncio.txt/module-asyncio:asyncio|, the explicit passing of a *loop* argument has been deprecated and
  will be removed in version 3.10 for the following: |:library/asyncio-task.txt/asyncio.sleep:asyncio.sleep()|,
  |:library/asyncio-task.txt/asyncio.gather:asyncio.gather()|, |:library/asyncio-task.txt/asyncio.shield:asyncio.shield()|, |:library/asyncio-task.txt/asyncio.wait_for:asyncio.wait_for()|, |:library/asyncio-task.txt/asyncio.wait:asyncio.wait()|,
  |:library/asyncio-task.txt/asyncio.as_completed:asyncio.as_completed()|, |:library/asyncio-task.txt/asyncio.Task:asyncio.Task|, |:library/asyncio-sync.txt/asyncio.Lock:asyncio.Lock|, |:library/asyncio-sync.txt/asyncio.Event:asyncio.Event|,
  |:library/asyncio-sync.txt/asyncio.Condition:asyncio.Condition|, |:library/asyncio-sync.txt/asyncio.Semaphore:asyncio.Semaphore|, |:library/asyncio-sync.txt/asyncio.BoundedSemaphore:asyncio.BoundedSemaphore|,
  |:library/asyncio-queue.txt/asyncio.Queue:asyncio.Queue|, |:library/asyncio-subprocess.txt/asyncio.create_subprocess_exec:asyncio.create_subprocess_exec()|, and
  |:library/asyncio-subprocess.txt/asyncio.create_subprocess_shell:asyncio.create_subprocess_shell()|.

* The explicit passing of coroutine objects to |:library/asyncio-task.txt/asyncio.wait:asyncio.wait()| has been
  deprecated and will be removed in version 3.11. (Contributed by Yury Selivanov
  in |:bugs.python.org/issue34790:bpo-34790|.)

* The following functions and methods are deprecated in the |:library/gettext.txt/module-gettext:gettext| module:
  |:library/gettext.txt/gettext.lgettext:lgettext()|, |:library/gettext.txt/gettext.ldgettext:ldgettext()|, |:library/gettext.txt/gettext.lngettext:lngettext()| and |:library/gettext.txt/gettext.ldngettext:ldngettext()|. They return
  encoded bytes, and it’s possible that you will get unexpected Unicode-related
  exceptions if there are encoding problems with the translated strings. It’s much
  better to use alternatives which return Unicode strings in Python 3. These
  functions have been broken for a long time.

  Function |:library/gettext.txt/gettext.bind_textdomain_codeset:bind_textdomain_codeset()|, methods |:library/gettext.txt/gettext.NullTranslations.output_charset:output_charset()| and
  |:library/gettext.txt/gettext.NullTranslations.set_output_charset:set_output_charset()|, and the *codeset* parameter of functions |:library/gettext.txt/gettext.translation:translation()|
  and |:library/gettext.txt/gettext.install:install()| are also deprecated, since they are only used for the "
  l*gettext()" functions. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue33710:bpo-33710|.)

* The "isAlive()" method of |:library/threading.txt/threading.Thread:threading.Thread| has been deprecated. (Contributed
  by Dong-hee Na in |:bugs.python.org/issue35283:bpo-35283|.)

* Many builtin and extension functions that take integer arguments will now emit a
  deprecation warning for |:library/decimal.txt/decimal.Decimal:Decimal|s, |:library/fractions.txt/fractions.Fraction:Fraction|s and any other objects that can
  be converted to integers only with a loss (e.g. that have the |:reference/datamodel.txt/object.__int__:__int__()| method
  but do not have the |:reference/datamodel.txt/object.__index__:__index__()| method).  In future version they will be
  errors. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue36048:bpo-36048|.)

* Deprecated passing the following arguments as keyword arguments:

  * *func* in |:library/functools.txt/functools.partialmethod:functools.partialmethod()|, |:library/weakref.txt/weakref.finalize:weakref.finalize()|,
    |:library/profile.txt/profile.Profile.runcall:profile.Profile.runcall()|, "cProfile.Profile.runcall()", |:library/bdb.txt/bdb.Bdb.runcall:bdb.Bdb.runcall()|,
    |:library/trace.txt/trace.Trace.runfunc:trace.Trace.runfunc()| and |:library/curses.txt/curses.wrapper:curses.wrapper()|.

  * *function* in |:library/unittest.txt/unittest.TestCase.addCleanup:unittest.TestCase.addCleanup()|.

  * *fn* in the |:library/concurrent.futures.txt/concurrent.futures.Executor.submit:submit()| method of |:library/concurrent.futures.txt/concurrent.futures.ThreadPoolExecutor:concurrent.futures.ThreadPoolExecutor| and
    |:library/concurrent.futures.txt/concurrent.futures.ProcessPoolExecutor:concurrent.futures.ProcessPoolExecutor|.

  * *callback* in |:library/contextlib.txt/contextlib.ExitStack.callback:contextlib.ExitStack.callback()|, "
    contextlib.AsyncExitStack.callback()" and
    |:library/contextlib.txt/contextlib.AsyncExitStack.push_async_callback:contextlib.AsyncExitStack.push_async_callback()|.

  * *c* and *typeid* in the "create()" method of "multiprocessing.managers.Server"
    and "multiprocessing.managers.SharedMemoryServer".

  * *obj* in |:library/weakref.txt/weakref.finalize:weakref.finalize()|.

  In future releases of Python, they will be |:glossary.txt/positional-only-parameter:positional-only|. (Contributed by
  Serhiy Storchaka in |:bugs.python.org/issue36492:bpo-36492|.)

# api-and-feature-removals:API and Feature Removals

The following features and APIs have been removed from Python 3.8:

* Starting with Python 3.3, importing ABCs from |:library/collections.txt/module-collections:collections| was deprecated, and
  importing should be done from |:library/collections.abc.txt/module-collections.abc:collections.abc|. Being able to import from
  collections was marked for removal in 3.8, but has been delayed to 3.9. (See
  |:bugs.python.org/issue36952:bpo-36952|.)

* The "macpath" module, deprecated in Python 3.7, has been removed. (Contributed
  by Victor Stinner in |:bugs.python.org/issue35471:bpo-35471|.)

* The function "platform.popen()" has been removed, after having been deprecated
  since Python 3.3: use |:library/os.txt/os.popen:os.popen()| instead. (Contributed by Victor Stinner in
  |:bugs.python.org/issue35345:bpo-35345|.)

* The function "time.clock()" has been removed, after having been deprecated since
  Python 3.3: use |:library/time.txt/time.perf_counter:time.perf_counter()| or |:library/time.txt/time.process_time:time.process_time()| instead,
  depending on your requirements, to have well-defined behavior. (Contributed by
  Matthias Bussonnier in |:bugs.python.org/issue36895:bpo-36895|.)

* The "pyvenv" script has been removed in favor of "python3.8 -m venv" to help
  eliminate confusion as to what Python interpreter the "pyvenv" script is tied
  to. (Contributed by Brett Cannon in |:bugs.python.org/issue25427:bpo-25427|.)

* "parse_qs", "parse_qsl", and "escape" are removed from the |:library/cgi.txt/module-cgi:cgi| module.  They
  are deprecated in Python 3.2 or older. They should be imported from the "
  urllib.parse" and "html" modules instead.

* "filemode" function is removed from the |:library/tarfile.txt/module-tarfile:tarfile| module. It is not documented
  and deprecated since Python 3.3.

* The |:library/xml.etree.elementtree.txt/xml.etree.ElementTree.XMLParser:XMLParser| constructor no longer accepts the *html* argument.  It never had
  an effect and was deprecated in Python 3.4. All other parameters are now
  |:glossary.txt/keyword-only-parameter:keyword-only|. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue29209:bpo-29209|.)

* Removed the "doctype()" method of |:library/xml.etree.elementtree.txt/xml.etree.ElementTree.XMLParser:XMLParser|. (Contributed by Serhiy Storchaka
  in |:bugs.python.org/issue29209:bpo-29209|.)

* “unicode_internal” codec is removed. (Contributed by Inada Naoki in |:bugs.python.org/issue36297:bpo-36297|
  .)

* The "Cache" and "Statement" objects of the |:library/sqlite3.txt/module-sqlite3:sqlite3| module are not exposed to
  the user. (Contributed by Aviv Palivoda in |:bugs.python.org/issue30262:bpo-30262|.)

* The "bufsize" keyword argument of |:library/fileinput.txt/fileinput.input:fileinput.input()| and
  |:library/fileinput.txt/fileinput.FileInput:fileinput.FileInput()| which was ignored and deprecated since Python 3.6 has
  been removed. |:bugs.python.org/issue36952:bpo-36952| (Contributed by Matthias Bussonnier.)

* The functions "sys.set_coroutine_wrapper()" and "sys.get_coroutine_wrapper()"
  deprecated in Python 3.7 have been removed; |:bugs.python.org/issue36933:bpo-36933| (Contributed by Matthias
  Bussonnier.)

# porting-to-python-3-8:Porting to Python 3.8

This section lists previously described changes and other bugfixes that may
require changes to your code.

## changes-in-python-behavior:Changes in Python behavior

* Yield expressions (both "yield" and "yield from" clauses) are now disallowed in
  comprehensions and generator expressions (aside from the iterable expression in
  the leftmost "for" clause). (Contributed by Serhiy Storchaka in |:bugs.python.org/issue10544:bpo-10544|.)

* The compiler now produces a |:library/exceptions.txt/SyntaxWarning:SyntaxWarning| when identity checks ("is" and "is
  not") are used with certain types of literals (e.g. strings, numbers).  These
  can often work by accident in CPython, but are not guaranteed by the language
  spec.  The warning advises users to use equality tests ("==" and "!=") instead.
  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue34850:bpo-34850|.)

* The CPython interpreter can swallow exceptions in some circumstances. In Python
  3.8 this happens in fewer cases.  In particular, exceptions raised when getting
  the attribute from the type dictionary are no longer ignored. (Contributed by
  Serhiy Storchaka in |:bugs.python.org/issue35459:bpo-35459|.)

* Removed "__str__" implementations from builtin types |:library/functions.txt/bool:bool|, |:library/functions.txt/int:int|, |:library/functions.txt/float:float|,
  |:library/functions.txt/complex:complex| and few classes from the standard library.  They now inherit "
  __str__()" from |:library/functions.txt/object:object|. As result, defining the "__repr__()" method in the
  subclass of these classes will affect their string representation. (Contributed
  by Serhiy Storchaka in |:bugs.python.org/issue36793:bpo-36793|.)

* On AIX, |:library/sys.txt/sys.platform:sys.platform| doesn’t contain the major version anymore. It is always "
  'aix'", instead of "'aix3'" .. "'aix7'".  Since older Python versions include
  the version number, so it is recommended to always use "
  sys.platform.startswith('aix')". (Contributed by M. Felt in |:bugs.python.org/issue36588:bpo-36588|.)

* |:c-api/init.txt/c.PyEval_AcquireLock:PyEval_AcquireLock()| and |:c-api/init.txt/c.PyEval_AcquireThread:PyEval_AcquireThread()| now terminate the current
  thread if called while the interpreter is finalizing, making them consistent
  with |:c-api/init.txt/c.PyEval_RestoreThread:PyEval_RestoreThread()|, |:c-api/init.txt/c.Py_END_ALLOW_THREADS:Py_END_ALLOW_THREADS()|, and
  |:c-api/init.txt/c.PyGILState_Ensure:PyGILState_Ensure()|. If this behavior is not desired, guard the call by
  checking "_Py_IsFinalizing()" or "sys.is_finalizing()". (Contributed by Joannah
  Nanjekye in |:bugs.python.org/issue36475:bpo-36475|.)

## changes-in-the-python-api:Changes in the Python API

* The |:library/os.txt/os.getcwdb:os.getcwdb()| function now uses the UTF-8 encoding on Windows, rather than
  the ANSI code page: see *|index-19:⚓|* |:www.python.org/dev/peps/pep-0529:PEP 529| for the rationale. The function
  is no longer deprecated on Windows. (Contributed by Victor Stinner in
  |:bugs.python.org/issue37412:bpo-37412|.)

* |:library/subprocess.txt/subprocess.Popen:subprocess.Popen| can now use |:library/os.txt/os.posix_spawn:os.posix_spawn()| in some cases for better
  performance. On Windows Subsystem for Linux and QEMU User Emulation, the "Popen"
  constructor using |:library/os.txt/os.posix_spawn:os.posix_spawn()| no longer raises an exception on errors
  like “missing program”.  Instead the child process fails with a non-zero "
  returncode". (Contributed by Joannah Nanjekye and Victor Stinner in |:bugs.python.org/issue35537:bpo-35537|
  .)

* The *preexec_fn* argument of * |:library/subprocess.txt/subprocess.Popen:subprocess.Popen| is no longer compatible with
  subinterpreters. The use of the parameter in a subinterpreter now raises
  |:library/exceptions.txt/RuntimeError:RuntimeError|. (Contributed by Eric Snow in |:bugs.python.org/issue34651:bpo-34651|, modified by Christian
  Heimes in |:bugs.python.org/issue37951:bpo-37951|.)

* The "imap.IMAP4.logout()" method no longer silently ignores arbitrary
  exceptions. (Contributed by Victor Stinner in |:bugs.python.org/issue36348:bpo-36348|.)

* The function "platform.popen()" has been removed, after having been deprecated
  since Python 3.3: use |:library/os.txt/os.popen:os.popen()| instead. (Contributed by Victor Stinner in
  |:bugs.python.org/issue35345:bpo-35345|.)

* The |:library/statistics.txt/statistics.mode:statistics.mode()| function no longer raises an exception when given
  multimodal data.  Instead, it returns the first mode encountered in the input
  data.  (Contributed by Raymond Hettinger in |:bugs.python.org/issue35892:bpo-35892|.)

* The |:library/tkinter.ttk.txt/tkinter.ttk.Treeview.selection:selection()| method of the |:library/tkinter.ttk.txt/tkinter.ttk.Treeview:tkinter.ttk.Treeview| class no longer takes
  arguments.  Using it with arguments for changing the selection was deprecated in
  Python 3.6.  Use specialized methods like |:library/tkinter.ttk.txt/tkinter.ttk.Treeview.selection_set:selection_set()| for changing the
  selection.  (Contributed by Serhiy Storchaka in |:bugs.python.org/issue31508:bpo-31508|.)

* The "writexml()", "toxml()" and "toprettyxml()" methods of |:library/xml.dom.minidom.txt/module-xml.dom.minidom:xml.dom.minidom|,
  and the "write()" method of "xml.etree", now preserve the attribute order
  specified by the user. (Contributed by Diego Rojas and Raymond Hettinger in
  |:bugs.python.org/issue34160:bpo-34160|.)

* A |:library/dbm.txt/module-dbm.dumb:dbm.dumb| database opened with flags "'r'" is now read-only.
  |:library/dbm.txt/dbm.dumb.open:dbm.dumb.open()| with flags "'r'" and "'w'" no longer creates a database if it
  does not exist. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue32749:bpo-32749|.)

* The "doctype()" method defined in a subclass of |:library/xml.etree.elementtree.txt/xml.etree.ElementTree.XMLParser:XMLParser| will no longer be
  called and will emit a |:library/exceptions.txt/RuntimeWarning:RuntimeWarning| instead of a |:library/exceptions.txt/DeprecationWarning:DeprecationWarning|.
  Define the |:library/xml.etree.elementtree.txt/xml.etree.ElementTree.TreeBuilder.doctype:doctype()| method on a target for handling an XML doctype
  declaration. (Contributed by Serhiy Storchaka in |:bugs.python.org/issue29209:bpo-29209|.)

* A |:library/exceptions.txt/RuntimeError:RuntimeError| is now raised when the custom metaclass doesn’t provide the "
  __classcell__" entry in the namespace passed to "type.__new__".  A
  |:library/exceptions.txt/DeprecationWarning:DeprecationWarning| was emitted in Python 3.6–3.7.  (Contributed by Serhiy
  Storchaka in |:bugs.python.org/issue23722:bpo-23722|.)

* The "cProfile.Profile" class can now be used as a context manager. (Contributed
  by Scott Sanderson in |:bugs.python.org/issue29235:bpo-29235|.)

* |:library/shutil.txt/shutil.copyfile:shutil.copyfile()|, |:library/shutil.txt/shutil.copy:shutil.copy()|, |:library/shutil.txt/shutil.copy2:shutil.copy2()|, |:library/shutil.txt/shutil.copytree:shutil.copytree()| and
  |:library/shutil.txt/shutil.move:shutil.move()| use platform-specific “fast-copy” syscalls (see
  |:library/shutil.txt/shutil-platform-dependent-efficient-copy-operations:Platform-dependent efficient copy operations| section).

* |:library/shutil.txt/shutil.copyfile:shutil.copyfile()| default buffer size on Windows was changed from 16 KiB to 1
  MiB.

* The "PyGC_Head" struct has changed completely.  All code that touched the struct
  member should be rewritten.  (See |:bugs.python.org/issue33597:bpo-33597|.)

* The |:c-api/init.txt/c.PyInterpreterState:PyInterpreterState| struct has been moved into the “internal” header files
  (specifically Include/internal/pycore_pystate.h).  An opaque "PyInterpreterState
  " is still available as part of the public API (and stable ABI).  The docs
  indicate that none of the struct’s fields are public, so we hope no one has been
  using them.  However, if you do rely on one or more of those private fields and
  have no alternative then please open a BPO issue.  We’ll work on helping you
  adjust (possibly including adding accessor functions to the public API).  (See
  |:bugs.python.org/issue35886:bpo-35886|.)

* The |:library/mmap.txt/mmap.mmap.flush:mmap.flush()| method now returns "None" on success and raises an exception
  on error under all platforms.  Previously, its behavior was platform-dependent:
  a nonzero value was returned on success; zero was returned on error under
  Windows.  A zero value was returned on success; an exception was raised on error
  under Unix. (Contributed by Berker Peksag in |:bugs.python.org/issue2122:bpo-2122|.)

* |:library/xml.dom.minidom.txt/module-xml.dom.minidom:xml.dom.minidom| and |:library/xml.sax.txt/module-xml.sax:xml.sax| modules no longer process external entities by
  default. (Contributed by Christian Heimes in |:bugs.python.org/issue17239:bpo-17239|.)

* Deleting a key from a read-only |:library/dbm.txt/module-dbm:dbm| database (|:library/dbm.txt/module-dbm.dumb:dbm.dumb|, |:library/dbm.txt/module-dbm.gnu:dbm.gnu| or
  |:library/dbm.txt/module-dbm.ndbm:dbm.ndbm|) raises "error" (|:library/dbm.txt/dbm.dumb.error:dbm.dumb.error|, |:library/dbm.txt/dbm.gnu.error:dbm.gnu.error| or
  |:library/dbm.txt/dbm.ndbm.error:dbm.ndbm.error|) instead of |:library/exceptions.txt/KeyError:KeyError|. (Contributed by Xiang Zhang in
  |:bugs.python.org/issue33106:bpo-33106|.)

* Simplified AST for literals.  All constants will be represented as "ast.Constant
  " instances.  Instantiating old classes "Num", "Str", "Bytes", "NameConstant"
  and "Ellipsis" will return an instance of "Constant". (Contributed by Serhiy
  Storchaka in |:bugs.python.org/issue32892:bpo-32892|.)

* |:library/os.path.txt/os.path.expanduser:expanduser()| on Windows now prefers the *|index-20:⚓|* "USERPROFILE"
  environment variable and does not use *|index-21:⚓|* "HOME", which is not
  normally set for regular user accounts. (Contributed by Anthony Sottile in
  |:bugs.python.org/issue36264:bpo-36264|.)

* The exception |:library/asyncio-exceptions.txt/asyncio.CancelledError:asyncio.CancelledError| now inherits from |:library/exceptions.txt/BaseException:BaseException| rather
  than |:library/exceptions.txt/Exception:Exception| and no longer inherits from |:library/concurrent.futures.txt/concurrent.futures.CancelledError:concurrent.futures.CancelledError|
  . (Contributed by Yury Selivanov in |:bugs.python.org/issue32528:bpo-32528|.)

* The function |:library/asyncio-task.txt/asyncio.wait_for:asyncio.wait_for()| now correctly waits for cancellation when
  using an instance of |:library/asyncio-task.txt/asyncio.Task:asyncio.Task|. Previously, upon reaching *timeout*, it was
  cancelled and immediately returned. (Contributed by Elvis Pranskevichus in
  |:bugs.python.org/issue32751:bpo-32751|.)

* The function |:library/asyncio-protocol.txt/asyncio.BaseTransport.get_extra_info:asyncio.BaseTransport.get_extra_info()| now returns a safe to use
  socket object when ‘socket’ is passed to the *name* parameter. (Contributed by
  Yury Selivanov in |:bugs.python.org/issue37027:bpo-37027|.)

* |:library/asyncio-protocol.txt/asyncio.BufferedProtocol:asyncio.BufferedProtocol| has graduated to the stable API.

*|bpo-36085-whatsnew:⚓|*

* DLL dependencies for extension modules and DLLs loaded with |:library/ctypes.txt/module-ctypes:ctypes| on Windows
  are now resolved more securely. Only the system paths, the directory containing
  the DLL or PYD file, and directories added with |:library/os.txt/os.add_dll_directory:add_dll_directory()| are
  searched for load-time dependencies. Specifically, *|index-22:⚓|* "PATH" and the
  current working directory are no longer used, and modifications to these will no
  longer have any effect on normal DLL resolution. If your application relies on
  these mechanisms, you should check for |:library/os.txt/os.add_dll_directory:add_dll_directory()| and if it exists,
  use it to add your DLLs directory while loading your library. Note that Windows
  7 users will need to ensure that Windows Update KB2533623 has been installed
  (this is also verified by the installer). (Contributed by Steve Dower in
  |:bugs.python.org/issue36085:bpo-36085|.)

* The header files and functions related to pgen have been removed after its
  replacement by a pure Python implementation. (Contributed by Pablo Galindo in
  |:bugs.python.org/issue36623:bpo-36623|.)

* |:library/types.txt/types.CodeType:types.CodeType| has a new parameter in the second position of the constructor (
  *posonlyargcount*) to support positional-only arguments defined in
  *|index-23:⚓|* |:www.python.org/dev/peps/pep-0570:PEP 570|. The first argument (*argcount*) now represents the
  total number of positional arguments (including positional-only arguments). The
  new "replace()" method of |:library/types.txt/types.CodeType:types.CodeType| can be used to make the code future-
  proof.

## changes-in-the-c-api:Changes in the C API

* The |:c-api/veryhigh.txt/c.PyCompilerFlags:PyCompilerFlags| structure got a new *cf_feature_version* field. It should
  be initialized to "PY_MINOR_VERSION". The field is ignored by default, and is
  used if and only if "PyCF_ONLY_AST" flag is set in *cf_flags*. (Contributed by
  Guido van Rossum in |:bugs.python.org/issue35766:bpo-35766|.)

* The "PyEval_ReInitThreads()" function has been removed from the C API. It should
  not be called explicitly: use |:c-api/sys.txt/c.PyOS_AfterFork_Child:PyOS_AfterFork_Child()| instead. (Contributed by
  Victor Stinner in |:bugs.python.org/issue36728:bpo-36728|.)

* On Unix, C extensions are no longer linked to libpython except on Android and
  Cygwin. When Python is embedded, "libpython" must not be loaded with "RTLD_LOCAL
  ", but "RTLD_GLOBAL" instead. Previously, using "RTLD_LOCAL", it was already not
  possible to load C extensions which were not linked to "libpython", like C
  extensions of the standard library built by the "*shared*" section of "
  Modules/Setup". (Contributed by Victor Stinner in |:bugs.python.org/issue21536:bpo-21536|.)

* Use of "#" variants of formats in parsing or building value (e.g.
  |:c-api/arg.txt/c.PyArg_ParseTuple:PyArg_ParseTuple()|, |:c-api/arg.txt/c.Py_BuildValue:Py_BuildValue()|, |:c-api/object.txt/c.PyObject_CallFunction:PyObject_CallFunction()|, etc.)
  without "PY_SSIZE_T_CLEAN" defined raises "DeprecationWarning" now. It will be
  removed in 3.10 or 4.0.  Read |:c-api/arg.txt/arg-parsing:Parsing arguments and building values| for
  detail. (Contributed by Inada Naoki in |:bugs.python.org/issue36381:bpo-36381|.)

* Instances of heap-allocated types (such as those created with
  |:c-api/type.txt/c.PyType_FromSpec:PyType_FromSpec()|) hold a reference to their type object. Increasing the
  reference count of these type objects has been moved from
  |:c-api/type.txt/c.PyType_GenericAlloc:PyType_GenericAlloc()| to the more low-level functions, |:c-api/allocation.txt/c.PyObject_Init:PyObject_Init()| and "
  PyObject_INIT()". This makes types created through |:c-api/type.txt/c.PyType_FromSpec:PyType_FromSpec()| behave
  like other classes in managed code.

  Statically allocated types are not affected.

  For the vast majority of cases, there should be no side effect. However, types
  that manually increase the reference count after allocating an instance (perhaps
  to work around the bug) may now become immortal. To avoid this, these classes
  need to call Py_DECREF on the type object during instance deallocation.

  To correctly port these types into 3.8, please apply the following changes:

  * Remove |:c-api/refcounting.txt/c.Py_INCREF:Py_INCREF| on the type object after allocating an instance - if any.
    This may happen after calling |:c-api/allocation.txt/c.PyObject_New:PyObject_New()|, |:c-api/allocation.txt/c.PyObject_NewVar:PyObject_NewVar()|,
    |:c-api/gcsupport.txt/c.PyObject_GC_New:PyObject_GC_New()|, |:c-api/gcsupport.txt/c.PyObject_GC_NewVar:PyObject_GC_NewVar()|, or any other custom allocator that
    uses |:c-api/allocation.txt/c.PyObject_Init:PyObject_Init()| or "PyObject_INIT()".

    Example:

```rst
static foo_struct *
foo_new(PyObject *type) {
    foo_struct *foo = PyObject_GC_New(foo_struct, (PyTypeObject *) type);
    if (foo == NULL)
        return NULL;
#if PY_VERSION_HEX < 0x03080000
    // Workaround for Python issue 35810; no longer necessary in Python 3.8
    PY_INCREF(type)
#endif
    return foo;
}
```

  * Ensure that all custom "tp_dealloc" functions of heap-allocated types decrease
    the type’s reference count.

    Example:

```rst
static void
foo_dealloc(foo_struct *instance) {
    PyObject *type = Py_TYPE(instance);
    PyObject_GC_Del(instance);
#if PY_VERSION_HEX >= 0x03080000
    // This was not needed before Python 3.8 (Python issue 35810)
    Py_DECREF(type);
#endif
}
```

  (Contributed by Eddie Elizondo in |:bugs.python.org/issue35810:bpo-35810|.)

* The |:c-api/intro.txt/c.Py_DEPRECATED:Py_DEPRECATED()| macro has been implemented for MSVC. The macro now must be
  placed before the symbol name.

  Example:

```rst
Py_DEPRECATED(3.8) PyAPI_FUNC(int) Py_OldFunction(void);
```

  (Contributed by Zackery Spytz in |:bugs.python.org/issue33407:bpo-33407|.)

* The interpreter does not pretend to support binary compatibility of extension
  types across feature releases, anymore.  A |:c-api/type.txt/c.PyTypeObject:PyTypeObject| exported by a third-
  party extension module is supposed to have all the slots expected in the current
  Python version, including |:c-api/typeobj.txt/c.PyTypeObject.tp_finalize:tp_finalize| (|:c-api/typeobj.txt/Py_TPFLAGS_HAVE_FINALIZE:Py_TPFLAGS_HAVE_FINALIZE| is not
  checked anymore before reading |:c-api/typeobj.txt/c.PyTypeObject.tp_finalize:tp_finalize|).

  (Contributed by Antoine Pitrou in |:bugs.python.org/issue32388:bpo-32388|.)

* The functions "PyNode_AddChild()" and "PyParser_AddToken()" now accept two
  additional "int" arguments *end_lineno* and *end_col_offset*.

* The "libpython38.a" file to allow MinGW tools to link directly against "
  python38.dll" is no longer included in the regular Windows distribution. If you
  require this file, it may be generated with the "gendef" and "dlltool" tools,
  which are part of the MinGW binutils package:

```rst
gendef - python38.dll > tmp.def
dlltool --dllname python38.dll --def tmp.def --output-lib libpython38.a
```

  The location of an installed "pythonXY.dll" will depend on the installation
  options and the version and language of Windows. See |:using/windows.txt/using-on-windows:Using Python on Windows|
  for more information. The resulting library should be placed in the same
  directory as "pythonXY.lib", which is generally the "libs" directory under your
  Python installation.

  (Contributed by Steve Dower in |:bugs.python.org/issue37351:bpo-37351|.)

## cpython-bytecode-changes:CPython bytecode changes

* The interpreter loop  has been simplified by moving the logic of unrolling the
  stack of blocks into the compiler.  The compiler emits now explicit instructions
  for adjusting the stack of values and calling the cleaning-up code for |:reference/simple_stmts.txt/break:break|,
  |:reference/simple_stmts.txt/continue:continue| and |:reference/simple_stmts.txt/return:return|.

  Removed opcodes "BREAK_LOOP", "CONTINUE_LOOP", "SETUP_LOOP" and "SETUP_EXCEPT".
  Added new opcodes |:library/dis.txt/opcode-ROT_FOUR:ROT_FOUR|, |:library/dis.txt/opcode-BEGIN_FINALLY:BEGIN_FINALLY|, |:library/dis.txt/opcode-CALL_FINALLY:CALL_FINALLY| and |:library/dis.txt/opcode-POP_FINALLY:POP_FINALLY|.
  Changed the behavior of |:library/dis.txt/opcode-END_FINALLY:END_FINALLY| and |:library/dis.txt/opcode-WITH_CLEANUP_START:WITH_CLEANUP_START|.

  (Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in |:bugs.python.org/issue17611:bpo-17611|
  .)

* Added new opcode |:library/dis.txt/opcode-END_ASYNC_FOR:END_ASYNC_FOR| for handling exceptions raised when awaiting a
  next item in an |:reference/compound_stmts.txt/async-for:async for| loop. (Contributed by Serhiy Storchaka in
  |:bugs.python.org/issue33041:bpo-33041|.)

* The |:library/dis.txt/opcode-MAP_ADD:MAP_ADD| now expects the value as the first element in the stack and the
  key as the second element. This change was made so the key is always evaluated
  before the value in dictionary comprehensions, as proposed by *|index-24:⚓|*
  |:www.python.org/dev/peps/pep-0572:PEP 572|. (Contributed by Jörn Heissler in |:bugs.python.org/issue35224:bpo-35224|.)

## demos-and-tools:Demos and Tools

Added a benchmark script for timing various ways to access variables: "
Tools/scripts/var_access_benchmark.py". (Contributed by Raymond Hettinger in
|:bugs.python.org/issue35884:bpo-35884|.)

Here’s a summary of performance improvements since Python 3.3:

```rst
Python version                       3.3     3.4     3.5     3.6     3.7     3.8
--------------                       ---     ---     ---     ---     ---     ---

Variable and attribute read access:
    read_local                       4.0     7.1     7.1     5.4     5.1     3.9
    read_nonlocal                    5.3     7.1     8.1     5.8     5.4     4.4
    read_global                     13.3    15.5    19.0    14.3    13.6     7.6
    read_builtin                    20.0    21.1    21.6    18.5    19.0     7.5
    read_classvar_from_class        20.5    25.6    26.5    20.7    19.5    18.4
    read_classvar_from_instance     18.5    22.8    23.5    18.8    17.1    16.4
    read_instancevar                26.8    32.4    33.1    28.0    26.3    25.4
    read_instancevar_slots          23.7    27.8    31.3    20.8    20.8    20.2
    read_namedtuple                 68.5    73.8    57.5    45.0    46.8    18.4
    read_boundmethod                29.8    37.6    37.9    29.6    26.9    27.7

Variable and attribute write access:
    write_local                      4.6     8.7     9.3     5.5     5.3     4.3
    write_nonlocal                   7.3    10.5    11.1     5.6     5.5     4.7
    write_global                    15.9    19.7    21.2    18.0    18.0    15.8
    write_classvar                  81.9    92.9    96.0   104.6   102.1    39.2
    write_instancevar               36.4    44.6    45.8    40.0    38.9    35.5
    write_instancevar_slots         28.7    35.6    36.1    27.3    26.6    25.7

Data structure read access:
    read_list                       19.2    24.2    24.5    20.8    20.8    19.0
    read_deque                      19.9    24.7    25.5    20.2    20.6    19.8
    read_dict                       19.7    24.3    25.7    22.3    23.0    21.0
    read_strdict                    17.9    22.6    24.3    19.5    21.2    18.9

Data structure write access:
    write_list                      21.2    27.1    28.5    22.5    21.6    20.0
    write_deque                     23.8    28.7    30.1    22.7    21.8    23.5
    write_dict                      25.9    31.4    33.3    29.3    29.2    24.7
    write_strdict                   22.9    28.4    29.9    27.5    25.2    23.1

Stack (or queue) operations:
    list_append_pop                144.2    93.4   112.7    75.4    74.2    50.8
    deque_append_pop                30.4    43.5    57.0    49.4    49.2    42.5
    deque_append_popleft            30.8    43.7    57.3    49.7    49.7    42.8

Timing loop:
    loop_overhead                    0.3     0.5     0.6     0.4     0.3     0.3
```

The benchmarks were measured on an |:ark.intel.com/content/www/us/en/ark/products/76088/intel-core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html:Intel® Core™ i7-4960HQ processor|*|intel-
core-i7-4960hq-processor:⚓|*  running the macOS 64-bit builds found at
|:www.python.org/downloads/mac-osx:python.org|*|python-org:⚓|* . The benchmark script displays timings in
nanoseconds.

# notable-changes-in-python-3-8-1:Notable changes in Python 3.8.1

Due to significant security concerns, the *reuse_address* parameter of
|:library/asyncio-eventloop.txt/asyncio.loop.create_datagram_endpoint:asyncio.loop.create_datagram_endpoint()| is no longer supported. This is
because of the behavior of the socket option "SO_REUSEADDR" in UDP. For more
details, see the documentation for "loop.create_datagram_endpoint()".
(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in |:bugs.python.org/issue37228:bpo-37228|
.)

# notable-changes-in-python-3-8-2:Notable changes in Python 3.8.2

Fixed a regression with the "ignore" callback of |:library/shutil.txt/shutil.copytree:shutil.copytree()|. The
argument types are now str and List[str] again. (Contributed by Manuel Barkhau
and Giampaolo Rodola in |:bugs.python.org/issue39390:bpo-39390|.)

# notable-changes-in-python-3-8-3:Notable changes in Python 3.8.3

The constant values of future flags in the |:library/__future__.txt/module-__future__:__future__| module are updated in
order to prevent collision with compiler flags. Previously "
PyCF_ALLOW_TOP_LEVEL_AWAIT" was clashing with "CO_FUTURE_DIVISION". (Contributed
by Batuhan Taskaya in |:bugs.python.org/issue39562:bpo-39562|)

# notable-changes-in-python-3-8-8:Notable changes in Python 3.8.8

Earlier Python versions allowed using both ";" and "&" as query parameter
separators in |:library/urllib.parse.txt/urllib.parse.parse_qs:urllib.parse.parse_qs()| and |:library/urllib.parse.txt/urllib.parse.parse_qsl:urllib.parse.parse_qsl()|.  Due to
security concerns, and to conform with newer W3C recommendations, this has been
changed to allow only a single separator key, with "&" as the default.  This
change also affects |:library/cgi.txt/cgi.parse:cgi.parse()| and |:library/cgi.txt/cgi.parse_multipart:cgi.parse_multipart()| as they use the
affected functions internally. For more details, please see their respective
documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in
|:bugs.python.org/issue42967:bpo-42967|.)



