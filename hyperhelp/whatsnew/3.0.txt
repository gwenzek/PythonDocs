%hyperhelp title="What’s New In Python 3.0" date="2021-07-11"
*|what-s-new-in-python-3-0:⚓|*

Author:
   Guido van Rossum

This article explains the new features in Python 3.0, compared to 2.6. Python
3.0, also known as “Python 3000” or “Py3K”, is the first ever *intentionally
backwards incompatible* Python release.  There are more changes than in a
typical release, and more that are important for all Python users.
Nevertheless, after digesting the changes, you’ll find that Python really hasn’t
changed all that much – by and large, we’re mostly fixing well-known annoyances
and warts, and removing a lot of old cruft.

This article doesn’t attempt to provide a complete specification of all new
features, but instead tries to give a convenient overview. For full details, you
should refer to the documentation for Python 3.0, and/or the many PEPs
referenced in the text. If you want to understand the complete implementation
and design rationale for a particular feature, PEPs usually have more details
than the regular documentation; but note that PEPs usually are not kept up-to-
date once a feature has been fully implemented.

Due to time constraints this document is not as complete as it should have been.
As always for a new release, the "Misc/NEWS" file in the source distribution
contains a wealth of detailed information about every small thing that was
changed.

# common-stumbling-blocks:Common Stumbling Blocks

This section lists those few changes that are most likely to trip you up if
you’re used to Python 2.5.

## print-is-a-function:Print Is A Function

The "print" statement has been replaced with a |:library/functions.txt/print:print()| function, with keyword
arguments to replace most of the special syntax of the old "print" statement (
*|index-0:⚓|* |:www.python.org/dev/peps/pep-3105:PEP 3105|).  Examples:

```rst
Old: print "The answer is", 2*2
New: print("The answer is", 2*2)

Old: print x,           # Trailing comma suppresses newline
New: print(x, end=" ")  # Appends a space instead of a newline

Old: print              # Prints a newline
New: print()            # You must call the function!

Old: print >>sys.stderr, "fatal error"
New: print("fatal error", file=sys.stderr)

Old: print (x, y)       # prints repr((x, y))
New: print((x, y))      # Not the same as print(x, y)!
```

You can also customize the separator between items, e.g.:

```rst
print("There are <", 2**32, "> possibilities!", sep="")
```

which produces:

```rst
There are <4294967296> possibilities!
```

Note:

* The |:library/functions.txt/print:print()| function doesn’t support the “softspace” feature of the old "print
  " statement.  For example, in Python 2.x, "print "A\n", "B"" would write "
  "A\nB\n""; but in Python 3.0, "print("A\n", "B")" writes ""A\n B\n"".

* Initially, you’ll be finding yourself typing the old "print x" a lot in
  interactive mode.  Time to retrain your fingers to type "print(x)" instead!

* When using the "2to3" source-to-source conversion tool, all "print" statements
  are automatically converted to |:library/functions.txt/print:print()| function calls, so this is mostly a
  non-issue for larger projects.

## views-and-iterators-instead-of-lists:Views And Iterators Instead Of Lists

Some well-known APIs no longer return lists:

* |:library/stdtypes.txt/dict:dict| methods |:library/stdtypes.txt/dict.keys:dict.keys()|, |:library/stdtypes.txt/dict.items:dict.items()| and |:library/stdtypes.txt/dict.values:dict.values()| return “views”
  instead of lists.  For example, this no longer works: "k = d.keys(); k.sort()".
  Use "k = sorted(d)" instead (this works in Python 2.5 too and is just as
  efficient).

* Also, the "dict.iterkeys()", "dict.iteritems()" and "dict.itervalues()" methods
  are no longer supported.

* |:library/functions.txt/map:map()| and |:library/functions.txt/filter:filter()| return iterators.  If you really need a list and the
  input sequences are all of equal length, a quick fix is to wrap |:library/functions.txt/map:map()| in
  |:library/stdtypes.txt/list:list()|, e.g. "list(map(...))", but a better fix is often to use a list
  comprehension (especially when the original code uses |:reference/expressions.txt/lambda:lambda|), or rewriting
  the code so it doesn’t need a list at all.  Particularly tricky is |:library/functions.txt/map:map()|
  invoked for the side effects of the function; the correct transformation is to
  use a regular |:reference/compound_stmts.txt/for:for| loop (since creating a list would just be wasteful).

  If the input sequences are not of equal length, |:library/functions.txt/map:map()| will stop at the
  termination of the shortest of the sequences. For full compatibility with
  |:library/functions.txt/map:map()| from Python 2.x, also wrap the sequences in |:library/itertools.txt/itertools.zip_longest:itertools.zip_longest()|,
  e.g. "map(func, *sequences)" becomes "list(map(func,
  itertools.zip_longest(*sequences)))".

* |:library/stdtypes.txt/range:range()| now behaves like "xrange()" used to behave, except it works with
  values of arbitrary size.  The latter no longer exists.

* |:library/functions.txt/zip:zip()| now returns an iterator.

## ordering-comparisons:Ordering Comparisons

Python 3.0 has simplified the rules for ordering comparisons:

* The ordering comparison operators ("<", "<=", ">=", ">") raise a TypeError
  exception when the operands don’t have a meaningful natural ordering.  Thus,
  expressions like "1 < ''", "0 > None" or "len <= len" are no longer valid, and
  e.g. "None < None" raises |:library/exceptions.txt/TypeError:TypeError| instead of returning "False".  A corollary
  is that sorting a heterogeneous list no longer makes sense – all the elements
  must be comparable to each other.  Note that this does not apply to the "==" and
  "!=" operators: objects of different incomparable types always compare unequal
  to each other.

* "builtin.sorted()" and |:library/stdtypes.txt/list.sort:list.sort()| no longer accept the *cmp* argument
  providing a comparison function.  Use the *key* argument instead. N.B. the *key*
  and *reverse* arguments are now “keyword-only”.

* The "cmp()" function should be treated as gone, and the "__cmp__()" special
  method is no longer supported.  Use "__lt__()" for sorting, "__eq__()" with "
  __hash__()", and other rich comparisons as needed. (If you really need the "
  cmp()" functionality, you could use the expression "(a > b) - (a < b)" as the
  equivalent for "cmp(a, b)".)

## integers:Integers

* *|index-1:⚓|* |:www.python.org/dev/peps/pep-0237:PEP 237|: Essentially, "long" renamed to |:library/functions.txt/int:int|. That is, there is
  only one built-in integral type, named |:library/functions.txt/int:int|; but it behaves mostly like the old
  "long" type.

* *|index-2:⚓|* |:www.python.org/dev/peps/pep-0238:PEP 238|: An expression like "1/2" returns a float.  Use "1//2"
  to get the truncating behavior.  (The latter syntax has existed for years, at
  least since Python 2.2.)

* The "sys.maxint" constant was removed, since there is no longer a limit to the
  value of integers.  However, |:library/sys.txt/sys.maxsize:sys.maxsize| can be used as an integer larger than
  any practical list or string index.  It conforms to the implementation’s
  “natural” integer size and is typically the same as "sys.maxint" in previous
  releases on the same platform (assuming the same build options).

* The |:library/functions.txt/repr:repr()| of a long integer doesn’t include the trailing "L" anymore, so code
  that unconditionally strips that character will chop off the last digit instead.
  (Use |:library/stdtypes.txt/str:str()| instead.)

* Octal literals are no longer of the form "0720"; use "0o720" instead.

## text-vs-data-instead-of-unicode-vs-8-bit:Text Vs. Data Instead Of Unicode Vs.
8-bit

Everything you thought you knew about binary data and Unicode has changed.

* Python 3.0 uses the concepts of *text* and (binary) *data* instead of Unicode
  strings and 8-bit strings.  All text is Unicode; however *encoded* Unicode is
  represented as binary data.  The type used to hold text is |:library/stdtypes.txt/str:str|, the type used
  to hold data is |:library/stdtypes.txt/bytes:bytes|.  The biggest difference with the 2.x situation is that
  any attempt to mix text and data in Python 3.0 raises |:library/exceptions.txt/TypeError:TypeError|, whereas if
  you were to mix Unicode and 8-bit strings in Python 2.x, it would work if the
  8-bit string happened to contain only 7-bit (ASCII) bytes, but you would get
  |:library/exceptions.txt/UnicodeDecodeError:UnicodeDecodeError| if it contained non-ASCII values.  This value-specific
  behavior has caused numerous sad faces over the years.

* As a consequence of this change in philosophy, pretty much all code that uses
  Unicode, encodings or binary data most likely has to change.  The change is for
  the better, as in the 2.x world there were numerous bugs having to do with
  mixing encoded and unencoded text.  To be prepared in Python 2.x, start using "
  unicode" for all unencoded text, and |:library/stdtypes.txt/str:str| for binary or encoded data only.
  Then the "2to3" tool will do most of the work for you.

* You can no longer use "u"..."" literals for Unicode text. However, you must use
  "b"..."" literals for binary data.

* As the |:library/stdtypes.txt/str:str| and |:library/stdtypes.txt/bytes:bytes| types cannot be mixed, you must always explicitly
  convert between them.  Use |:library/stdtypes.txt/str.encode:str.encode()| to go from |:library/stdtypes.txt/str:str| to |:library/stdtypes.txt/bytes:bytes|, and
  |:library/stdtypes.txt/bytes.decode:bytes.decode()| to go from |:library/stdtypes.txt/bytes:bytes| to |:library/stdtypes.txt/str:str|.  You can also use "bytes(s,
  encoding=...)" and "str(b, encoding=...)", respectively.

* Like |:library/stdtypes.txt/str:str|, the |:library/stdtypes.txt/bytes:bytes| type is immutable.  There is a separate *mutable* type
  to hold buffered binary data, |:library/stdtypes.txt/bytearray:bytearray|.  Nearly all APIs that accept |:library/stdtypes.txt/bytes:bytes|
  also accept |:library/stdtypes.txt/bytearray:bytearray|.  The mutable API is based on "
  collections.MutableSequence".

* All backslashes in raw string literals are interpreted literally. This means
  that "'\U'" and "'\u'" escapes in raw strings are not treated specially.  For
  example, "r'\u20ac'" is a string of 6 characters in Python 3.0, whereas in 2.6,
  "ur'\u20ac'" was the single “euro” character.  (Of course, this change only
  affects raw string literals; the euro character is "'\u20ac'" in Python 3.0.)

* The built-in "basestring" abstract type was removed.  Use |:library/stdtypes.txt/str:str| instead.  The
  |:library/stdtypes.txt/str:str| and |:library/stdtypes.txt/bytes:bytes| types don’t have functionality enough in common to warrant a
  shared base class.  The "2to3" tool (see below) replaces every occurrence of "
  basestring" with |:library/stdtypes.txt/str:str|.

* Files opened as text files (still the default mode for |:library/functions.txt/open:open()|) always use an
  encoding to map between strings (in memory) and bytes (on disk).  Binary files
  (opened with a "b" in the mode argument) always use bytes in memory.  This means
  that if a file is opened using an incorrect mode or encoding, I/O will likely
  fail loudly, instead of silently producing incorrect data.  It also means that
  even Unix users will have to specify the correct mode (text or binary) when
  opening a file.  There is a platform-dependent default encoding, which on Unixy
  platforms can be set with the "LANG" environment variable (and sometimes also
  with some other platform-specific locale-related environment variables).  In
  many cases, but not all, the system default is UTF-8; you should never count on
  this default.  Any application reading or writing more than pure ASCII text
  should probably have a way to override the encoding. There is no longer any need
  for using the encoding-aware streams in the |:library/codecs.txt/module-codecs:codecs| module.

* The initial values of |:library/sys.txt/sys.stdin:sys.stdin|, |:library/sys.txt/sys.stdout:sys.stdout| and |:library/sys.txt/sys.stderr:sys.stderr| are now
  unicode-only text files (i.e., they are instances of |:library/io.txt/io.TextIOBase:io.TextIOBase|).  To read
  and write bytes data with these streams, you need to use their
  |:library/io.txt/io.TextIOBase.buffer:io.TextIOBase.buffer| attribute.

* Filenames are passed to and returned from APIs as (Unicode) strings. This can
  present platform-specific problems because on some platforms filenames are
  arbitrary byte strings.  (On the other hand, on Windows filenames are natively
  stored as Unicode.)  As a work-around, most APIs (e.g. |:library/functions.txt/open:open()| and many
  functions in the |:library/os.txt/module-os:os| module) that take filenames accept |:library/stdtypes.txt/bytes:bytes| objects as well
  as strings, and a few APIs have a way to ask for a |:library/stdtypes.txt/bytes:bytes| return value.  Thus,
  |:library/os.txt/os.listdir:os.listdir()| returns a list of |:library/stdtypes.txt/bytes:bytes| instances if the argument is a |:library/stdtypes.txt/bytes:bytes|
  instance, and |:library/os.txt/os.getcwdb:os.getcwdb()| returns the current working directory as a |:library/stdtypes.txt/bytes:bytes|
  instance.  Note that when |:library/os.txt/os.listdir:os.listdir()| returns a list of strings, filenames
  that cannot be decoded properly are omitted rather than raising |:library/exceptions.txt/UnicodeError:UnicodeError|.

* Some system APIs like |:library/os.txt/os.environ:os.environ| and |:library/sys.txt/sys.argv:sys.argv| can also present problems when
  the bytes made available by the system is not interpretable using the default
  encoding.  Setting the "LANG" variable and rerunning the program is probably the
  best approach.

* *|index-3:⚓|* |:www.python.org/dev/peps/pep-3138:PEP 3138|: The |:library/functions.txt/repr:repr()| of a string no longer escapes non-ASCII
  characters.  It still escapes control characters and code points with non-
  printable status in the Unicode standard, however.

* *|index-4:⚓|* |:www.python.org/dev/peps/pep-3120:PEP 3120|: The default source encoding is now UTF-8.

* *|index-5:⚓|* |:www.python.org/dev/peps/pep-3131:PEP 3131|: Non-ASCII letters are now allowed in identifiers.
  (However, the standard library remains ASCII-only with the exception of
  contributor names in comments.)

* The "StringIO" and "cStringIO" modules are gone.  Instead, import the |:library/io.txt/module-io:io|
  module and use |:library/io.txt/io.StringIO:io.StringIO| or |:library/io.txt/io.BytesIO:io.BytesIO| for text and data respectively.

* See also the |:howto/unicode.txt/unicode-howto:Unicode HOWTO|, which was updated for Python 3.0.

# overview-of-syntax-changes:Overview Of Syntax Changes

This section gives a brief overview of every *syntactic* change in Python 3.0.

## new-syntax:New Syntax

* *|index-6:⚓|* |:www.python.org/dev/peps/pep-3107:PEP 3107|: Function argument and return value annotations.  This
  provides a standardized way of annotating a function’s parameters and return
  value.  There are no semantics attached to such annotations except that they can
  be introspected at runtime using the "__annotations__" attribute.  The intent is
  to encourage experimentation through metaclasses, decorators or frameworks.

* *|index-7:⚓|* |:www.python.org/dev/peps/pep-3102:PEP 3102|: Keyword-only arguments.  Named parameters occurring
  after "*args" in the parameter list *must* be specified using keyword syntax in
  the call.  You can also use a bare "*" in the parameter list to indicate that
  you don’t accept a variable-length argument list, but you do have keyword-only
  arguments.

* Keyword arguments are allowed after the list of base classes in a class
  definition.  This is used by the new convention for specifying a metaclass (see
  next section), but can be used for other purposes as well, as long as the
  metaclass supports it.

* *|index-8:⚓|* |:www.python.org/dev/peps/pep-3104:PEP 3104|: |:reference/simple_stmts.txt/nonlocal:nonlocal| statement.  Using "nonlocal x" you can now
  assign directly to a variable in an outer (but non-global) scope.  "nonlocal" is
  a new reserved word.

* *|index-9:⚓|* |:www.python.org/dev/peps/pep-3132:PEP 3132|: Extended Iterable Unpacking.  You can now write things
  like "a, b, *rest = some_sequence".  And even "*rest, a = stuff".  The "rest"
  object is always a (possibly empty) list; the right-hand side may be any
  iterable.  Example:

```rst
(a, *rest, b) = range(5)
```

  This sets *a* to "0", *b* to "4", and *rest* to "[1, 2, 3]".

* Dictionary comprehensions: "{k: v for k, v in stuff}" means the same thing as "
  dict(stuff)" but is more flexible.  (This is *|index-10:⚓|* |:www.python.org/dev/peps/pep-0274:PEP 274|
  vindicated. :-)

* Set literals, e.g. "{1, 2}".  Note that "{}" is an empty dictionary; use "set()"
  for an empty set.  Set comprehensions are also supported; e.g., "{x for x in
  stuff}" means the same thing as "set(stuff)" but is more flexible.

* New octal literals, e.g. "0o720" (already in 2.6).  The old octal literals ("
  0720") are gone.

* New binary literals, e.g. "0b1010" (already in 2.6), and there is a new
  corresponding built-in function, |:library/functions.txt/bin:bin()|.

* Bytes literals are introduced with a leading "b" or "B", and there is a new
  corresponding built-in function, |:library/stdtypes.txt/bytes:bytes()|.

## changed-syntax:Changed Syntax

* *|index-11:⚓|* |:www.python.org/dev/peps/pep-3109:PEP 3109| and *|index-12:⚓|* |:www.python.org/dev/peps/pep-3134:PEP 3134|: new |:reference/simple_stmts.txt/raise:raise| statement
  syntax: "raise [*expr* [from *expr*]]".  See below.

* "as" and |:reference/compound_stmts.txt/with:with| are now reserved words.  (Since 2.6, actually.)

* "True", "False", and "None" are reserved words.  (2.6 partially enforced the
  restrictions on "None" already.)

* Change from |:reference/compound_stmts.txt/except:except| *exc*, *var* to "except" *exc* "as" *var*.  See
  *|index-13:⚓|* |:www.python.org/dev/peps/pep-3110:PEP 3110|.

* *|index-14:⚓|* |:www.python.org/dev/peps/pep-3115:PEP 3115|: New Metaclass Syntax.  Instead of:

```rst
class C:
    __metaclass__ = M
    ...
```

  you must now use:

```rst
class C(metaclass=M):
    ...
```

  The module-global "__metaclass__" variable is no longer supported.  (It was a
  crutch to make it easier to default to new-style classes without deriving every
  class from |:library/functions.txt/object:object|.)

* List comprehensions no longer support the syntactic form "[... for *var* in *
  item1*, *item2*, ...]".  Use "[... for *var* in (*item1*, *item2*, ...)]"
  instead. Also note that list comprehensions have different semantics: they are
  closer to syntactic sugar for a generator expression inside a |:library/stdtypes.txt/list:list()|
  constructor, and in particular the loop control variables are no longer leaked
  into the surrounding scope.

* The *ellipsis* ("...") can be used as an atomic expression anywhere.
  (Previously it was only allowed in slices.)  Also, it *must* now be spelled as "
  ...".  (Previously it could also be spelled as ". . .", by a mere accident of
  the grammar.)

## removed-syntax:Removed Syntax

* *|index-15:⚓|* |:www.python.org/dev/peps/pep-3113:PEP 3113|: Tuple parameter unpacking removed.  You can no longer
  write "def foo(a, (b, c)): ...". Use "def foo(a, b_c): b, c = b_c" instead.

* Removed backticks (use |:library/functions.txt/repr:repr()| instead).

* Removed "<>" (use "!=" instead).

* Removed keyword: |:library/functions.txt/exec:exec()| is no longer a keyword; it remains as a function.
  (Fortunately the function syntax was also accepted in 2.x.)  Also note that
  |:library/functions.txt/exec:exec()| no longer takes a stream argument; instead of "exec(f)" you can use "
  exec(f.read())".

* Integer literals no longer support a trailing "l" or "L".

* String literals no longer support a leading "u" or "U".

* The |:reference/simple_stmts.txt/from:from| *module* |:reference/simple_stmts.txt/import:import| "*" syntax is only allowed at the module level, no
  longer inside functions.

* The only acceptable syntax for relative imports is "from .[*module*] import *
  name*".  All |:reference/simple_stmts.txt/import:import| forms not starting with "." are interpreted as absolute
  imports.  (*|index-16:⚓|* |:www.python.org/dev/peps/pep-0328:PEP 328|)

* Classic classes are gone.

# changes-already-present-in-python-2-6:Changes Already Present In Python 2.6

Since many users presumably make the jump straight from Python 2.5 to Python
3.0, this section reminds the reader of new features that were originally
designed for Python 3.0 but that were back-ported to Python 2.6.  The
corresponding sections in |:whatsnew/2.6.txt/whats-new-in-2-6:What’s New in Python 2.6| should be consulted for
longer descriptions.

* |:whatsnew/2.6.txt/pep-0343:PEP 343: The ‘with’ statement|.  The |:reference/compound_stmts.txt/with:with| statement is now a standard feature
  and no longer needs to be imported from the |:library/__future__.txt/module-__future__:__future__|. Also check out
  |:whatsnew/2.6.txt/new-26-context-managers:Writing Context Managers| and |:whatsnew/2.6.txt/new-module-contextlib:The contextlib module|.

* |:whatsnew/2.6.txt/pep-0366:PEP 366: Explicit Relative Imports From a Main Module|.  This enhances the
  usefulness of the |:using/cmdline.txt/cmdoption-m:-m| option when the referenced module lives in a package.

* |:whatsnew/2.6.txt/pep-0370:PEP 370: Per-user site-packages Directory|.

* |:whatsnew/2.6.txt/pep-0371:PEP 371: The multiprocessing Package|.

* |:whatsnew/2.6.txt/pep-3101:PEP 3101: Advanced String Formatting|.  Note: the 2.6 description mentions the
  |:library/functions.txt/format:format()| method for both 8-bit and Unicode strings.  In 3.0, only the |:library/stdtypes.txt/str:str|
  type (text strings with Unicode support) supports this method; the |:library/stdtypes.txt/bytes:bytes| type
  does not.  The plan is to eventually make this the only API for string
  formatting, and to start deprecating the "%" operator in Python 3.1.

* |:whatsnew/2.6.txt/pep-3105:PEP 3105: print As a Function|.  This is now a standard feature and no longer
  needs to be imported from |:library/__future__.txt/module-__future__:__future__|.  More details were given above.

* |:whatsnew/2.6.txt/pep-3110:PEP 3110: Exception-Handling Changes|.  The |:reference/compound_stmts.txt/except:except| *exc* "as" *var* syntax is
  now standard and "except" *exc*, *var* is no longer supported.  (Of course, the
  "as" *var* part is still optional.)

* |:whatsnew/2.6.txt/pep-3112:PEP 3112: Byte Literals|.  The "b"..."" string literal notation (and its
  variants like "b'...'", "b"""..."""", and "br"..."") now produces a literal of
  type |:library/stdtypes.txt/bytes:bytes|.

* |:whatsnew/2.6.txt/pep-3116:PEP 3116: New I/O Library|.  The |:library/io.txt/module-io:io| module is now the standard way of doing
  file I/O.  The built-in |:library/functions.txt/open:open()| function is now an alias for |:library/io.txt/io.open:io.open()| and
  has additional keyword arguments *encoding*, *errors*, *newline* and *closefd*.
  Also note that an invalid *mode* argument now raises |:library/exceptions.txt/ValueError:ValueError|, not |:library/exceptions.txt/IOError:IOError|
  .  The binary file object underlying a text file object can be accessed as "
  f.buffer" (but beware that the text object maintains a buffer of itself in order
  to speed up the encoding and decoding operations).

* |:whatsnew/2.6.txt/pep-3118:PEP 3118: Revised Buffer Protocol|.  The old builtin "buffer()" is now really
  gone; the new builtin |:library/stdtypes.txt/memoryview:memoryview()| provides (mostly) similar functionality.

* |:whatsnew/2.6.txt/pep-3119:PEP 3119: Abstract Base Classes|.  The |:library/abc.txt/module-abc:abc| module and the ABCs defined in the
  |:library/collections.txt/module-collections:collections| module plays a somewhat more prominent role in the language now,
  and built-in collection types like |:library/stdtypes.txt/dict:dict| and |:library/stdtypes.txt/list:list| conform to the "
  collections.MutableMapping" and "collections.MutableSequence" ABCs,
  respectively.

* |:whatsnew/2.6.txt/pep-3127:PEP 3127: Integer Literal Support and Syntax|.  As mentioned above, the new
  octal literal notation is the only one supported, and binary literals have been
  added.

* |:whatsnew/2.6.txt/pep-3129:PEP 3129: Class Decorators|.

* |:whatsnew/2.6.txt/pep-3141:PEP 3141: A Type Hierarchy for Numbers|.  The |:library/numbers.txt/module-numbers:numbers| module is another new
  use of ABCs, defining Python’s “numeric tower”.  Also note the new |:library/fractions.txt/module-fractions:fractions|
  module which implements |:library/numbers.txt/numbers.Rational:numbers.Rational|.

# library-changes:Library Changes

Due to time constraints, this document does not exhaustively cover the very
extensive changes to the standard library.  *|index-17:⚓|* |:www.python.org/dev/peps/pep-3108:PEP 3108| is the
reference for the major changes to the library.  Here’s a capsule review:

* Many old modules were removed.  Some, like "gopherlib" (no longer used) and "md5
  " (replaced by |:library/hashlib.txt/module-hashlib:hashlib|), were already deprecated by *|index-18:⚓|* |:www.python.org/dev/peps/pep-0004:PEP 4|.
  Others were removed as a result of the removal of support for various platforms
  such as Irix, BeOS and Mac OS 9 (see *|index-19:⚓|* |:www.python.org/dev/peps/pep-0011:PEP 11|).  Some modules
  were also selected for removal in Python 3.0 due to lack of use or because a
  better replacement exists.  See *|index-20:⚓|* |:www.python.org/dev/peps/pep-3108:PEP 3108| for an exhaustive
  list.

* The "bsddb3" package was removed because its presence in the core standard
  library has proved over time to be a particular burden for the core developers
  due to testing instability and Berkeley DB’s release schedule.  However, the
  package is alive and well, externally maintained at
  |:www.jcea.es/programacion/pybsddb.htm:https://www.jcea.es/programacion/pybsddb.htm|.

* Some modules were renamed because their old name disobeyed *|index-21:⚓|*
  |:www.python.org/dev/peps/pep-0008:PEP 8|, or for various other reasons.  Here’s the list:

  +-------------------------+-------------------------+
  | Old Name                | New Name                |
  |=========================|=========================|
  | _winreg                 | winreg                  |
  +-------------------------+-------------------------+
  | ConfigParser            | configparser            |
  +-------------------------+-------------------------+
  | copy_reg                | copyreg                 |
  +-------------------------+-------------------------+
  | Queue                   | queue                   |
  +-------------------------+-------------------------+
  | SocketServer            | socketserver            |
  +-------------------------+-------------------------+
  | markupbase              | _markupbase             |
  +-------------------------+-------------------------+
  | repr                    | reprlib                 |
  +-------------------------+-------------------------+
  | test.test_support       | test.support            |
  +-------------------------+-------------------------+

* A common pattern in Python 2.x is to have one version of a module implemented in
  pure Python, with an optional accelerated version implemented as a C extension;
  for example, |:library/pickle.txt/module-pickle:pickle| and "cPickle".  This places the burden of importing the
  accelerated version and falling back on the pure Python version on each user of
  these modules.  In Python 3.0, the accelerated versions are considered
  implementation details of the pure Python versions. Users should always import
  the standard version, which attempts to import the accelerated version and falls
  back to the pure Python version.  The |:library/pickle.txt/module-pickle:pickle| / "cPickle" pair received this
  treatment.  The |:library/profile.txt/module-profile:profile| module is on the list for 3.1.  The "StringIO" module
  has been turned into a class in the |:library/io.txt/module-io:io| module.

* Some related modules have been grouped into packages, and usually the submodule
  names have been simplified.  The resulting new packages are:

  * |:library/dbm.txt/module-dbm:dbm| ("anydbm", "dbhash", |:library/dbm.txt/module-dbm:dbm|, "dumbdbm", "gdbm", "whichdb").

  * |:library/html.txt/module-html:html| ("HTMLParser", "htmlentitydefs").

  * |:library/http.txt/module-http:http| ("httplib", "BaseHTTPServer", "CGIHTTPServer", "SimpleHTTPServer", "
    Cookie", "cookielib").

  * |:library/tkinter.txt/module-tkinter:tkinter| (all "Tkinter"-related modules except |:library/turtle.txt/module-turtle:turtle|).  The target audience
    of |:library/turtle.txt/module-turtle:turtle| doesn’t really care about |:library/tkinter.txt/module-tkinter:tkinter|.  Also note that as of Python
    2.6, the functionality of |:library/turtle.txt/module-turtle:turtle| has been greatly enhanced.

  * |:library/urllib.txt/module-urllib:urllib| (|:library/urllib.txt/module-urllib:urllib|, "urllib2", "urlparse", "robotparse").

  * "xmlrpc" ("xmlrpclib", "DocXMLRPCServer", "SimpleXMLRPCServer").

Some other changes to standard library modules, not covered by *|index-22:⚓|*
|:www.python.org/dev/peps/pep-3108:PEP 3108|:

* Killed "sets".  Use the built-in |:library/stdtypes.txt/set:set()| class.

* Cleanup of the |:library/sys.txt/module-sys:sys| module: removed "sys.exitfunc()", "sys.exc_clear()", "
  sys.exc_type", "sys.exc_value", "sys.exc_traceback".  (Note that |:library/sys.txt/sys.last_type:sys.last_type|
  etc. remain.)

* Cleanup of the |:library/array.txt/array.array:array.array| type: the "read()" and "write()" methods are gone;
  use "fromfile()" and "tofile()" instead.  Also, the "'c'" typecode for array is
  gone – use either "'b'" for bytes or "'u'" for Unicode characters.

* Cleanup of the |:library/operator.txt/module-operator:operator| module: removed "sequenceIncludes()" and "isCallable()
  ".

* Cleanup of the "thread" module: "acquire_lock()" and "release_lock()" are gone;
  use "acquire()" and "release()" instead.

* Cleanup of the |:library/random.txt/module-random:random| module: removed the "jumpahead()" API.

* The "new" module is gone.

* The functions "os.tmpnam()", "os.tempnam()" and "os.tmpfile()" have been removed
  in favor of the |:library/tempfile.txt/module-tempfile:tempfile| module.

* The |:library/tokenize.txt/module-tokenize:tokenize| module has been changed to work with bytes.  The main entry point
  is now |:library/tokenize.txt/tokenize.tokenize:tokenize.tokenize()|, instead of generate_tokens.

* "string.letters" and its friends ("string.lowercase" and "string.uppercase") are
  gone.  Use |:library/string.txt/string.ascii_letters:string.ascii_letters| etc. instead.  (The reason for the removal is
  that "string.letters" and friends had locale-specific behavior, which is a bad
  idea for such attractively-named global “constants”.)

* Renamed module "__builtin__" to |:library/builtins.txt/module-builtins:builtins| (removing the underscores, adding an
  ‘s’).  The "__builtins__" variable found in most global namespaces is unchanged.
  To modify a builtin, you should use |:library/builtins.txt/module-builtins:builtins|, not "__builtins__"!

# pep-3101-a-new-approach-to-string-formatting:*|index-23:⚓|* |:www.python.org/dev/peps/pep-3101:PEP 3101|: A New
Approach To String Formatting

* A new system for  built-in string formatting operations replaces the "%" string
  formatting operator.   (However, the "%"  operator is still supported;  it will
  be deprecated in  Python 3.1  and removed from the language at some later time.)
  Read *|index-24:⚓|* |:www.python.org/dev/peps/pep-3101:PEP 3101| for the full scoop.

# changes-to-exceptions:Changes To Exceptions

The APIs for raising and catching exception have been cleaned up and new
powerful features added:

* *|index-25:⚓|* |:www.python.org/dev/peps/pep-0352:PEP 352|: All exceptions must be derived (directly or
  indirectly) from |:library/exceptions.txt/BaseException:BaseException|.  This is the root of the exception hierarchy.
  This is not new as a recommendation, but the *requirement* to inherit from
  |:library/exceptions.txt/BaseException:BaseException| is new.  (Python 2.6 still allowed classic classes to be raised,
  and placed no restriction on what you can catch.)  As a consequence, string
  exceptions are finally truly and utterly dead.

* Almost all exceptions should actually derive from |:library/exceptions.txt/Exception:Exception|; |:library/exceptions.txt/BaseException:BaseException|
  should only be used as a base class for exceptions that should only be handled
  at the top level, such as |:library/exceptions.txt/SystemExit:SystemExit| or |:library/exceptions.txt/KeyboardInterrupt:KeyboardInterrupt|.  The recommended
  idiom for handling all exceptions except for this latter category is to use
  |:reference/compound_stmts.txt/except:except| |:library/exceptions.txt/Exception:Exception|.

* "StandardError" was removed.

* Exceptions no longer behave as sequences.  Use the "args" attribute instead.

* *|index-26:⚓|* |:www.python.org/dev/peps/pep-3109:PEP 3109|: Raising exceptions.  You must now use "raise *
  Exception*(*args*)" instead of "raise *Exception*, *args*". Additionally, you
  can no longer explicitly specify a traceback; instead, if you *have* to do this,
  you can assign directly to the "__traceback__" attribute (see below).

* *|index-27:⚓|* |:www.python.org/dev/peps/pep-3110:PEP 3110|: Catching exceptions.  You must now use "except *
  SomeException* as *variable*" instead of "except *SomeException*, *variable*".
  Moreover, the *variable* is explicitly deleted when the |:reference/compound_stmts.txt/except:except| block is left.

* *|index-28:⚓|* |:www.python.org/dev/peps/pep-3134:PEP 3134|: Exception chaining.  There are two cases: implicit
  chaining and explicit chaining.  Implicit chaining happens when an exception is
  raised in an |:reference/compound_stmts.txt/except:except| or |:reference/compound_stmts.txt/finally:finally| handler block.  This usually happens due to a
  bug in the handler block; we call this a *secondary* exception.  In this case,
  the original exception (that was being handled) is saved as the "__context__"
  attribute of the secondary exception. Explicit chaining is invoked with this
  syntax:

```rst
raise SecondaryException() from primary_exception
```

  (where *primary_exception* is any expression that produces an exception object,
  probably an exception that was previously caught). In this case, the primary
  exception is stored on the "__cause__" attribute of the secondary exception.
  The traceback printed when an unhandled exception occurs walks the chain of "
  __cause__" and "__context__" attributes and prints a separate traceback for each
  component of the chain, with the primary exception at the top.  (Java users may
  recognize this behavior.)

* *|index-29:⚓|* |:www.python.org/dev/peps/pep-3134:PEP 3134|: Exception objects now store their traceback as the "
  __traceback__" attribute.  This means that an exception object now contains all
  the information pertaining to an exception, and there are fewer reasons to use
  |:library/sys.txt/sys.exc_info:sys.exc_info()| (though the latter is not removed).

* A few exception messages are improved when Windows fails to load an extension
  module.  For example, "error code 193" is now "%1 is not a valid Win32
  application".  Strings now deal with non-English locales.

# miscellaneous-other-changes:Miscellaneous Other Changes## operators-and-
special-methods:Operators And Special Methods

* "!=" now returns the opposite of "==", unless "==" returns |:library/constants.txt/NotImplemented:NotImplemented|.

* The concept of “unbound methods” has been removed from the language. When
  referencing a method as a class attribute, you now get a plain function object.

* "__getslice__()", "__setslice__()" and "__delslice__()" were killed.  The syntax
  "a[i:j]" now translates to "a.__getitem__(slice(i, j))" (or "__setitem__()" or "
  __delitem__()", when used as an assignment or deletion target, respectively).

* *|index-30:⚓|* |:www.python.org/dev/peps/pep-3114:PEP 3114|: the standard |:library/functions.txt/next:next()| method has been renamed to
  |:library/stdtypes.txt/iterator.__next__:__next__()|.

* The "__oct__()" and "__hex__()" special methods are removed – |:library/functions.txt/oct:oct()| and
  |:library/functions.txt/hex:hex()| use "__index__()" now to convert the argument to an integer.

* Removed support for "__members__" and "__methods__".

* The function attributes named "func_X" have been renamed to use the "__X__"
  form, freeing up these names in the function attribute namespace for user-
  defined attributes.  To wit, "func_closure", "func_code", "func_defaults", "
  func_dict", "func_doc", "func_globals", "func_name" were renamed to "__closure__
  ", "__code__", "__defaults__", |:library/stdtypes.txt/object.__dict__:__dict__|, "__doc__", "__globals__", |:library/stdtypes.txt/definition.__name__:__name__|,
  respectively.

* "__nonzero__()" is now "__bool__()".

## builtins:Builtins

* *|index-31:⚓|* |:www.python.org/dev/peps/pep-3135:PEP 3135|: New |:library/functions.txt/super:super()|.  You can now invoke |:library/functions.txt/super:super()| without
  arguments and (assuming this is in a regular instance method defined inside a
  |:reference/compound_stmts.txt/class:class| statement) the right class and instance will automatically be chosen.
  With arguments, the behavior of |:library/functions.txt/super:super()| is unchanged.

* *|index-32:⚓|* |:www.python.org/dev/peps/pep-3111:PEP 3111|: "raw_input()" was renamed to |:library/functions.txt/input:input()|.  That is, the
  new |:library/functions.txt/input:input()| function reads a line from |:library/sys.txt/sys.stdin:sys.stdin| and returns it with the
  trailing newline stripped. It raises |:library/exceptions.txt/EOFError:EOFError| if the input is terminated
  prematurely. To get the old behavior of |:library/functions.txt/input:input()|, use "eval(input())".

* A new built-in function |:library/functions.txt/next:next()| was added to call the |:library/stdtypes.txt/iterator.__next__:__next__()| method on an
  object.

* The |:library/functions.txt/round:round()| function rounding strategy and return type have changed.  Exact
  halfway cases are now rounded to the nearest even result instead of away from
  zero.  (For example, "round(2.5)" now returns "2" rather than "3".)  "round(x[,
  n])" now delegates to "x.__round__([n])" instead of always returning a float.
  It generally returns an integer when called with a single argument and a value
  of the same type as "x" when called with two arguments.

* Moved "intern()" to |:library/sys.txt/sys.intern:sys.intern()|.

* Removed: "apply()".  Instead of "apply(f, args)" use "f(*args)".

* Removed |:library/functions.txt/callable:callable()|.  Instead of "callable(f)" you can use "isinstance(f,
  collections.Callable)".  The "operator.isCallable()" function is also gone.

* Removed "coerce()".  This function no longer serves a purpose now that classic
  classes are gone.

* Removed "execfile()".  Instead of "execfile(fn)" use "exec(open(fn).read())".

* Removed the "file" type.  Use |:library/functions.txt/open:open()|.  There are now several different kinds
  of streams that open can return in the |:library/io.txt/module-io:io| module.

* Removed "reduce()".  Use |:library/functools.txt/functools.reduce:functools.reduce()| if you really need it; however, 99
  percent of the time an explicit |:reference/compound_stmts.txt/for:for| loop is more readable.

* Removed "reload()".  Use |:library/imp.txt/imp.reload:imp.reload()|.

* Removed. "dict.has_key()" – use the |:reference/expressions.txt/in:in| operator instead.

# build-and-c-api-changes:Build and C API Changes

Due to time constraints, here is a *very* incomplete list of changes to the C
API.

* Support for several platforms was dropped, including but not limited to Mac OS
  9, BeOS, RISCOS, Irix, and Tru64.

* *|index-33:⚓|* |:www.python.org/dev/peps/pep-3118:PEP 3118|: New Buffer API.

* *|index-34:⚓|* |:www.python.org/dev/peps/pep-3121:PEP 3121|: Extension Module Initialization & Finalization.

* *|index-35:⚓|* |:www.python.org/dev/peps/pep-3123:PEP 3123|: Making |:c-api/structures.txt/c.PyObject_HEAD:PyObject_HEAD| conform to standard C.

* No more C API support for restricted execution.

* "PyNumber_Coerce()", "PyNumber_CoerceEx()", "PyMember_Get()", and "
  PyMember_Set()" C APIs are removed.

* New C API |:c-api/import.txt/c.PyImport_ImportModuleNoBlock:PyImport_ImportModuleNoBlock()|, works like |:c-api/import.txt/c.PyImport_ImportModule:PyImport_ImportModule()|
  but won’t block on the import lock (returning an error instead).

* Renamed the boolean conversion C-level slot and method: "nb_nonzero" is now "
  nb_bool".

* Removed "METH_OLDARGS" and "WITH_CYCLE_GC" from the C API.

# performance:Performance

The net result of the 3.0 generalizations is that Python 3.0 runs the pystone
benchmark around 10% slower than Python 2.5.  Most likely the biggest cause is
the removal of special-casing for small integers. There’s room for improvement,
but it will happen after 3.0 is released!

# porting-to-python-3-0:Porting To Python 3.0

For porting existing Python 2.5 or 2.6 source code to Python 3.0, the best
strategy is the following:

* (Prerequisite:) Start with excellent test coverage.

* Port to Python 2.6.  This should be no more work than the average port from
  Python 2.x to Python 2.(x+1).  Make sure all your tests pass.

* (Still using 2.6:) Turn on the "-3" command line switch. This enables warnings
  about features that will be removed (or change) in 3.0.  Run your test suite
  again, and fix code that you get warnings about until there are no warnings
  left, and all your tests still pass.

* Run the "2to3" source-to-source translator over your source code tree.  (See
  |:library/2to3.txt/to3-reference:2to3 - Automated Python 2 to 3 code translation| for more on this tool.)  Run
  the result of the translation under Python 3.0.  Manually fix up any remaining
  issues, fixing problems until all tests pass again.

It is not recommended to try to write source code that runs unchanged under both
Python 2.6 and 3.0; you’d have to use a very contorted coding style, e.g.
avoiding "print" statements, metaclasses, and much more.  If you are maintaining
a library that needs to support both Python 2.6 and Python 3.0, the best
approach is to modify step 3 above by editing the 2.6 version of the source code
and running the "2to3" translator again, rather than editing the 3.0 version of
the source code.

For porting C extensions to Python 3.0, please see
|:howto/cporting.txt/cporting-howto:Porting Extension Modules to Python 3|.



