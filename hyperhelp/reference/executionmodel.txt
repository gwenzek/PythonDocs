%hyperhelp title="Execution model" date="2021-07-11"
*|execution-model:⚓|*

*|index-0:⚓|* # structure-of-a-program:Structure of a program*|index-1:⚓|*

A Python program is constructed from code blocks. A *block* is a piece of Python
program text that is executed as a unit. The following are blocks: a module, a
function body, and a class definition. Each command typed interactively is a
block.  A script file (a file given as standard input to the interpreter or
specified as a command line argument to the interpreter) is a code block.  A
script command (a command specified on the interpreter command line with the
|:using/cmdline.txt/cmdoption-c:-c| option) is a code block.  The string argument passed to the built-in
functions |:library/functions.txt/eval:eval()| and |:library/functions.txt/exec:exec()| is a code block.

*|index-2:⚓|*

A code block is executed in an *execution frame*.  A frame contains some
administrative information (used for debugging) and determines where and how
execution continues after the code block’s execution has completed.

*|naming:⚓|* # naming-and-binding:Naming and binding*|index-3:⚓|* ## binding-of-
names:Binding of names*|index-4:⚓|*

*Names* refer to objects.  Names are introduced by name binding operations.

*|index-5:⚓|*

The following constructs bind names: formal parameters to functions, |:reference/simple_stmts.txt/import:import|
statements, class and function definitions (these bind the class or function
name in the defining block), and targets that are identifiers if occurring in an
assignment, |:reference/compound_stmts.txt/for:for| loop header, or after "as" in a |:reference/compound_stmts.txt/with:with| statement or |:reference/compound_stmts.txt/except:except|
clause. The "import" statement of the form "from ... import *" binds all names
defined in the imported module, except those beginning with an underscore.  This
form may only be used at the module level.

A target occurring in a |:reference/simple_stmts.txt/del:del| statement is also considered bound for this
purpose (though the actual semantics are to unbind the name).

Each assignment or import statement occurs within a block defined by a class or
function definition or at the module level (the top-level code block).

*|index-6:⚓|*

If a name is bound in a block, it is a local variable of that block, unless
declared as |:reference/simple_stmts.txt/nonlocal:nonlocal| or |:reference/simple_stmts.txt/global:global|.  If a name is bound at the module level, it
is a global variable.  (The variables of the module code block are local and
global.)  If a variable is used in a code block but not defined there, it is a *
free variable*.

Each occurrence of a name in the program text refers to the *binding* of that
name established by the following name resolution rules.

*|resolve-names:⚓|* ## resolution-of-names:Resolution of names*|index-7:⚓|*

A *scope* defines the visibility of a name within a block.  If a local variable
is defined in a block, its scope includes that block.  If the definition occurs
in a function block, the scope extends to any blocks contained within the
defining one, unless a contained block introduces a different binding for the
name.

*|index-8:⚓|*

When a name is used in a code block, it is resolved using the nearest enclosing
scope.  The set of all such scopes visible to a code block is called the block’s
*environment*.

*|index-9:⚓|*

When a name is not found at all, a |:library/exceptions.txt/NameError:NameError| exception is raised. If the
current scope is a function scope, and the name refers to a local variable that
has not yet been bound to a value at the point where the name is used, an
|:library/exceptions.txt/UnboundLocalError:UnboundLocalError| exception is raised. |:library/exceptions.txt/UnboundLocalError:UnboundLocalError| is a subclass of
|:library/exceptions.txt/NameError:NameError|.

If a name binding operation occurs anywhere within a code block, all uses of the
name within the block are treated as references to the current block.  This can
lead to errors when a name is used within a block before it is bound.  This rule
is subtle.  Python lacks declarations and allows name binding operations to
occur anywhere within a code block.  The local variables of a code block can be
determined by scanning the entire text of the block for name binding operations.

If the |:reference/simple_stmts.txt/global:global| statement occurs within a block, all uses of the name specified
in the statement refer to the binding of that name in the top-level namespace.
Names are resolved in the top-level namespace by searching the global namespace,
i.e. the namespace of the module containing the code block, and the builtins
namespace, the namespace of the module |:library/builtins.txt/module-builtins:builtins|.  The global namespace is
searched first.  If the name is not found there, the builtins namespace is
searched.  The "global" statement must precede all uses of the name.

The |:reference/simple_stmts.txt/global:global| statement has the same scope as a name binding operation in the
same block.  If the nearest enclosing scope for a free variable contains a
global statement, the free variable is treated as a global.

The |:reference/simple_stmts.txt/nonlocal:nonlocal| statement causes corresponding names to refer to previously bound
variables in the nearest enclosing function scope. |:library/exceptions.txt/SyntaxError:SyntaxError| is raised at
compile time if the given name does not exist in any enclosing function scope.

*|index-10:⚓|*

The namespace for a module is automatically created the first time a module is
imported.  The main module for a script is always called |:library/__main__.txt/module-__main__:__main__|.

Class definition blocks and arguments to |:library/functions.txt/exec:exec()| and |:library/functions.txt/eval:eval()| are special in
the context of name resolution. A class definition is an executable statement
that may use and define names. These references follow the normal rules for name
resolution with an exception that unbound local variables are looked up in the
global namespace. The namespace of the class definition becomes the attribute
dictionary of the class. The scope of names defined in a class block is limited
to the class block; it does not extend to the code blocks of methods – this
includes comprehensions and generator expressions since they are implemented
using a function scope.  This means that the following will fail:

```rst
class A:
    a = 42
    b = list(a + i for i in range(10))
```

*|restrict-exec:⚓|* ## builtins-and-restricted-execution:Builtins and restricted
execution*|index-11:⚓|*

*CPython implementation detail:* Users should not touch "__builtins__"; it is
strictly an implementation detail.  Users wanting to override values in the
builtins namespace should |:reference/simple_stmts.txt/import:import| the |:library/builtins.txt/module-builtins:builtins| module and modify its
attributes appropriately.

The builtins namespace associated with the execution of a code block is actually
found by looking up the name "__builtins__" in its global namespace; this should
be a dictionary or a module (in the latter case the module’s dictionary is
used).  By default, when in the |:library/__main__.txt/module-__main__:__main__| module, "__builtins__" is the built-
in module |:library/builtins.txt/module-builtins:builtins|; when in any other module, "__builtins__" is an alias for
the dictionary of the |:library/builtins.txt/module-builtins:builtins| module itself.

*|dynamic-features:⚓|* ## interaction-with-dynamic-features:Interaction with
dynamic features

Name resolution of free variables occurs at runtime, not at compile time. This
means that the following code will print 42:

```rst
i = 10
def f():
    print(i)
i = 42
f()
```

The |:library/functions.txt/eval:eval()| and |:library/functions.txt/exec:exec()| functions do not have access to the full environment
for resolving names.  Names may be resolved in the local and global namespaces
of the caller.  Free variables are not resolved in the nearest enclosing
namespace, but in the global namespace.  [1] The |:library/functions.txt/exec:exec()| and |:library/functions.txt/eval:eval()| functions
have optional arguments to override the global and local namespace.  If only one
namespace is specified, it is used for both.

*|exceptions:⚓|* # exceptions:Exceptions*|index-12:⚓|* *|index-13:⚓|*

Exceptions are a means of breaking out of the normal flow of control of a code
block in order to handle errors or other exceptional conditions.  An exception
is *raised* at the point where the error is detected; it may be *handled* by the
surrounding code block or by any code block that directly or indirectly invoked
the code block where the error occurred.

The Python interpreter raises an exception when it detects a run-time error
(such as division by zero).  A Python program can also explicitly raise an
exception with the |:reference/simple_stmts.txt/raise:raise| statement. Exception handlers are specified with the
|:reference/compound_stmts.txt/try:try| … |:reference/compound_stmts.txt/except:except| statement.  The |:reference/compound_stmts.txt/finally:finally| clause of such a statement can be
used to specify cleanup code which does not handle the exception, but is
executed whether an exception occurred or not in the preceding code.

*|index-14:⚓|*

Python uses the “termination” model of error handling: an exception handler can
find out what happened and continue execution at an outer level, but it cannot
repair the cause of the error and retry the failing operation (except by re-
entering the offending piece of code from the top).

*|index-15:⚓|*

When an exception is not handled at all, the interpreter terminates execution of
the program, or returns to its interactive main loop.  In either case, it prints
a stack traceback, except when the exception is |:library/exceptions.txt/SystemExit:SystemExit|.

Exceptions are identified by class instances.  The |:reference/compound_stmts.txt/except:except| clause is selected
depending on the class of the instance: it must reference the class of the
instance or a base class thereof.  The instance can be received by the handler
and can carry additional information about the exceptional condition.

Note:

  Exception messages are not part of the Python API.  Their contents may change
  from one version of Python to the next without warning and should not be relied
  on by code which will run under multiple versions of the interpreter.

See also the description of the |:reference/compound_stmts.txt/try:try| statement in section |:reference/compound_stmts.txt/try:The try statement|
and |:reference/simple_stmts.txt/raise:raise| statement in section |:reference/simple_stmts.txt/raise:The raise statement|.

-[ Footnotes ]-

[1] This limitation occurs because the code that is executed by these operations is
    not available at the time the module is compiled.



