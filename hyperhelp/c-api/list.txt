%hyperhelp title="List Objects" date="2021-07-11"
*|list-objects:⚓|*

*|index-0:⚓|*

*c.PyListObject:type PyListObject
*

   This subtype of |:c-api/structures.txt/c.PyObject:PyObject| represents a Python list object.

*c.PyList_Type:|:c-api/type.txt/c.PyTypeObject:PyTypeObject| PyList_Type
*

   This instance of |:c-api/type.txt/c.PyTypeObject:PyTypeObject| represents the Python list type. This is the
   same object as |:library/stdtypes.txt/list:list| in the Python layer.

*c.PyList_Check:int PyList_Check(PyObject *p)
*

   Return true if *p* is a list object or an instance of a subtype of the list
   type.

*c.PyList_CheckExact:int PyList_CheckExact(PyObject *p)
*

   Return true if *p* is a list object, but not an instance of a subtype of the
   list type.

*c.PyList_New:|:c-api/structures.txt/c.PyObject:PyObject| *PyList_New(Py_ssize_t len)
*
    *Return value: New reference.*

   Return a new list of length *len* on success, or "NULL" on failure.

   Note:

     If *len* is greater than zero, the returned list object’s items are set to "NULL
     ".  Thus you cannot use abstract API functions such as |:c-api/sequence.txt/c.PySequence_SetItem:PySequence_SetItem()|
     or expose the object to Python code before setting all items to a real object
     with |:c.PyList_SetItem:PyList_SetItem()|.

*c.PyList_Size:Py_ssize_t PyList_Size(PyObject *list)
*
    *|index-1:⚓|*

   Return the length of the list object in *list*; this is equivalent to "len(list)
   " on a list object.

*c.PyList_GET_SIZE:Py_ssize_t PyList_GET_SIZE(PyObject *list)
*

   Macro form of |:c.PyList_Size:PyList_Size()| without error checking.

*c.PyList_GetItem:|:c-api/structures.txt/c.PyObject:PyObject| *PyList_GetItem(PyObject *list, Py_ssize_t index)
*
    *Return value: Borrowed reference.*

   Return the object at position *index* in the list pointed to by *list*.  The
   position must be non-negative; indexing from the end of the list is not
   supported.  If *index* is out of bounds (<0 or >=len(list)), return "NULL" and
   set an |:library/exceptions.txt/IndexError:IndexError| exception.

*c.PyList_GET_ITEM:|:c-api/structures.txt/c.PyObject:PyObject| *PyList_GET_ITEM(PyObject *list, Py_ssize_t i)
*
    *Return value: Borrowed reference.*

   Macro form of |:c.PyList_GetItem:PyList_GetItem()| without error checking.

*c.PyList_SetItem:int PyList_SetItem(PyObject *list, Py_ssize_t index, PyObject *item)
*

   Set the item at index *index* in list to *item*.  Return "0" on success. If *
   index* is out of bounds, return "-1" and set an |:library/exceptions.txt/IndexError:IndexError| exception.

   Note:

     This function “steals” a reference to *item* and discards a reference to an item
     already in the list at the affected position.

*c.PyList_SET_ITEM:void PyList_SET_ITEM(PyObject *list, Py_ssize_t i, PyObject *o)
*

   Macro form of |:c.PyList_SetItem:PyList_SetItem()| without error checking. This is normally only
   used to fill in new lists where there is no previous content.

   Note:

     This macro “steals” a reference to *item*, and, unlike |:c.PyList_SetItem:PyList_SetItem()|, does
     *not* discard a reference to any item that is being replaced; any reference in *
     list* at position *i* will be leaked.

*c.PyList_Insert:int PyList_Insert(PyObject *list, Py_ssize_t index, PyObject *item)
*

   Insert the item *item* into list *list* in front of index *index*.  Return "0"
   if successful; return "-1" and set an exception if unsuccessful. Analogous to "
   list.insert(index, item)".

*c.PyList_Append:int PyList_Append(PyObject *list, PyObject *item)
*

   Append the object *item* at the end of list *list*. Return "0" if successful;
   return "-1" and set an exception if unsuccessful.  Analogous to "
   list.append(item)".

*c.PyList_GetSlice:|:c-api/structures.txt/c.PyObject:PyObject| *PyList_GetSlice(PyObject *list, Py_ssize_t low, Py_ssize_t high)
*
    *Return value: New reference.*

   Return a list of the objects in *list* containing the objects *between* *low*
   and *high*.  Return "NULL" and set an exception if unsuccessful.  Analogous to "
   list[low:high]".  Indexing from the end of the list is not supported.

*c.PyList_SetSlice:int PyList_SetSlice(PyObject *list, Py_ssize_t low, Py_ssize_t high, PyObject *itemlist)
*

   Set the slice of *list* between *low* and *high* to the contents of *itemlist*.
   Analogous to "list[low:high] = itemlist". The *itemlist* may be "NULL",
   indicating the assignment of an empty list (slice deletion). Return "0" on
   success, "-1" on failure.  Indexing from the end of the list is not supported.

*c.PyList_Sort:int PyList_Sort(PyObject *list)
*

   Sort the items of *list* in place.  Return "0" on success, "-1" on failure.
   This is equivalent to "list.sort()".

*c.PyList_Reverse:int PyList_Reverse(PyObject *list)
*

   Reverse the items of *list* in place.  Return "0" on success, "-1" on failure.
   This is the equivalent of "list.reverse()".

*c.PyList_AsTuple:|:c-api/structures.txt/c.PyObject:PyObject| *PyList_AsTuple(PyObject *list)
*
    *Return value: New reference.**|index-2:⚓|*

   Return a new tuple object containing the contents of *list*; equivalent to "
   tuple(list)".

*c.PyList_ClearFreeList:int PyList_ClearFreeList()
*

   Clear the free list. Return the total number of freed items.

   New in version 3.3.



