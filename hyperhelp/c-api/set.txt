%hyperhelp title="Set Objects" date="2021-07-11"
*|set-objects:⚓|*

*|index-0:⚓|*

This section details the public API for |:library/stdtypes.txt/set:set| and |:library/stdtypes.txt/frozenset:frozenset| objects.  Any
functionality not listed below is best accessed using the either the abstract
object protocol (including |:c-api/object.txt/c.PyObject_CallMethod:PyObject_CallMethod()|, |:c-api/object.txt/c.PyObject_RichCompareBool:PyObject_RichCompareBool()|
, |:c-api/object.txt/c.PyObject_Hash:PyObject_Hash()|, |:c-api/object.txt/c.PyObject_Repr:PyObject_Repr()|, |:c-api/object.txt/c.PyObject_IsTrue:PyObject_IsTrue()|, |:c-api/object.txt/c.PyObject_Print:PyObject_Print()|,
and |:c-api/object.txt/c.PyObject_GetIter:PyObject_GetIter()|) or the abstract number protocol (including
|:c-api/number.txt/c.PyNumber_And:PyNumber_And()|, |:c-api/number.txt/c.PyNumber_Subtract:PyNumber_Subtract()|, |:c-api/number.txt/c.PyNumber_Or:PyNumber_Or()|, |:c-api/number.txt/c.PyNumber_Xor:PyNumber_Xor()|,
|:c-api/number.txt/c.PyNumber_InPlaceAnd:PyNumber_InPlaceAnd()|, |:c-api/number.txt/c.PyNumber_InPlaceSubtract:PyNumber_InPlaceSubtract()|, |:c-api/number.txt/c.PyNumber_InPlaceOr:PyNumber_InPlaceOr()|,
and |:c-api/number.txt/c.PyNumber_InPlaceXor:PyNumber_InPlaceXor()|).

*c.PySetObject:type PySetObject
*

   This subtype of |:c-api/structures.txt/c.PyObject:PyObject| is used to hold the internal data for both |:library/stdtypes.txt/set:set| and
   |:library/stdtypes.txt/frozenset:frozenset| objects.  It is like a |:c-api/dict.txt/c.PyDictObject:PyDictObject| in that it is a fixed size for
   small sets (much like tuple storage) and will point to a separate, variable
   sized block of memory for medium and large sized sets (much like list storage).
   None of the fields of this structure should be considered public and are subject
   to change.  All access should be done through the documented API rather than by
   manipulating the values in the structure.

*c.PySet_Type:|:c-api/type.txt/c.PyTypeObject:PyTypeObject| PySet_Type
*

   This is an instance of |:c-api/type.txt/c.PyTypeObject:PyTypeObject| representing the Python |:library/stdtypes.txt/set:set| type.

*c.PyFrozenSet_Type:|:c-api/type.txt/c.PyTypeObject:PyTypeObject| PyFrozenSet_Type
*

   This is an instance of |:c-api/type.txt/c.PyTypeObject:PyTypeObject| representing the Python |:library/stdtypes.txt/frozenset:frozenset| type.

The following type check macros work on pointers to any Python object. Likewise,
the constructor functions work with any iterable Python object.

*c.PySet_Check:int PySet_Check(PyObject *p)
*

   Return true if *p* is a |:library/stdtypes.txt/set:set| object or an instance of a subtype.

*c.PyFrozenSet_Check:int PyFrozenSet_Check(PyObject *p)
*

   Return true if *p* is a |:library/stdtypes.txt/frozenset:frozenset| object or an instance of a subtype.

*c.PyAnySet_Check:int PyAnySet_Check(PyObject *p)
*

   Return true if *p* is a |:library/stdtypes.txt/set:set| object, a |:library/stdtypes.txt/frozenset:frozenset| object, or an instance of a
   subtype.

*c.PyAnySet_CheckExact:int PyAnySet_CheckExact(PyObject *p)
*

   Return true if *p* is a |:library/stdtypes.txt/set:set| object or a |:library/stdtypes.txt/frozenset:frozenset| object but not an instance
   of a subtype.

*c.PyFrozenSet_CheckExact:int PyFrozenSet_CheckExact(PyObject *p)
*

   Return true if *p* is a |:library/stdtypes.txt/frozenset:frozenset| object but not an instance of a subtype.

*c.PySet_New:|:c-api/structures.txt/c.PyObject:PyObject| *PySet_New(PyObject *iterable)
*
    *Return value: New reference.*

   Return a new |:library/stdtypes.txt/set:set| containing objects returned by the *iterable*.  The *iterable
   * may be "NULL" to create a new empty set.  Return the new set on success or "
   NULL" on failure.  Raise |:library/exceptions.txt/TypeError:TypeError| if *iterable* is not actually iterable.
   The constructor is also useful for copying a set ("c=set(s)").

*c.PyFrozenSet_New:|:c-api/structures.txt/c.PyObject:PyObject| *PyFrozenSet_New(PyObject *iterable)
*
    *Return value: New reference.*

   Return a new |:library/stdtypes.txt/frozenset:frozenset| containing objects returned by the *iterable*. The *
   iterable* may be "NULL" to create a new empty frozenset.  Return the new set on
   success or "NULL" on failure.  Raise |:library/exceptions.txt/TypeError:TypeError| if *iterable* is not actually
   iterable.

The following functions and macros are available for instances of |:library/stdtypes.txt/set:set| or
|:library/stdtypes.txt/frozenset:frozenset| or instances of their subtypes.

*c.PySet_Size:Py_ssize_t PySet_Size(PyObject *anyset)
*
    *|index-1:⚓|*

   Return the length of a |:library/stdtypes.txt/set:set| or |:library/stdtypes.txt/frozenset:frozenset| object. Equivalent to "len(anyset)".
   Raises a "PyExc_SystemError" if *anyset* is not a |:library/stdtypes.txt/set:set|, |:library/stdtypes.txt/frozenset:frozenset|, or an
   instance of a subtype.

*c.PySet_GET_SIZE:Py_ssize_t PySet_GET_SIZE(PyObject *anyset)
*

   Macro form of |:c.PySet_Size:PySet_Size()| without error checking.

*c.PySet_Contains:int PySet_Contains(PyObject *anyset, PyObject *key)
*

   Return "1" if found, "0" if not found, and "-1" if an error is encountered.
   Unlike the Python "__contains__()" method, this function does not automatically
   convert unhashable sets into temporary frozensets.  Raise a |:library/exceptions.txt/TypeError:TypeError| if the *
   key* is unhashable. Raise "PyExc_SystemError" if *anyset* is not a |:library/stdtypes.txt/set:set|,
   |:library/stdtypes.txt/frozenset:frozenset|, or an instance of a subtype.

*c.PySet_Add:int PySet_Add(PyObject *set, PyObject *key)
*

   Add *key* to a |:library/stdtypes.txt/set:set| instance.  Also works with |:library/stdtypes.txt/frozenset:frozenset| instances (like
   |:c-api/tuple.txt/c.PyTuple_SetItem:PyTuple_SetItem()| it can be used to fill-in the values of brand new frozensets
   before they are exposed to other code).  Return "0" on success or "-1" on
   failure. Raise a |:library/exceptions.txt/TypeError:TypeError| if the *key* is unhashable. Raise a |:library/exceptions.txt/MemoryError:MemoryError|
   if there is no room to grow.  Raise a |:library/exceptions.txt/SystemError:SystemError| if *set* is not an instance
   of |:library/stdtypes.txt/set:set| or its subtype.

The following functions are available for instances of |:library/stdtypes.txt/set:set| or its subtypes but
not for instances of |:library/stdtypes.txt/frozenset:frozenset| or its subtypes.

*c.PySet_Discard:int PySet_Discard(PyObject *set, PyObject *key)
*

   Return "1" if found and removed, "0" if not found (no action taken), and "-1" if
   an error is encountered.  Does not raise |:library/exceptions.txt/KeyError:KeyError| for missing keys.  Raise a
   |:library/exceptions.txt/TypeError:TypeError| if the *key* is unhashable.  Unlike the Python "discard()" method,
   this function does not automatically convert unhashable sets into temporary
   frozensets. Raise "PyExc_SystemError" if *set* is not an instance of |:library/stdtypes.txt/set:set| or
   its subtype.

*c.PySet_Pop:|:c-api/structures.txt/c.PyObject:PyObject| *PySet_Pop(PyObject *set)
*
    *Return value: New reference.*

   Return a new reference to an arbitrary object in the *set*, and removes the
   object from the *set*.  Return "NULL" on failure.  Raise |:library/exceptions.txt/KeyError:KeyError| if the set
   is empty. Raise a |:library/exceptions.txt/SystemError:SystemError| if *set* is not an instance of |:library/stdtypes.txt/set:set| or its
   subtype.

*c.PySet_Clear:int PySet_Clear(PyObject *set)
*

   Empty an existing set of all elements.

*c.PySet_ClearFreeList:int PySet_ClearFreeList()
*

   Clear the free list. Return the total number of freed items.

   New in version 3.3.



