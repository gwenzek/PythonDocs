%hyperhelp title="File Objects" date="2021-07-11"
*|file-objects:⚓|*

*|index-0:⚓|*

These APIs are a minimal emulation of the Python 2 C API for built-in file
objects, which used to rely on the buffered I/O (*FILE**) support from the C
standard library.  In Python 3, files and streams use the new |:library/io.txt/module-io:io| module, which
defines several layers over the low-level unbuffered I/O of the operating
system.  The functions described below are convenience C wrappers over these new
APIs, and meant mostly for internal error reporting in the interpreter; third-
party code is advised to access the |:library/io.txt/module-io:io| APIs instead.

*c.PyFile_FromFd:|:c-api/structures.txt/c.PyObject:PyObject| *PyFile_FromFd(int fd, const char *name, const char *mode, int buffering, const char *encoding, const char *errors, const char *newline, int closefd)
*
    *Return value: New reference.*

   Create a Python file object from the file descriptor of an already opened file *
   fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "NULL" to
   use the defaults; *buffering* can be *-1* to use the default. *name* is ignored
   and kept for backward compatibility. Return "NULL" on failure. For a more
   comprehensive description of the arguments, please refer to the |:library/io.txt/io.open:io.open()|
   function documentation.

   Warning:

     Since Python streams have their own buffering layer, mixing them with OS-level
     file descriptors can produce various issues (such as unexpected ordering of
     data).

   Changed in version 3.2: Ignore *name* attribute.

*c.PyObject_AsFileDescriptor:int PyObject_AsFileDescriptor(PyObject *p)
*

   Return the file descriptor associated with *p* as an *int*.  If the object is an
   integer, its value is returned.  If not, the object’s |:library/io.txt/io.IOBase.fileno:fileno()| method is
   called if it exists; the method must return an integer, which is returned as the
   file descriptor value.  Sets an exception and returns "-1" on failure.

*c.PyFile_GetLine:|:c-api/structures.txt/c.PyObject:PyObject| *PyFile_GetLine(PyObject *p, int n)
*
    *Return value: New reference.**|index-1:⚓|*

   Equivalent to "p.readline([n])", this function reads one line from the object *p
   *.  *p* may be a file object or any object with a |:library/io.txt/io.IOBase.readline:readline()| method.  If *n*
   is "0", exactly one line is read, regardless of the length of the line.  If *n*
   is greater than "0", no more than *n* bytes will be read from the file; a
   partial line can be returned.  In both cases, an empty string is returned if the
   end of the file is reached immediately.  If *n* is less than "0", however, one
   line is read regardless of length, but |:library/exceptions.txt/EOFError:EOFError| is raised if the end of the
   file is reached immediately.

*c.PyFile_SetOpenCodeHook:int PyFile_SetOpenCodeHook(Py_OpenCodeHookFunction handler)
*

   Overrides the normal behavior of |:library/io.txt/io.open_code:io.open_code()| to pass its parameter through
   the provided handler.

   The handler is a function of type *|:c-api/structures.txt/c.PyObject:PyObject| *(*)(|:c-api/structures.txt/c.PyObject:PyObject| *path, void *
   userData)*, where *path* is guaranteed to be |:c-api/unicode.txt/c.PyUnicodeObject:PyUnicodeObject|.

   The *userData* pointer is passed into the hook function. Since hook functions
   may be called from different runtimes, this pointer should not refer directly to
   Python state.

   As this hook is intentionally used during import, avoid importing new modules
   during its execution unless they are known to be frozen or available in "
   sys.modules".

   Once a hook has been set, it cannot be removed or replaced, and later calls to
   |:c.PyFile_SetOpenCodeHook:PyFile_SetOpenCodeHook()| will fail. On failure, the function returns -1 and
   sets an exception if the interpreter has been initialized.

   This function is safe to call before |:c-api/init.txt/c.Py_Initialize:Py_Initialize()|.

   Raises an |:library/sys.txt/auditing:auditing event| "setopencodehook" with no arguments.

   New in version 3.8.

*c.PyFile_WriteObject:int PyFile_WriteObject(PyObject *obj, PyObject *p, int flags)
*
    *|index-2:⚓|*

   Write object *obj* to file object *p*.  The only supported flag for *flags* is "
   Py_PRINT_RAW"; if given, the |:library/stdtypes.txt/str:str()| of the object is written instead of the
   |:library/functions.txt/repr:repr()|.  Return "0" on success or "-1" on failure; the appropriate exception
   will be set.

*c.PyFile_WriteString:int PyFile_WriteString(const char *s, PyObject *p)
*

   Write string *s* to file object *p*.  Return "0" on success or "-1" on failure;
   the appropriate exception will be set.



