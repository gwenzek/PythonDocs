%hyperhelp title="Iterator Objects" date="2021-07-11"
*|iterator-objects:âš“|*

Python provides two general-purpose iterator objects.  The first, a sequence
iterator, works with an arbitrary sequence supporting the "__getitem__()"
method.  The second works with a callable object and a sentinel value, calling
the callable for each item in the sequence, and ending the iteration when the
sentinel value is returned.

*c.PySeqIter_Type:|:c-api/type.txt/c.PyTypeObject:PyTypeObject| PySeqIter_Type
*

   Type object for iterator objects returned by |:c.PySeqIter_New:PySeqIter_New()| and the one-
   argument form of the |:library/functions.txt/iter:iter()| built-in function for built-in sequence types.

*c.PySeqIter_Check:int PySeqIter_Check(op)
*

   Return true if the type of *op* is |:c.PySeqIter_Type:PySeqIter_Type|.

*c.PySeqIter_New:|:c-api/structures.txt/c.PyObject:PyObject| *PySeqIter_New(PyObject *seq)
*
    *Return value: New reference.*

   Return an iterator that works with a general sequence object, *seq*.  The
   iteration ends when the sequence raises |:library/exceptions.txt/IndexError:IndexError| for the subscripting
   operation.

*c.PyCallIter_Type:|:c-api/type.txt/c.PyTypeObject:PyTypeObject| PyCallIter_Type
*

   Type object for iterator objects returned by |:c.PyCallIter_New:PyCallIter_New()| and the two-
   argument form of the |:library/functions.txt/iter:iter()| built-in function.

*c.PyCallIter_Check:int PyCallIter_Check(op)
*

   Return true if the type of *op* is |:c.PyCallIter_Type:PyCallIter_Type|.

*c.PyCallIter_New:|:c-api/structures.txt/c.PyObject:PyObject| *PyCallIter_New(PyObject *callable, PyObject *sentinel)
*
    *Return value: New reference.*

   Return a new iterator.  The first parameter, *callable*, can be any Python
   callable object that can be called with no parameters; each call to it should
   return the next item in the iteration.  When *callable* returns a value equal to
   *sentinel*, the iteration will be terminated.



