%hyperhelp title="Mapping Protocol" date="2021-07-11"
*|mapping-protocol:⚓|*

See also |:c-api/object.txt/c.PyObject_GetItem:PyObject_GetItem()|, |:c-api/object.txt/c.PyObject_SetItem:PyObject_SetItem()| and |:c-api/object.txt/c.PyObject_DelItem:PyObject_DelItem()|.

*c.PyMapping_Check:int PyMapping_Check(PyObject *o)
*

   Return "1" if the object provides mapping protocol or supports slicing, and "0"
   otherwise.  Note that it returns "1" for Python classes with a "__getitem__()"
   method since in general case it is impossible to determine what type of keys it
   supports. This function always succeeds.

*c.PyMapping_Size:Py_ssize_t PyMapping_Size(PyObject *o)
*
*c.PyMapping_Length:Py_ssize_t PyMapping_Length(PyObject *o)
*
    *|index-0:⚓|*

   Returns the number of keys in object *o* on success, and "-1" on failure. This
   is equivalent to the Python expression "len(o)".

*c.PyMapping_GetItemString:|:c-api/structures.txt/c.PyObject:PyObject| *PyMapping_GetItemString(PyObject *o, const char *key)
*
    *Return value: New reference.*

   Return element of *o* corresponding to the string *key* or "NULL" on failure.
   This is the equivalent of the Python expression "o[key]". See also
   |:c-api/object.txt/c.PyObject_GetItem:PyObject_GetItem()|.

*c.PyMapping_SetItemString:int PyMapping_SetItemString(PyObject *o, const char *key, PyObject *v)
*

   Map the string *key* to the value *v* in object *o*.  Returns "-1" on failure.
   This is the equivalent of the Python statement "o[key] = v". See also
   |:c-api/object.txt/c.PyObject_SetItem:PyObject_SetItem()|.  This function *does not* steal a reference to *v*.

*c.PyMapping_DelItem:int PyMapping_DelItem(PyObject *o, PyObject *key)
*

   Remove the mapping for the object *key* from the object *o*.  Return "-1" on
   failure.  This is equivalent to the Python statement "del o[key]". This is an
   alias of |:c-api/object.txt/c.PyObject_DelItem:PyObject_DelItem()|.

*c.PyMapping_DelItemString:int PyMapping_DelItemString(PyObject *o, const char *key)
*

   Remove the mapping for the string *key* from the object *o*.  Return "-1" on
   failure.  This is equivalent to the Python statement "del o[key]".

*c.PyMapping_HasKey:int PyMapping_HasKey(PyObject *o, PyObject *key)
*

   Return "1" if the mapping object has the key *key* and "0" otherwise. This is
   equivalent to the Python expression "key in o". This function always succeeds.

   Note that exceptions which occur while calling the "__getitem__()" method will
   get suppressed. To get error reporting use |:c-api/object.txt/c.PyObject_GetItem:PyObject_GetItem()| instead.

*c.PyMapping_HasKeyString:int PyMapping_HasKeyString(PyObject *o, const char *key)
*

   Return "1" if the mapping object has the key *key* and "0" otherwise. This is
   equivalent to the Python expression "key in o". This function always succeeds.

   Note that exceptions which occur while calling the "__getitem__()" method and
   creating a temporary string object will get suppressed. To get error reporting
   use |:c.PyMapping_GetItemString:PyMapping_GetItemString()| instead.

*c.PyMapping_Keys:|:c-api/structures.txt/c.PyObject:PyObject| *PyMapping_Keys(PyObject *o)
*
    *Return value: New reference.*

   On success, return a list of the keys in object *o*.  On failure, return "NULL".

   Changed in version 3.7: Previously, the function returned a list or a tuple.

*c.PyMapping_Values:|:c-api/structures.txt/c.PyObject:PyObject| *PyMapping_Values(PyObject *o)
*
    *Return value: New reference.*

   On success, return a list of the values in object *o*.  On failure, return "NULL
   ".

   Changed in version 3.7: Previously, the function returned a list or a tuple.

*c.PyMapping_Items:|:c-api/structures.txt/c.PyObject:PyObject| *PyMapping_Items(PyObject *o)
*
    *Return value: New reference.*

   On success, return a list of the items in object *o*, where each item is a tuple
   containing a key-value pair.  On failure, return "NULL".

   Changed in version 3.7: Previously, the function returned a list or a tuple.



