%hyperhelp title="Type Objects" date="2021-07-11"
*|type-objects:⚓|*

*|index-0:⚓|*

*c.PyTypeObject:type PyTypeObject
*

   The C structure of the objects used to describe built-in types.

*c.PyType_Type:|:c-api/structures.txt/c.PyObject:PyObject| *PyType_Type
*

   This is the type object for type objects; it is the same object as |:library/functions.txt/type:type| in the
   Python layer.

*c.PyType_Check:int PyType_Check(PyObject *o)
*

   Return true if the object *o* is a type object, including instances of types
   derived from the standard type object.  Return false in all other cases.

*c.PyType_CheckExact:int PyType_CheckExact(PyObject *o)
*

   Return true if the object *o* is a type object, but not a subtype of the
   standard type object.  Return false in all other cases.

*c.PyType_ClearCache:unsigned int PyType_ClearCache()
*

   Clear the internal lookup cache. Return the current version tag.

*c.PyType_GetFlags:unsigned long PyType_GetFlags(PyTypeObject *type)
*

   Return the |:c-api/typeobj.txt/c.PyTypeObject.tp_flags:tp_flags| member of *type*. This function is primarily meant for use
   with *Py_LIMITED_API*; the individual flag bits are guaranteed to be stable
   across Python releases, but access to |:c-api/typeobj.txt/c.PyTypeObject.tp_flags:tp_flags| itself is not part of the
   limited API.

   New in version 3.2.

   Changed in version 3.4: The return type is now "unsigned long" rather than "long
   ".

*c.PyType_Modified:void PyType_Modified(PyTypeObject *type)
*

   Invalidate the internal lookup cache for the type and all of its subtypes.  This
   function must be called after any manual modification of the attributes or base
   classes of the type.

*c.PyType_HasFeature:int PyType_HasFeature(PyTypeObject *o, int feature)
*

   Return true if the type object *o* sets the feature *feature*.  Type features
   are denoted by single bit flags.

*c.PyType_IS_GC:int PyType_IS_GC(PyTypeObject *o)
*

   Return true if the type object includes support for the cycle detector; this
   tests the type flag |:c-api/typeobj.txt/Py_TPFLAGS_HAVE_GC:Py_TPFLAGS_HAVE_GC|.

*c.PyType_IsSubtype:int PyType_IsSubtype(PyTypeObject *a, PyTypeObject *b)
*

   Return true if *a* is a subtype of *b*.

   This function only checks for actual subtypes, which means that
   |:reference/datamodel.txt/class.__subclasscheck__:__subclasscheck__()| is not called on *b*.  Call |:c-api/object.txt/c.PyObject_IsSubclass:PyObject_IsSubclass()| to do
   the same check that |:library/functions.txt/issubclass:issubclass()| would do.

*c.PyType_GenericAlloc:|:c-api/structures.txt/c.PyObject:PyObject| *PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)
*
    *Return value: New reference.*

   Generic handler for the |:c-api/typeobj.txt/c.PyTypeObject.tp_alloc:tp_alloc| slot of a type object.  Use Python’s default
   memory allocation mechanism to allocate a new instance and initialize all its
   contents to "NULL".

*c.PyType_GenericNew:|:c-api/structures.txt/c.PyObject:PyObject| *PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)
*
    *Return value: New reference.*

   Generic handler for the |:c-api/typeobj.txt/c.PyTypeObject.tp_new:tp_new| slot of a type object.  Create a new instance
   using the type’s |:c-api/typeobj.txt/c.PyTypeObject.tp_alloc:tp_alloc| slot.

*c.PyType_Ready:int PyType_Ready(PyTypeObject *type)
*

   Finalize a type object.  This should be called on all type objects to finish
   their initialization.  This function is responsible for adding inherited slots
   from a type’s base class.  Return "0" on success, or return "-1" and sets an
   exception on error.

*c.PyType_GetSlot:void *PyType_GetSlot(PyTypeObject *type, int slot)
*

   Return the function pointer stored in the given slot. If the result is "NULL",
   this indicates that either the slot is "NULL", or that the function was called
   with invalid parameters. Callers will typically cast the result pointer into the
   appropriate function type.

   See "PyType_Slot.slot" for possible values of the *slot* argument.

   An exception is raised if *type* is not a heap type.

   New in version 3.4.

# creating-heap-allocated-types:Creating Heap-Allocated Types

The following functions and structs are used to create |:c-api/typeobj.txt/heap-types:heap types|.

*c.PyType_FromSpecWithBases:|:c-api/structures.txt/c.PyObject:PyObject| *PyType_FromSpecWithBases(PyType_Spec *spec, PyObject *bases)
*
    *Return value: New reference.*

   Creates and returns a heap type object from the *spec* (|:c-api/typeobj.txt/Py_TPFLAGS_HEAPTYPE:Py_TPFLAGS_HEAPTYPE|).

   If *bases* is a tuple, the created heap type contains all types contained in it
   as base types.

   If *bases* is "NULL", the *Py_tp_bases* slot is used instead. If that also is "
   NULL", the *Py_tp_base* slot is used instead. If that also is "NULL", the new
   type derives from |:library/functions.txt/object:object|.

   This function calls |:c.PyType_Ready:PyType_Ready()| on the new type.

   New in version 3.3.

*c.PyType_FromSpec:|:c-api/structures.txt/c.PyObject:PyObject| *PyType_FromSpec(PyType_Spec *spec)
*
    *Return value: New reference.*

   Equivalent to "PyType_FromSpecWithBases(spec, NULL)".

*c.PyType_Spec:type PyType_Spec
*

   Structure defining a type’s behavior.

   *c.PyType_Spec.PyType_Spec.name:const char *PyType_Spec.name
   *

      Name of the type, used to set |:c-api/typeobj.txt/c.PyTypeObject.tp_name:PyTypeObject.tp_name|.

   *c.PyType_Spec.PyType_Spec.basicsize:int PyType_Spec.basicsize
   *

   *c.PyType_Spec.PyType_Spec.itemsize:int PyType_Spec.itemsize
   *

      Size of the instance in bytes, used to set |:c-api/typeobj.txt/c.PyTypeObject.tp_basicsize:PyTypeObject.tp_basicsize| and
      |:c-api/typeobj.txt/c.PyTypeObject.tp_itemsize:PyTypeObject.tp_itemsize|.

   *c.PyType_Spec.PyType_Spec.flags:int PyType_Spec.flags
   *

      Type flags, used to set |:c-api/typeobj.txt/c.PyTypeObject.tp_flags:PyTypeObject.tp_flags|.

      If the "Py_TPFLAGS_HEAPTYPE" flag is not set, |:c.PyType_FromSpecWithBases:PyType_FromSpecWithBases()| sets
      it automatically.

   *c.PyType_Spec.PyType_Spec.slots:|:c.PyType_Slot:PyType_Slot| *PyType_Spec.slots
   *

      Array of |:c.PyType_Slot:PyType_Slot| structures. Terminated by the special slot value "{0,
      NULL}".

*c.PyType_Slot:type PyType_Slot
*

   Structure defining optional functionality of a type, containing a slot ID and a
   value pointer.

   *c.PyType_Slot.PyType_Slot.slot:int PyType_Slot.slot
   *

      A slot ID.

      Slot IDs are named like the field names of the structures |:c.PyTypeObject:PyTypeObject|,
      |:c-api/typeobj.txt/c.PyNumberMethods:PyNumberMethods|, |:c-api/typeobj.txt/c.PySequenceMethods:PySequenceMethods|, |:c-api/typeobj.txt/c.PyMappingMethods:PyMappingMethods| and |:c-api/typeobj.txt/c.PyAsyncMethods:PyAsyncMethods|
      with an added "Py_" prefix. For example, use:

      * "Py_tp_dealloc" to set |:c-api/typeobj.txt/c.PyTypeObject.tp_dealloc:PyTypeObject.tp_dealloc|

      * "Py_nb_add" to set |:c-api/typeobj.txt/c.PyNumberMethods.nb_add:PyNumberMethods.nb_add|

      * "Py_sq_length" to set |:c-api/typeobj.txt/c.PySequenceMethods.sq_length:PySequenceMethods.sq_length|

      The following fields cannot be set using |:c.PyType_Spec:PyType_Spec| and "PyType_Slot":

      * |:c-api/typeobj.txt/c.PyTypeObject.tp_dict:tp_dict|

      * |:c-api/typeobj.txt/c.PyTypeObject.tp_mro:tp_mro|

      * |:c-api/typeobj.txt/c.PyTypeObject.tp_cache:tp_cache|

      * |:c-api/typeobj.txt/c.PyTypeObject.tp_subclasses:tp_subclasses|

      * |:c-api/typeobj.txt/c.PyTypeObject.tp_weaklist:tp_weaklist|

      * "tp_print"

      * |:c-api/typeobj.txt/c.PyTypeObject.tp_weaklistoffset:tp_weaklistoffset|

      * |:c-api/typeobj.txt/c.PyTypeObject.tp_dictoffset:tp_dictoffset|

      * |:c-api/typeobj.txt/c.PyBufferProcs.bf_getbuffer:bf_getbuffer|

      * |:c-api/typeobj.txt/c.PyBufferProcs.bf_releasebuffer:bf_releasebuffer|

      Setting "Py_tp_bases" or "Py_tp_base" may be problematic on some platforms. To
      avoid issues, use the *bases* argument of "PyType_FromSpecWithBases()" instead.

   *c.PyType_Slot.PyType_Slot.pfunc:void *PyType_Slot.pfunc
   *

      The desired value of the slot. In most cases, this is a pointer to a function.

      May not be "NULL".



