%hyperhelp title="Codec registry and support functions" date="2021-07-11"
*|codec-registry-and-support-functions:⚓|*

*c.PyCodec_Register:int PyCodec_Register(PyObject *search_function)
*

   Register a new codec search function.

   As side effect, this tries to load the "encodings" package, if not yet done, to
   make sure that it is always first in the list of search functions.

*c.PyCodec_KnownEncoding:int PyCodec_KnownEncoding(const char *encoding)
*

   Return "1" or "0" depending on whether there is a registered codec for the given
   *encoding*.  This function always succeeds.

*c.PyCodec_Encode:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_Encode(PyObject *object, const char *encoding, const char *errors)
*
    *Return value: New reference.*

   Generic codec based encoding API.

   *object* is passed through the encoder function found for the given *encoding*
   using the error handling method defined by *errors*.  *errors* may be "NULL" to
   use the default method defined for the codec.  Raises a |:library/exceptions.txt/LookupError:LookupError| if no
   encoder can be found.

*c.PyCodec_Decode:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_Decode(PyObject *object, const char *encoding, const char *errors)
*
    *Return value: New reference.*

   Generic codec based decoding API.

   *object* is passed through the decoder function found for the given *encoding*
   using the error handling method defined by *errors*.  *errors* may be "NULL" to
   use the default method defined for the codec.  Raises a |:library/exceptions.txt/LookupError:LookupError| if no
   encoder can be found.

# codec-lookup-api:Codec lookup API

In the following functions, the *encoding* string is looked up converted to all
lower-case characters, which makes encodings looked up through this mechanism
effectively case-insensitive.  If no codec is found, a |:library/exceptions.txt/KeyError:KeyError| is set and "
NULL" returned.

*c.PyCodec_Encoder:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_Encoder(const char *encoding)
*
    *Return value: New reference.*

   Get an encoder function for the given *encoding*.

*c.PyCodec_Decoder:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_Decoder(const char *encoding)
*
    *Return value: New reference.*

   Get a decoder function for the given *encoding*.

*c.PyCodec_IncrementalEncoder:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_IncrementalEncoder(const char *encoding, const char *errors)
*
    *Return value: New reference.*

   Get an |:library/codecs.txt/codecs.IncrementalEncoder:IncrementalEncoder| object for the given *encoding*.

*c.PyCodec_IncrementalDecoder:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_IncrementalDecoder(const char *encoding, const char *errors)
*
    *Return value: New reference.*

   Get an |:library/codecs.txt/codecs.IncrementalDecoder:IncrementalDecoder| object for the given *encoding*.

*c.PyCodec_StreamReader:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_StreamReader(const char *encoding, PyObject *stream, const char *errors)
*
    *Return value: New reference.*

   Get a |:library/codecs.txt/codecs.StreamReader:StreamReader| factory function for the given *encoding*.

*c.PyCodec_StreamWriter:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_StreamWriter(const char *encoding, PyObject *stream, const char *errors)
*
    *Return value: New reference.*

   Get a |:library/codecs.txt/codecs.StreamWriter:StreamWriter| factory function for the given *encoding*.

# registry-api-for-unicode-encoding-error-handlers:Registry API for Unicode
encoding error handlers

*c.PyCodec_RegisterError:int PyCodec_RegisterError(const char *name, PyObject *error)
*

   Register the error handling callback function *error* under the given *name*.
   This callback function will be called by a codec when it encounters unencodable
   characters/undecodable bytes and *name* is specified as the error parameter in
   the call to the encode/decode function.

   The callback gets a single argument, an instance of |:library/exceptions.txt/UnicodeEncodeError:UnicodeEncodeError|,
   |:library/exceptions.txt/UnicodeDecodeError:UnicodeDecodeError| or |:library/exceptions.txt/UnicodeTranslateError:UnicodeTranslateError| that holds information about the
   problematic sequence of characters or bytes and their offset in the original
   string (see |:c-api/exceptions.txt/unicodeexceptions:Unicode Exception Objects| for functions to extract this
   information).  The callback must either raise the given exception, or return a
   two-item tuple containing the replacement for the problematic sequence, and an
   integer giving the offset in the original string at which encoding/decoding
   should be resumed.

   Return "0" on success, "-1" on error.

*c.PyCodec_LookupError:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_LookupError(const char *name)
*
    *Return value: New reference.*

   Lookup the error handling callback function registered under *name*.  As a
   special case "NULL" can be passed, in which case the error handling callback for
   “strict” will be returned.

*c.PyCodec_StrictErrors:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_StrictErrors(PyObject *exc)
*
    *Return value: Always NULL.*

   Raise *exc* as an exception.

*c.PyCodec_IgnoreErrors:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_IgnoreErrors(PyObject *exc)
*
    *Return value: New reference.*

   Ignore the unicode error, skipping the faulty input.

*c.PyCodec_ReplaceErrors:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_ReplaceErrors(PyObject *exc)
*
    *Return value: New reference.*

   Replace the unicode encode error with "?" or "U+FFFD".

*c.PyCodec_XMLCharRefReplaceErrors:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_XMLCharRefReplaceErrors(PyObject *exc)
*
    *Return value: New reference.*

   Replace the unicode encode error with XML character references.

*c.PyCodec_BackslashReplaceErrors:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_BackslashReplaceErrors(PyObject *exc)
*
    *Return value: New reference.*

   Replace the unicode encode error with backslash escapes ("\x", "\u" and "\U").

*c.PyCodec_NameReplaceErrors:|:c-api/structures.txt/c.PyObject:PyObject| *PyCodec_NameReplaceErrors(PyObject *exc)
*
    *Return value: New reference.*

   Replace the unicode encode error with "\N{...}" escapes.

   New in version 3.5.



