%hyperhelp title="MemoryView objects" date="2021-07-11"
*|index-0:⚓|*

*|memoryview-objects:⚓|*

A |:library/stdtypes.txt/memoryview:memoryview| object exposes the C level |:c-api/buffer.txt/bufferobjects:buffer interface| as a Python object
which can then be passed around like any other object.

*c.PyMemoryView_FromObject:|:c-api/structures.txt/c.PyObject:PyObject| *PyMemoryView_FromObject(PyObject *obj)
*
    *Return value: New reference.*

   Create a memoryview object from an object that provides the buffer interface. If
   *obj* supports writable buffer exports, the memoryview object will be
   read/write, otherwise it may be either read-only or read/write at the discretion
   of the exporter.

*c.PyMemoryView_FromMemory:|:c-api/structures.txt/c.PyObject:PyObject| *PyMemoryView_FromMemory(char *mem, Py_ssize_t size, int flags)
*
    *Return value: New reference.*

   Create a memoryview object using *mem* as the underlying buffer. *flags* can be
   one of "PyBUF_READ" or "PyBUF_WRITE".

   New in version 3.3.

*c.PyMemoryView_FromBuffer:|:c-api/structures.txt/c.PyObject:PyObject| *PyMemoryView_FromBuffer(Py_buffer *view)
*
    *Return value: New reference.*

   Create a memoryview object wrapping the given buffer structure *view*. For
   simple byte buffers, |:c.PyMemoryView_FromMemory:PyMemoryView_FromMemory()| is the preferred function.

*c.PyMemoryView_GetContiguous:|:c-api/structures.txt/c.PyObject:PyObject| *PyMemoryView_GetContiguous(PyObject *obj, int buffertype, char order)
*
    *Return value: New reference.*

   Create a memoryview object to a |:glossary.txt/term-contiguous:contiguous| chunk of memory (in either ‘C’ or
   ‘F’ortran *order*) from an object that defines the buffer interface. If memory
   is contiguous, the memoryview object points to the original memory. Otherwise, a
   copy is made and the memoryview points to a new bytes object.

*c.PyMemoryView_Check:int PyMemoryView_Check(PyObject *obj)
*

   Return true if the object *obj* is a memoryview object.  It is not currently
   allowed to create subclasses of |:library/stdtypes.txt/memoryview:memoryview|.

*c.PyMemoryView_GET_BUFFER:|:c-api/buffer.txt/c.Py_buffer:Py_buffer| *PyMemoryView_GET_BUFFER(PyObject *mview)
*

   Return a pointer to the memoryview’s private copy of the exporter’s buffer. *
   mview* *must* be a memoryview instance; this macro doesn’t check its type, you
   must do it yourself or you will risk crashes.

*c.PyMemoryView_GET_BASE:|:c-api/buffer.txt/c.Py_buffer:Py_buffer| *PyMemoryView_GET_BASE(PyObject *mview)
*

   Return either a pointer to the exporting object that the memoryview is based on
   or "NULL" if the memoryview has been created by one of the functions
   |:c.PyMemoryView_FromMemory:PyMemoryView_FromMemory()| or |:c.PyMemoryView_FromBuffer:PyMemoryView_FromBuffer()|. *mview* *must* be a
   memoryview instance.



